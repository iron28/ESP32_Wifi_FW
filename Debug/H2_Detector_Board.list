
H2_Detector_Board.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f10  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000114  0800301c  0800301c  0001301c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003130  08003130  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08003130  08003130  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003130  08003130  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003130  08003130  00013130  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003134  08003134  00013134  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08003138  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b8  20000078  080031b0  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000330  080031b0  00020330  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e4a8  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ef6  00000000  00000000  0002e549  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0000a511  00000000  00000000  0003043f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c30  00000000  00000000  0003a950  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000c10  00000000  00000000  0003b580  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018045  00000000  00000000  0003c190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001062d  00000000  00000000  000541d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008b7b7  00000000  00000000  00064802  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000effb9  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002548  00000000  00000000  000f000c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000078 	.word	0x20000078
 8000128:	00000000 	.word	0x00000000
 800012c:	08003004 	.word	0x08003004

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000007c 	.word	0x2000007c
 8000148:	08003004 	.word	0x08003004

0800014c <__aeabi_drsub>:
 800014c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__adddf3>
 8000152:	bf00      	nop

08000154 <__aeabi_dsub>:
 8000154:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000158 <__adddf3>:
 8000158:	b530      	push	{r4, r5, lr}
 800015a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800015e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000162:	ea94 0f05 	teq	r4, r5
 8000166:	bf08      	it	eq
 8000168:	ea90 0f02 	teqeq	r0, r2
 800016c:	bf1f      	itttt	ne
 800016e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000172:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000176:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800017e:	f000 80e2 	beq.w	8000346 <__adddf3+0x1ee>
 8000182:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000186:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018a:	bfb8      	it	lt
 800018c:	426d      	neglt	r5, r5
 800018e:	dd0c      	ble.n	80001aa <__adddf3+0x52>
 8000190:	442c      	add	r4, r5
 8000192:	ea80 0202 	eor.w	r2, r0, r2
 8000196:	ea81 0303 	eor.w	r3, r1, r3
 800019a:	ea82 0000 	eor.w	r0, r2, r0
 800019e:	ea83 0101 	eor.w	r1, r3, r1
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	2d36      	cmp	r5, #54	; 0x36
 80001ac:	bf88      	it	hi
 80001ae:	bd30      	pophi	{r4, r5, pc}
 80001b0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001b8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c0:	d002      	beq.n	80001c8 <__adddf3+0x70>
 80001c2:	4240      	negs	r0, r0
 80001c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001c8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x84>
 80001d6:	4252      	negs	r2, r2
 80001d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001dc:	ea94 0f05 	teq	r4, r5
 80001e0:	f000 80a7 	beq.w	8000332 <__adddf3+0x1da>
 80001e4:	f1a4 0401 	sub.w	r4, r4, #1
 80001e8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001ec:	db0d      	blt.n	800020a <__adddf3+0xb2>
 80001ee:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f2:	fa22 f205 	lsr.w	r2, r2, r5
 80001f6:	1880      	adds	r0, r0, r2
 80001f8:	f141 0100 	adc.w	r1, r1, #0
 80001fc:	fa03 f20e 	lsl.w	r2, r3, lr
 8000200:	1880      	adds	r0, r0, r2
 8000202:	fa43 f305 	asr.w	r3, r3, r5
 8000206:	4159      	adcs	r1, r3
 8000208:	e00e      	b.n	8000228 <__adddf3+0xd0>
 800020a:	f1a5 0520 	sub.w	r5, r5, #32
 800020e:	f10e 0e20 	add.w	lr, lr, #32
 8000212:	2a01      	cmp	r2, #1
 8000214:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000218:	bf28      	it	cs
 800021a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800021e:	fa43 f305 	asr.w	r3, r3, r5
 8000222:	18c0      	adds	r0, r0, r3
 8000224:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000228:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800022c:	d507      	bpl.n	800023e <__adddf3+0xe6>
 800022e:	f04f 0e00 	mov.w	lr, #0
 8000232:	f1dc 0c00 	rsbs	ip, ip, #0
 8000236:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023a:	eb6e 0101 	sbc.w	r1, lr, r1
 800023e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000242:	d31b      	bcc.n	800027c <__adddf3+0x124>
 8000244:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000248:	d30c      	bcc.n	8000264 <__adddf3+0x10c>
 800024a:	0849      	lsrs	r1, r1, #1
 800024c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000250:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000254:	f104 0401 	add.w	r4, r4, #1
 8000258:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800025c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000260:	f080 809a 	bcs.w	8000398 <__adddf3+0x240>
 8000264:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000268:	bf08      	it	eq
 800026a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800026e:	f150 0000 	adcs.w	r0, r0, #0
 8000272:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000276:	ea41 0105 	orr.w	r1, r1, r5
 800027a:	bd30      	pop	{r4, r5, pc}
 800027c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000280:	4140      	adcs	r0, r0
 8000282:	eb41 0101 	adc.w	r1, r1, r1
 8000286:	3c01      	subs	r4, #1
 8000288:	bf28      	it	cs
 800028a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800028e:	d2e9      	bcs.n	8000264 <__adddf3+0x10c>
 8000290:	f091 0f00 	teq	r1, #0
 8000294:	bf04      	itt	eq
 8000296:	4601      	moveq	r1, r0
 8000298:	2000      	moveq	r0, #0
 800029a:	fab1 f381 	clz	r3, r1
 800029e:	bf08      	it	eq
 80002a0:	3320      	addeq	r3, #32
 80002a2:	f1a3 030b 	sub.w	r3, r3, #11
 80002a6:	f1b3 0220 	subs.w	r2, r3, #32
 80002aa:	da0c      	bge.n	80002c6 <__adddf3+0x16e>
 80002ac:	320c      	adds	r2, #12
 80002ae:	dd08      	ble.n	80002c2 <__adddf3+0x16a>
 80002b0:	f102 0c14 	add.w	ip, r2, #20
 80002b4:	f1c2 020c 	rsb	r2, r2, #12
 80002b8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002bc:	fa21 f102 	lsr.w	r1, r1, r2
 80002c0:	e00c      	b.n	80002dc <__adddf3+0x184>
 80002c2:	f102 0214 	add.w	r2, r2, #20
 80002c6:	bfd8      	it	le
 80002c8:	f1c2 0c20 	rsble	ip, r2, #32
 80002cc:	fa01 f102 	lsl.w	r1, r1, r2
 80002d0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d4:	bfdc      	itt	le
 80002d6:	ea41 010c 	orrle.w	r1, r1, ip
 80002da:	4090      	lslle	r0, r2
 80002dc:	1ae4      	subs	r4, r4, r3
 80002de:	bfa2      	ittt	ge
 80002e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e4:	4329      	orrge	r1, r5
 80002e6:	bd30      	popge	{r4, r5, pc}
 80002e8:	ea6f 0404 	mvn.w	r4, r4
 80002ec:	3c1f      	subs	r4, #31
 80002ee:	da1c      	bge.n	800032a <__adddf3+0x1d2>
 80002f0:	340c      	adds	r4, #12
 80002f2:	dc0e      	bgt.n	8000312 <__adddf3+0x1ba>
 80002f4:	f104 0414 	add.w	r4, r4, #20
 80002f8:	f1c4 0220 	rsb	r2, r4, #32
 80002fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000300:	fa01 f302 	lsl.w	r3, r1, r2
 8000304:	ea40 0003 	orr.w	r0, r0, r3
 8000308:	fa21 f304 	lsr.w	r3, r1, r4
 800030c:	ea45 0103 	orr.w	r1, r5, r3
 8000310:	bd30      	pop	{r4, r5, pc}
 8000312:	f1c4 040c 	rsb	r4, r4, #12
 8000316:	f1c4 0220 	rsb	r2, r4, #32
 800031a:	fa20 f002 	lsr.w	r0, r0, r2
 800031e:	fa01 f304 	lsl.w	r3, r1, r4
 8000322:	ea40 0003 	orr.w	r0, r0, r3
 8000326:	4629      	mov	r1, r5
 8000328:	bd30      	pop	{r4, r5, pc}
 800032a:	fa21 f004 	lsr.w	r0, r1, r4
 800032e:	4629      	mov	r1, r5
 8000330:	bd30      	pop	{r4, r5, pc}
 8000332:	f094 0f00 	teq	r4, #0
 8000336:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033a:	bf06      	itte	eq
 800033c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000340:	3401      	addeq	r4, #1
 8000342:	3d01      	subne	r5, #1
 8000344:	e74e      	b.n	80001e4 <__adddf3+0x8c>
 8000346:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034a:	bf18      	it	ne
 800034c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000350:	d029      	beq.n	80003a6 <__adddf3+0x24e>
 8000352:	ea94 0f05 	teq	r4, r5
 8000356:	bf08      	it	eq
 8000358:	ea90 0f02 	teqeq	r0, r2
 800035c:	d005      	beq.n	800036a <__adddf3+0x212>
 800035e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000362:	bf04      	itt	eq
 8000364:	4619      	moveq	r1, r3
 8000366:	4610      	moveq	r0, r2
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	ea91 0f03 	teq	r1, r3
 800036e:	bf1e      	ittt	ne
 8000370:	2100      	movne	r1, #0
 8000372:	2000      	movne	r0, #0
 8000374:	bd30      	popne	{r4, r5, pc}
 8000376:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037a:	d105      	bne.n	8000388 <__adddf3+0x230>
 800037c:	0040      	lsls	r0, r0, #1
 800037e:	4149      	adcs	r1, r1
 8000380:	bf28      	it	cs
 8000382:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000386:	bd30      	pop	{r4, r5, pc}
 8000388:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800038c:	bf3c      	itt	cc
 800038e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000392:	bd30      	popcc	{r4, r5, pc}
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000398:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800039c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a0:	f04f 0000 	mov.w	r0, #0
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003aa:	bf1a      	itte	ne
 80003ac:	4619      	movne	r1, r3
 80003ae:	4610      	movne	r0, r2
 80003b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b4:	bf1c      	itt	ne
 80003b6:	460b      	movne	r3, r1
 80003b8:	4602      	movne	r2, r0
 80003ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003be:	bf06      	itte	eq
 80003c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c4:	ea91 0f03 	teqeq	r1, r3
 80003c8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	bf00      	nop

080003d0 <__aeabi_ui2d>:
 80003d0:	f090 0f00 	teq	r0, #0
 80003d4:	bf04      	itt	eq
 80003d6:	2100      	moveq	r1, #0
 80003d8:	4770      	bxeq	lr
 80003da:	b530      	push	{r4, r5, lr}
 80003dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e4:	f04f 0500 	mov.w	r5, #0
 80003e8:	f04f 0100 	mov.w	r1, #0
 80003ec:	e750      	b.n	8000290 <__adddf3+0x138>
 80003ee:	bf00      	nop

080003f0 <__aeabi_i2d>:
 80003f0:	f090 0f00 	teq	r0, #0
 80003f4:	bf04      	itt	eq
 80003f6:	2100      	moveq	r1, #0
 80003f8:	4770      	bxeq	lr
 80003fa:	b530      	push	{r4, r5, lr}
 80003fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000400:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000404:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000408:	bf48      	it	mi
 800040a:	4240      	negmi	r0, r0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e73e      	b.n	8000290 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_f2d>:
 8000414:	0042      	lsls	r2, r0, #1
 8000416:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041a:	ea4f 0131 	mov.w	r1, r1, rrx
 800041e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000422:	bf1f      	itttt	ne
 8000424:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000428:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800042c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000430:	4770      	bxne	lr
 8000432:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000436:	bf08      	it	eq
 8000438:	4770      	bxeq	lr
 800043a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800043e:	bf04      	itt	eq
 8000440:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000444:	4770      	bxeq	lr
 8000446:	b530      	push	{r4, r5, lr}
 8000448:	f44f 7460 	mov.w	r4, #896	; 0x380
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000450:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000454:	e71c      	b.n	8000290 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_ul2d>:
 8000458:	ea50 0201 	orrs.w	r2, r0, r1
 800045c:	bf08      	it	eq
 800045e:	4770      	bxeq	lr
 8000460:	b530      	push	{r4, r5, lr}
 8000462:	f04f 0500 	mov.w	r5, #0
 8000466:	e00a      	b.n	800047e <__aeabi_l2d+0x16>

08000468 <__aeabi_l2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000476:	d502      	bpl.n	800047e <__aeabi_l2d+0x16>
 8000478:	4240      	negs	r0, r0
 800047a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000482:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000486:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048a:	f43f aed8 	beq.w	800023e <__adddf3+0xe6>
 800048e:	f04f 0203 	mov.w	r2, #3
 8000492:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000496:	bf18      	it	ne
 8000498:	3203      	addne	r2, #3
 800049a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049e:	bf18      	it	ne
 80004a0:	3203      	addne	r2, #3
 80004a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a6:	f1c2 0320 	rsb	r3, r2, #32
 80004aa:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b6:	ea40 000e 	orr.w	r0, r0, lr
 80004ba:	fa21 f102 	lsr.w	r1, r1, r2
 80004be:	4414      	add	r4, r2
 80004c0:	e6bd      	b.n	800023e <__adddf3+0xe6>
 80004c2:	bf00      	nop

080004c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004c4:	b530      	push	{r4, r5, lr}
 80004c6:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004c8:	2400      	movs	r4, #0
 80004ca:	9404      	str	r4, [sp, #16]
 80004cc:	9405      	str	r4, [sp, #20]
 80004ce:	9406      	str	r4, [sp, #24]
 80004d0:	9407      	str	r4, [sp, #28]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80004d2:	4b18      	ldr	r3, [pc, #96]	; (8000534 <MX_GPIO_Init+0x70>)
 80004d4:	699a      	ldr	r2, [r3, #24]
 80004d6:	f042 0220 	orr.w	r2, r2, #32
 80004da:	619a      	str	r2, [r3, #24]
 80004dc:	699a      	ldr	r2, [r3, #24]
 80004de:	f002 0220 	and.w	r2, r2, #32
 80004e2:	9201      	str	r2, [sp, #4]
 80004e4:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004e6:	699a      	ldr	r2, [r3, #24]
 80004e8:	f042 0204 	orr.w	r2, r2, #4
 80004ec:	619a      	str	r2, [r3, #24]
 80004ee:	699a      	ldr	r2, [r3, #24]
 80004f0:	f002 0204 	and.w	r2, r2, #4
 80004f4:	9202      	str	r2, [sp, #8]
 80004f6:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004f8:	699a      	ldr	r2, [r3, #24]
 80004fa:	f042 0208 	orr.w	r2, r2, #8
 80004fe:	619a      	str	r2, [r3, #24]
 8000500:	699b      	ldr	r3, [r3, #24]
 8000502:	f003 0308 	and.w	r3, r3, #8
 8000506:	9303      	str	r3, [sp, #12]
 8000508:	9b03      	ldr	r3, [sp, #12]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 800050a:	4d0b      	ldr	r5, [pc, #44]	; (8000538 <MX_GPIO_Init+0x74>)
 800050c:	4622      	mov	r2, r4
 800050e:	f249 01c0 	movw	r1, #37056	; 0x90c0
 8000512:	4628      	mov	r0, r5
 8000514:	f000 ffee 	bl	80014f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB12 PB15 PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_6|GPIO_PIN_7;
 8000518:	f249 03c0 	movw	r3, #37056	; 0x90c0
 800051c:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800051e:	2301      	movs	r3, #1
 8000520:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000522:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000524:	2302      	movs	r3, #2
 8000526:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000528:	a904      	add	r1, sp, #16
 800052a:	4628      	mov	r0, r5
 800052c:	f000 fed0 	bl	80012d0 <HAL_GPIO_Init>

}
 8000530:	b009      	add	sp, #36	; 0x24
 8000532:	bd30      	pop	{r4, r5, pc}
 8000534:	40021000 	.word	0x40021000
 8000538:	40010c00 	.word	0x40010c00

0800053c <increase_ptr>:
    (* data_ptr)++;
 800053c:	6803      	ldr	r3, [r0, #0]
 800053e:	3301      	adds	r3, #1
 8000540:	6003      	str	r3, [r0, #0]
    if(RING_SIZE <= (* data_ptr))
 8000542:	2b31      	cmp	r3, #49	; 0x31
 8000544:	d901      	bls.n	800054a <increase_ptr+0xe>
        (* data_ptr) = 0;
 8000546:	2300      	movs	r3, #0
 8000548:	6003      	str	r3, [r0, #0]
}
 800054a:	4770      	bx	lr

0800054c <Clean>:
	for(int j=0;j< RING_SIZE; j++) ring_buffer[j]=0;
 800054c:	2300      	movs	r3, #0
 800054e:	e003      	b.n	8000558 <Clean+0xc>
 8000550:	4a05      	ldr	r2, [pc, #20]	; (8000568 <Clean+0x1c>)
 8000552:	2100      	movs	r1, #0
 8000554:	54d1      	strb	r1, [r2, r3]
 8000556:	3301      	adds	r3, #1
 8000558:	2b31      	cmp	r3, #49	; 0x31
 800055a:	ddf9      	ble.n	8000550 <Clean+0x4>
	ring_ptr_head = 0;
 800055c:	2300      	movs	r3, #0
 800055e:	4a03      	ldr	r2, [pc, #12]	; (800056c <Clean+0x20>)
 8000560:	6013      	str	r3, [r2, #0]
	ring_ptr_tail = 0;
 8000562:	4a03      	ldr	r2, [pc, #12]	; (8000570 <Clean+0x24>)
 8000564:	6013      	str	r3, [r2, #0]
}
 8000566:	4770      	bx	lr
 8000568:	20000298 	.word	0x20000298
 800056c:	20000300 	.word	0x20000300
 8000570:	20000308 	.word	0x20000308

08000574 <Clean1>:
	for(int j=0;j< RING_SIZE; j++) ring_buffer1[j]=0;
 8000574:	2300      	movs	r3, #0
 8000576:	e003      	b.n	8000580 <Clean1+0xc>
 8000578:	4a05      	ldr	r2, [pc, #20]	; (8000590 <Clean1+0x1c>)
 800057a:	2100      	movs	r1, #0
 800057c:	54d1      	strb	r1, [r2, r3]
 800057e:	3301      	adds	r3, #1
 8000580:	2b31      	cmp	r3, #49	; 0x31
 8000582:	ddf9      	ble.n	8000578 <Clean1+0x4>
	ring_ptr_head1 = 0;
 8000584:	2300      	movs	r3, #0
 8000586:	4a03      	ldr	r2, [pc, #12]	; (8000594 <Clean1+0x20>)
 8000588:	6013      	str	r3, [r2, #0]
	ring_ptr_tail1 = 0;
 800058a:	4a03      	ldr	r2, [pc, #12]	; (8000598 <Clean1+0x24>)
 800058c:	6013      	str	r3, [r2, #0]
}
 800058e:	4770      	bx	lr
 8000590:	200002cc 	.word	0x200002cc
 8000594:	20000304 	.word	0x20000304
 8000598:	2000030c 	.word	0x2000030c

0800059c <EnQ>:
{
 800059c:	b508      	push	{r3, lr}
    ring_buffer[ring_ptr_head] = data;
 800059e:	4b04      	ldr	r3, [pc, #16]	; (80005b0 <EnQ+0x14>)
 80005a0:	681a      	ldr	r2, [r3, #0]
 80005a2:	4904      	ldr	r1, [pc, #16]	; (80005b4 <EnQ+0x18>)
 80005a4:	5488      	strb	r0, [r1, r2]
    increase_ptr(&ring_ptr_head);
 80005a6:	4618      	mov	r0, r3
 80005a8:	f7ff ffc8 	bl	800053c <increase_ptr>
}
 80005ac:	bd08      	pop	{r3, pc}
 80005ae:	bf00      	nop
 80005b0:	20000300 	.word	0x20000300
 80005b4:	20000298 	.word	0x20000298

080005b8 <EnQ_1>:
{
 80005b8:	b508      	push	{r3, lr}
    ring_buffer1[ring_ptr_head1] = data;
 80005ba:	4b04      	ldr	r3, [pc, #16]	; (80005cc <EnQ_1+0x14>)
 80005bc:	681a      	ldr	r2, [r3, #0]
 80005be:	4904      	ldr	r1, [pc, #16]	; (80005d0 <EnQ_1+0x18>)
 80005c0:	5488      	strb	r0, [r1, r2]
    increase_ptr(&ring_ptr_head1);
 80005c2:	4618      	mov	r0, r3
 80005c4:	f7ff ffba 	bl	800053c <increase_ptr>
}
 80005c8:	bd08      	pop	{r3, pc}
 80005ca:	bf00      	nop
 80005cc:	20000304 	.word	0x20000304
 80005d0:	200002cc 	.word	0x200002cc

080005d4 <DeQ>:
{
 80005d4:	b510      	push	{r4, lr}
    uint8_t retVal = ring_buffer[ring_ptr_tail];
 80005d6:	4804      	ldr	r0, [pc, #16]	; (80005e8 <DeQ+0x14>)
 80005d8:	6803      	ldr	r3, [r0, #0]
 80005da:	4a04      	ldr	r2, [pc, #16]	; (80005ec <DeQ+0x18>)
 80005dc:	5cd4      	ldrb	r4, [r2, r3]
    increase_ptr(&ring_ptr_tail);
 80005de:	f7ff ffad 	bl	800053c <increase_ptr>
}
 80005e2:	4620      	mov	r0, r4
 80005e4:	bd10      	pop	{r4, pc}
 80005e6:	bf00      	nop
 80005e8:	20000308 	.word	0x20000308
 80005ec:	20000298 	.word	0x20000298

080005f0 <DeQ_1>:
{
 80005f0:	b510      	push	{r4, lr}
    uint8_t retVal = ring_buffer1[ring_ptr_tail1];
 80005f2:	4804      	ldr	r0, [pc, #16]	; (8000604 <DeQ_1+0x14>)
 80005f4:	6803      	ldr	r3, [r0, #0]
 80005f6:	4a04      	ldr	r2, [pc, #16]	; (8000608 <DeQ_1+0x18>)
 80005f8:	5cd4      	ldrb	r4, [r2, r3]
    increase_ptr(&ring_ptr_tail1);
 80005fa:	f7ff ff9f 	bl	800053c <increase_ptr>
}
 80005fe:	4620      	mov	r0, r4
 8000600:	bd10      	pop	{r4, pc}
 8000602:	bf00      	nop
 8000604:	2000030c 	.word	0x2000030c
 8000608:	200002cc 	.word	0x200002cc

0800060c <HAL_UART_RxCpltCallback>:
{
 800060c:	b538      	push	{r3, r4, r5, lr}
 800060e:	4604      	mov	r4, r0
	if(huart -> Instance == huart1.Instance)
 8000610:	6802      	ldr	r2, [r0, #0]
 8000612:	4b0f      	ldr	r3, [pc, #60]	; (8000650 <HAL_UART_RxCpltCallback+0x44>)
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	429a      	cmp	r2, r3
 8000618:	d005      	beq.n	8000626 <HAL_UART_RxCpltCallback+0x1a>
	if(huart -> Instance == huart3.Instance)
 800061a:	6822      	ldr	r2, [r4, #0]
 800061c:	4b0d      	ldr	r3, [pc, #52]	; (8000654 <HAL_UART_RxCpltCallback+0x48>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	429a      	cmp	r2, r3
 8000622:	d00a      	beq.n	800063a <HAL_UART_RxCpltCallback+0x2e>
}
 8000624:	bd38      	pop	{r3, r4, r5, pc}
		EnQ_1(rcvDat1);
 8000626:	4d0c      	ldr	r5, [pc, #48]	; (8000658 <HAL_UART_RxCpltCallback+0x4c>)
 8000628:	7828      	ldrb	r0, [r5, #0]
 800062a:	f7ff ffc5 	bl	80005b8 <EnQ_1>
		HAL_UART_Receive_IT(&huart1, &rcvDat1, 1);
 800062e:	2201      	movs	r2, #1
 8000630:	4629      	mov	r1, r5
 8000632:	4807      	ldr	r0, [pc, #28]	; (8000650 <HAL_UART_RxCpltCallback+0x44>)
 8000634:	f002 f809 	bl	800264a <HAL_UART_Receive_IT>
 8000638:	e7ef      	b.n	800061a <HAL_UART_RxCpltCallback+0xe>
		EnQ(rcvDat);
 800063a:	4c08      	ldr	r4, [pc, #32]	; (800065c <HAL_UART_RxCpltCallback+0x50>)
 800063c:	7820      	ldrb	r0, [r4, #0]
 800063e:	f7ff ffad 	bl	800059c <EnQ>
		HAL_UART_Receive_IT(&huart3, &rcvDat, 1);
 8000642:	2201      	movs	r2, #1
 8000644:	4621      	mov	r1, r4
 8000646:	4803      	ldr	r0, [pc, #12]	; (8000654 <HAL_UART_RxCpltCallback+0x48>)
 8000648:	f001 ffff 	bl	800264a <HAL_UART_Receive_IT>
}
 800064c:	e7ea      	b.n	8000624 <HAL_UART_RxCpltCallback+0x18>
 800064e:	bf00      	nop
 8000650:	200001bc 	.word	0x200001bc
 8000654:	20000244 	.word	0x20000244
 8000658:	20000295 	.word	0x20000295
 800065c:	20000294 	.word	0x20000294

08000660 <compare>:
uint8_t compare(const char * str, uint8_t len){
 8000660:	b570      	push	{r4, r5, r6, lr}
 8000662:	b086      	sub	sp, #24
 8000664:	4606      	mov	r6, r0
 8000666:	460d      	mov	r5, r1
	char dat[20]={0,};
 8000668:	2300      	movs	r3, #0
 800066a:	9301      	str	r3, [sp, #4]
 800066c:	9302      	str	r3, [sp, #8]
 800066e:	9303      	str	r3, [sp, #12]
 8000670:	9304      	str	r3, [sp, #16]
 8000672:	9305      	str	r3, [sp, #20]
	for(int k=0;k<20;k++) dat[k]=0;
 8000674:	e006      	b.n	8000684 <compare+0x24>
 8000676:	f103 0218 	add.w	r2, r3, #24
 800067a:	446a      	add	r2, sp
 800067c:	2100      	movs	r1, #0
 800067e:	f802 1c14 	strb.w	r1, [r2, #-20]
 8000682:	3301      	adds	r3, #1
 8000684:	2b13      	cmp	r3, #19
 8000686:	ddf6      	ble.n	8000676 <compare+0x16>
 8000688:	e010      	b.n	80006ac <compare+0x4c>
			  dat[i+1]=DeQ();
 800068a:	3401      	adds	r4, #1
 800068c:	f7ff ffa2 	bl	80005d4 <DeQ>
 8000690:	f104 0318 	add.w	r3, r4, #24
 8000694:	446b      	add	r3, sp
 8000696:	f803 0c14 	strb.w	r0, [r3, #-20]
		  for(int i=0;i<len-1;i++){
 800069a:	1e6b      	subs	r3, r5, #1
 800069c:	42a3      	cmp	r3, r4
 800069e:	dcf4      	bgt.n	800068a <compare+0x2a>
		  if(!strncmp(str, dat, len)) result=1;
 80006a0:	462a      	mov	r2, r5
 80006a2:	a901      	add	r1, sp, #4
 80006a4:	4630      	mov	r0, r6
 80006a6:	f002 f83f 	bl	8002728 <strncmp>
 80006aa:	b140      	cbz	r0, 80006be <compare+0x5e>
    	if(DeQ()=='O'){
 80006ac:	f7ff ff92 	bl	80005d4 <DeQ>
 80006b0:	284f      	cmp	r0, #79	; 0x4f
 80006b2:	d1fb      	bne.n	80006ac <compare+0x4c>
          dat[0]='O';
 80006b4:	234f      	movs	r3, #79	; 0x4f
 80006b6:	f88d 3004 	strb.w	r3, [sp, #4]
		  for(int i=0;i<len-1;i++){
 80006ba:	2400      	movs	r4, #0
 80006bc:	e7ed      	b.n	800069a <compare+0x3a>
}
 80006be:	2001      	movs	r0, #1
 80006c0:	b006      	add	sp, #24
 80006c2:	bd70      	pop	{r4, r5, r6, pc}

080006c4 <compare_OK>:
uint8_t compare_OK(const char * str, uint8_t len){
 80006c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006c6:	b087      	sub	sp, #28
 80006c8:	4606      	mov	r6, r0
 80006ca:	460d      	mov	r5, r1
	compare_cnt=0;
 80006cc:	2300      	movs	r3, #0
 80006ce:	4a1d      	ldr	r2, [pc, #116]	; (8000744 <compare_OK+0x80>)
 80006d0:	7013      	strb	r3, [r2, #0]
	char dat[20]={0,};
 80006d2:	9301      	str	r3, [sp, #4]
 80006d4:	9302      	str	r3, [sp, #8]
 80006d6:	9303      	str	r3, [sp, #12]
 80006d8:	9304      	str	r3, [sp, #16]
 80006da:	9305      	str	r3, [sp, #20]
	for(int k=0;k<20;k++) dat[k]=0;
 80006dc:	e006      	b.n	80006ec <compare_OK+0x28>
 80006de:	f103 0218 	add.w	r2, r3, #24
 80006e2:	446a      	add	r2, sp
 80006e4:	2100      	movs	r1, #0
 80006e6:	f802 1c14 	strb.w	r1, [r2, #-20]
 80006ea:	3301      	adds	r3, #1
 80006ec:	2b13      	cmp	r3, #19
 80006ee:	ddf6      	ble.n	80006de <compare_OK+0x1a>
	uint8_t result=0;
 80006f0:	2700      	movs	r7, #0
 80006f2:	e003      	b.n	80006fc <compare_OK+0x38>
    	if(DeQ()=='O'){
 80006f4:	f7ff ff6e 	bl	80005d4 <DeQ>
 80006f8:	284f      	cmp	r0, #79	; 0x4f
 80006fa:	d009      	beq.n	8000710 <compare_OK+0x4c>
	while(!result){
 80006fc:	b9ff      	cbnz	r7, 800073e <compare_OK+0x7a>
		compare_cnt++;
 80006fe:	4a11      	ldr	r2, [pc, #68]	; (8000744 <compare_OK+0x80>)
 8000700:	7813      	ldrb	r3, [r2, #0]
 8000702:	3301      	adds	r3, #1
 8000704:	b2db      	uxtb	r3, r3
 8000706:	7013      	strb	r3, [r2, #0]
		if(compare_cnt > 42){
 8000708:	2b2a      	cmp	r3, #42	; 0x2a
 800070a:	d9f3      	bls.n	80006f4 <compare_OK+0x30>
			result=1;
 800070c:	2701      	movs	r7, #1
 800070e:	e7f1      	b.n	80006f4 <compare_OK+0x30>
          dat[0]='O';
 8000710:	234f      	movs	r3, #79	; 0x4f
 8000712:	f88d 3004 	strb.w	r3, [sp, #4]
		  for(int i=0;i<len-1;i++){
 8000716:	2400      	movs	r4, #0
 8000718:	e007      	b.n	800072a <compare_OK+0x66>
			  dat[i+1]=DeQ();
 800071a:	3401      	adds	r4, #1
 800071c:	f7ff ff5a 	bl	80005d4 <DeQ>
 8000720:	f104 0318 	add.w	r3, r4, #24
 8000724:	446b      	add	r3, sp
 8000726:	f803 0c14 	strb.w	r0, [r3, #-20]
		  for(int i=0;i<len-1;i++){
 800072a:	1e6b      	subs	r3, r5, #1
 800072c:	42a3      	cmp	r3, r4
 800072e:	dcf4      	bgt.n	800071a <compare_OK+0x56>
		  if(!strncmp(str, dat, len)) result=1;
 8000730:	462a      	mov	r2, r5
 8000732:	a901      	add	r1, sp, #4
 8000734:	4630      	mov	r0, r6
 8000736:	f001 fff7 	bl	8002728 <strncmp>
 800073a:	2800      	cmp	r0, #0
 800073c:	d1de      	bne.n	80006fc <compare_OK+0x38>
}
 800073e:	2001      	movs	r0, #1
 8000740:	b007      	add	sp, #28
 8000742:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000744:	20000094 	.word	0x20000094

08000748 <parsing>:
uint8_t parsing(){
 8000748:	b570      	push	{r4, r5, r6, lr}
    if(ring_ptr_head1 < ring_ptr_tail1)
 800074a:	4b20      	ldr	r3, [pc, #128]	; (80007cc <parsing+0x84>)
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	4a20      	ldr	r2, [pc, #128]	; (80007d0 <parsing+0x88>)
 8000750:	6815      	ldr	r5, [r2, #0]
 8000752:	42ab      	cmp	r3, r5
 8000754:	d218      	bcs.n	8000788 <parsing+0x40>
    	len_buf= RING_SIZE-ring_ptr_tail1;
 8000756:	f1c5 0532 	rsb	r5, r5, #50	; 0x32
		for(int i=0;i<len_buf; i++)
 800075a:	2400      	movs	r4, #0
 800075c:	e004      	b.n	8000768 <parsing+0x20>
			h2_buffer[i]=DeQ_1();
 800075e:	f7ff ff47 	bl	80005f0 <DeQ_1>
 8000762:	4b1c      	ldr	r3, [pc, #112]	; (80007d4 <parsing+0x8c>)
 8000764:	5518      	strb	r0, [r3, r4]
		for(int i=0;i<len_buf; i++)
 8000766:	3401      	adds	r4, #1
 8000768:	42ac      	cmp	r4, r5
 800076a:	dbf8      	blt.n	800075e <parsing+0x16>
		overflow_flag=1;
 800076c:	4b1a      	ldr	r3, [pc, #104]	; (80007d8 <parsing+0x90>)
 800076e:	2201      	movs	r2, #1
 8000770:	601a      	str	r2, [r3, #0]
		overflow_front_size=len_buf;
 8000772:	4b1a      	ldr	r3, [pc, #104]	; (80007dc <parsing+0x94>)
 8000774:	601d      	str	r5, [r3, #0]
		len_buf=ring_ptr_head1;
 8000776:	4b15      	ldr	r3, [pc, #84]	; (80007cc <parsing+0x84>)
 8000778:	681d      	ldr	r5, [r3, #0]
		ring_ptr_tail1=0;
 800077a:	4b15      	ldr	r3, [pc, #84]	; (80007d0 <parsing+0x88>)
 800077c:	2200      	movs	r2, #0
 800077e:	601a      	str	r2, [r3, #0]
	if(len_buf >= BUF_SIZE)
 8000780:	2dc7      	cmp	r5, #199	; 0xc7
 8000782:	dc0d      	bgt.n	80007a0 <parsing+0x58>
	for(int i=0;i<len_buf; i++)
 8000784:	2400      	movs	r4, #0
 8000786:	e015      	b.n	80007b4 <parsing+0x6c>
		len_buf= (int)(ring_ptr_head1 - ring_ptr_tail1)/sizeof(uint8_t);
 8000788:	1b5d      	subs	r5, r3, r5
 800078a:	e7f9      	b.n	8000780 <parsing+0x38>
		  h2_buffer[h]=0;
 800078c:	4b11      	ldr	r3, [pc, #68]	; (80007d4 <parsing+0x8c>)
 800078e:	2200      	movs	r2, #0
 8000790:	551a      	strb	r2, [r3, r4]
		  DeQ_1();
 8000792:	f7ff ff2d 	bl	80005f0 <DeQ_1>
	  for(int h=0;h<BUF_SIZE;h++)
 8000796:	3401      	adds	r4, #1
 8000798:	2cc7      	cmp	r4, #199	; 0xc7
 800079a:	ddf7      	ble.n	800078c <parsing+0x44>
	  len_buf=0;
 800079c:	2500      	movs	r5, #0
 800079e:	e7f1      	b.n	8000784 <parsing+0x3c>
	  for(int h=0;h<BUF_SIZE;h++)
 80007a0:	2400      	movs	r4, #0
 80007a2:	e7f9      	b.n	8000798 <parsing+0x50>
			h2_buffer[i+overflow_front_size]=DeQ_1();
 80007a4:	4b0d      	ldr	r3, [pc, #52]	; (80007dc <parsing+0x94>)
 80007a6:	681e      	ldr	r6, [r3, #0]
 80007a8:	4426      	add	r6, r4
 80007aa:	f7ff ff21 	bl	80005f0 <DeQ_1>
 80007ae:	4b09      	ldr	r3, [pc, #36]	; (80007d4 <parsing+0x8c>)
 80007b0:	5598      	strb	r0, [r3, r6]
	for(int i=0;i<len_buf; i++)
 80007b2:	3401      	adds	r4, #1
 80007b4:	42a5      	cmp	r5, r4
 80007b6:	dd08      	ble.n	80007ca <parsing+0x82>
		if(overflow_flag==1){
 80007b8:	4b07      	ldr	r3, [pc, #28]	; (80007d8 <parsing+0x90>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	2b01      	cmp	r3, #1
 80007be:	d0f1      	beq.n	80007a4 <parsing+0x5c>
			h2_buffer[i]=DeQ_1();
 80007c0:	f7ff ff16 	bl	80005f0 <DeQ_1>
 80007c4:	4b03      	ldr	r3, [pc, #12]	; (80007d4 <parsing+0x8c>)
 80007c6:	5518      	strb	r0, [r3, r4]
 80007c8:	e7f3      	b.n	80007b2 <parsing+0x6a>
}
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	20000304 	.word	0x20000304
 80007d0:	2000030c 	.word	0x2000030c
 80007d4:	2000009c 	.word	0x2000009c
 80007d8:	2000028c 	.word	0x2000028c
 80007dc:	20000290 	.word	0x20000290

080007e0 <HAL_TIM_PeriodElapsedCallback>:
	 count++;
 80007e0:	4a21      	ldr	r2, [pc, #132]	; (8000868 <HAL_TIM_PeriodElapsedCallback+0x88>)
 80007e2:	6813      	ldr	r3, [r2, #0]
 80007e4:	3301      	adds	r3, #1
 80007e6:	6013      	str	r3, [r2, #0]
     odd ^=1;
 80007e8:	4920      	ldr	r1, [pc, #128]	; (800086c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80007ea:	680a      	ldr	r2, [r1, #0]
 80007ec:	f082 0201 	eor.w	r2, r2, #1
 80007f0:	600a      	str	r2, [r1, #0]
	 if(count > 500 ){
 80007f2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80007f6:	d936      	bls.n	8000866 <HAL_TIM_PeriodElapsedCallback+0x86>
{
 80007f8:	b510      	push	{r4, lr}
		 count=0;
 80007fa:	4b1b      	ldr	r3, [pc, #108]	; (8000868 <HAL_TIM_PeriodElapsedCallback+0x88>)
 80007fc:	2100      	movs	r1, #0
 80007fe:	6019      	str	r1, [r3, #0]
		if(odd){
 8000800:	b31a      	cbz	r2, 800084a <HAL_TIM_PeriodElapsedCallback+0x6a>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000802:	4c1b      	ldr	r4, [pc, #108]	; (8000870 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000804:	460a      	mov	r2, r1
 8000806:	2140      	movs	r1, #64	; 0x40
 8000808:	4620      	mov	r0, r4
 800080a:	f000 fe73 	bl	80014f4 <HAL_GPIO_WritePin>
		  Clean1();
 800080e:	f7ff feb1 	bl	8000574 <Clean1>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 8000812:	2201      	movs	r2, #1
 8000814:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000818:	4620      	mov	r0, r4
 800081a:	f000 fe6b 	bl	80014f4 <HAL_GPIO_WritePin>
 		  HAL_UART_Transmit(&huart1,(uint8_t *)request,8,HAL_MAX_DELAY);
 800081e:	f04f 33ff 	mov.w	r3, #4294967295
 8000822:	2208      	movs	r2, #8
 8000824:	4913      	ldr	r1, [pc, #76]	; (8000874 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8000826:	4814      	ldr	r0, [pc, #80]	; (8000878 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8000828:	f001 fd03 	bl	8002232 <HAL_UART_Transmit>
 		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 800082c:	2200      	movs	r2, #0
 800082e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000832:	4620      	mov	r0, r4
 8000834:	f000 fe5e 	bl	80014f4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000838:	2201      	movs	r2, #1
 800083a:	2180      	movs	r1, #128	; 0x80
 800083c:	4620      	mov	r0, r4
 800083e:	f000 fe59 	bl	80014f4 <HAL_GPIO_WritePin>
 		  count=0;
 8000842:	4b09      	ldr	r3, [pc, #36]	; (8000868 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000844:	2200      	movs	r2, #0
 8000846:	601a      	str	r2, [r3, #0]
}
 8000848:	bd10      	pop	{r4, pc}
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 800084a:	4c09      	ldr	r4, [pc, #36]	; (8000870 <HAL_TIM_PeriodElapsedCallback+0x90>)
 800084c:	2201      	movs	r2, #1
 800084e:	2140      	movs	r1, #64	; 0x40
 8000850:	4620      	mov	r0, r4
 8000852:	f000 fe4f 	bl	80014f4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000856:	2200      	movs	r2, #0
 8000858:	2180      	movs	r1, #128	; 0x80
 800085a:	4620      	mov	r0, r4
 800085c:	f000 fe4a 	bl	80014f4 <HAL_GPIO_WritePin>
			parsing();
 8000860:	f7ff ff72 	bl	8000748 <parsing>
}
 8000864:	e7f0      	b.n	8000848 <HAL_TIM_PeriodElapsedCallback+0x68>
 8000866:	4770      	bx	lr
 8000868:	20000098 	.word	0x20000098
 800086c:	20000288 	.word	0x20000288
 8000870:	40010c00 	.word	0x40010c00
 8000874:	20000000 	.word	0x20000000
 8000878:	200001bc 	.word	0x200001bc

0800087c <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800087c:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800087e:	e7fe      	b.n	800087e <Error_Handler+0x2>

08000880 <MX_TIM2_Init>:
{
 8000880:	b500      	push	{lr}
 8000882:	b087      	sub	sp, #28
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000884:	2300      	movs	r3, #0
 8000886:	9302      	str	r3, [sp, #8]
 8000888:	9303      	str	r3, [sp, #12]
 800088a:	9304      	str	r3, [sp, #16]
 800088c:	9305      	str	r3, [sp, #20]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800088e:	9300      	str	r3, [sp, #0]
 8000890:	9301      	str	r3, [sp, #4]
  htim2.Instance = TIM2;
 8000892:	4814      	ldr	r0, [pc, #80]	; (80008e4 <MX_TIM2_Init+0x64>)
 8000894:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000898:	6002      	str	r2, [r0, #0]
  htim2.Init.Prescaler = 71;
 800089a:	2247      	movs	r2, #71	; 0x47
 800089c:	6042      	str	r2, [r0, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800089e:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 999;
 80008a0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80008a4:	60c2      	str	r2, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008a6:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80008a8:	2380      	movs	r3, #128	; 0x80
 80008aa:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80008ac:	f001 faea 	bl	8001e84 <HAL_TIM_Base_Init>
 80008b0:	b990      	cbnz	r0, 80008d8 <MX_TIM2_Init+0x58>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008b6:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80008b8:	a902      	add	r1, sp, #8
 80008ba:	480a      	ldr	r0, [pc, #40]	; (80008e4 <MX_TIM2_Init+0x64>)
 80008bc:	f001 fb1a 	bl	8001ef4 <HAL_TIM_ConfigClockSource>
 80008c0:	b960      	cbnz	r0, 80008dc <MX_TIM2_Init+0x5c>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008c2:	2300      	movs	r3, #0
 80008c4:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008c6:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80008c8:	4669      	mov	r1, sp
 80008ca:	4806      	ldr	r0, [pc, #24]	; (80008e4 <MX_TIM2_Init+0x64>)
 80008cc:	f001 fb80 	bl	8001fd0 <HAL_TIMEx_MasterConfigSynchronization>
 80008d0:	b930      	cbnz	r0, 80008e0 <MX_TIM2_Init+0x60>
}
 80008d2:	b007      	add	sp, #28
 80008d4:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80008d8:	f7ff ffd0 	bl	800087c <Error_Handler>
    Error_Handler();
 80008dc:	f7ff ffce 	bl	800087c <Error_Handler>
    Error_Handler();
 80008e0:	f7ff ffcc 	bl	800087c <Error_Handler>
 80008e4:	20000174 	.word	0x20000174

080008e8 <MX_USART3_UART_Init>:
{
 80008e8:	b508      	push	{r3, lr}
  huart3.Instance = USART3;
 80008ea:	480a      	ldr	r0, [pc, #40]	; (8000914 <MX_USART3_UART_Init+0x2c>)
 80008ec:	4b0a      	ldr	r3, [pc, #40]	; (8000918 <MX_USART3_UART_Init+0x30>)
 80008ee:	6003      	str	r3, [r0, #0]
  huart3.Init.BaudRate = 115200;
 80008f0:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80008f4:	6043      	str	r3, [r0, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80008f6:	2300      	movs	r3, #0
 80008f8:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80008fa:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80008fc:	6103      	str	r3, [r0, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80008fe:	220c      	movs	r2, #12
 8000900:	6142      	str	r2, [r0, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000902:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000904:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000906:	f001 fc65 	bl	80021d4 <HAL_UART_Init>
 800090a:	b900      	cbnz	r0, 800090e <MX_USART3_UART_Init+0x26>
}
 800090c:	bd08      	pop	{r3, pc}
    Error_Handler();
 800090e:	f7ff ffb5 	bl	800087c <Error_Handler>
 8000912:	bf00      	nop
 8000914:	20000244 	.word	0x20000244
 8000918:	40004800 	.word	0x40004800

0800091c <MX_USART1_UART_Init>:
{
 800091c:	b508      	push	{r3, lr}
  huart1.Instance = USART1;
 800091e:	480a      	ldr	r0, [pc, #40]	; (8000948 <MX_USART1_UART_Init+0x2c>)
 8000920:	4b0a      	ldr	r3, [pc, #40]	; (800094c <MX_USART1_UART_Init+0x30>)
 8000922:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 8000924:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000928:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800092a:	2300      	movs	r3, #0
 800092c:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800092e:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000930:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000932:	220c      	movs	r2, #12
 8000934:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000936:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000938:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800093a:	f001 fc4b 	bl	80021d4 <HAL_UART_Init>
 800093e:	b900      	cbnz	r0, 8000942 <MX_USART1_UART_Init+0x26>
}
 8000940:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000942:	f7ff ff9b 	bl	800087c <Error_Handler>
 8000946:	bf00      	nop
 8000948:	200001bc 	.word	0x200001bc
 800094c:	40013800 	.word	0x40013800

08000950 <MX_USART2_UART_Init>:
{
 8000950:	b508      	push	{r3, lr}
  huart2.Instance = USART2;
 8000952:	480a      	ldr	r0, [pc, #40]	; (800097c <MX_USART2_UART_Init+0x2c>)
 8000954:	4b0a      	ldr	r3, [pc, #40]	; (8000980 <MX_USART2_UART_Init+0x30>)
 8000956:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 8000958:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800095c:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800095e:	2300      	movs	r3, #0
 8000960:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000962:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000964:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000966:	220c      	movs	r2, #12
 8000968:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800096a:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800096c:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800096e:	f001 fc31 	bl	80021d4 <HAL_UART_Init>
 8000972:	b900      	cbnz	r0, 8000976 <MX_USART2_UART_Init+0x26>
}
 8000974:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000976:	f7ff ff81 	bl	800087c <Error_Handler>
 800097a:	bf00      	nop
 800097c:	20000200 	.word	0x20000200
 8000980:	40004400 	.word	0x40004400

08000984 <MX_IWDG_Init>:
{
 8000984:	b508      	push	{r3, lr}
  hiwdg.Instance = IWDG;
 8000986:	4807      	ldr	r0, [pc, #28]	; (80009a4 <MX_IWDG_Init+0x20>)
 8000988:	4b07      	ldr	r3, [pc, #28]	; (80009a8 <MX_IWDG_Init+0x24>)
 800098a:	6003      	str	r3, [r0, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_64;
 800098c:	2304      	movs	r3, #4
 800098e:	6043      	str	r3, [r0, #4]
  hiwdg.Init.Reload = 4095;
 8000990:	f640 73ff 	movw	r3, #4095	; 0xfff
 8000994:	6083      	str	r3, [r0, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8000996:	f000 fdb3 	bl	8001500 <HAL_IWDG_Init>
 800099a:	b900      	cbnz	r0, 800099e <MX_IWDG_Init+0x1a>
}
 800099c:	bd08      	pop	{r3, pc}
    Error_Handler();
 800099e:	f7ff ff6d 	bl	800087c <Error_Handler>
 80009a2:	bf00      	nop
 80009a4:	20000168 	.word	0x20000168
 80009a8:	40003000 	.word	0x40003000

080009ac <SystemClock_Config>:
{
 80009ac:	b500      	push	{lr}
 80009ae:	b091      	sub	sp, #68	; 0x44
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009b0:	2228      	movs	r2, #40	; 0x28
 80009b2:	2100      	movs	r1, #0
 80009b4:	a806      	add	r0, sp, #24
 80009b6:	f001 fe8f 	bl	80026d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009ba:	2300      	movs	r3, #0
 80009bc:	9301      	str	r3, [sp, #4]
 80009be:	9302      	str	r3, [sp, #8]
 80009c0:	9303      	str	r3, [sp, #12]
 80009c2:	9304      	str	r3, [sp, #16]
 80009c4:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80009c6:	2309      	movs	r3, #9
 80009c8:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009ca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009ce:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009d0:	2201      	movs	r2, #1
 80009d2:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80009d4:	920c      	str	r2, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009d6:	2202      	movs	r2, #2
 80009d8:	920d      	str	r2, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009da:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80009dc:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80009e0:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009e2:	a806      	add	r0, sp, #24
 80009e4:	f000 fdd4 	bl	8001590 <HAL_RCC_OscConfig>
 80009e8:	b980      	cbnz	r0, 8000a0c <SystemClock_Config+0x60>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009ea:	230f      	movs	r3, #15
 80009ec:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009ee:	2102      	movs	r1, #2
 80009f0:	9102      	str	r1, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009f2:	2300      	movs	r3, #0
 80009f4:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009f6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80009fa:	9204      	str	r2, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009fc:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80009fe:	a801      	add	r0, sp, #4
 8000a00:	f001 f806 	bl	8001a10 <HAL_RCC_ClockConfig>
 8000a04:	b920      	cbnz	r0, 8000a10 <SystemClock_Config+0x64>
}
 8000a06:	b011      	add	sp, #68	; 0x44
 8000a08:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000a0c:	f7ff ff36 	bl	800087c <Error_Handler>
    Error_Handler();
 8000a10:	f7ff ff34 	bl	800087c <Error_Handler>

08000a14 <main>:
{
 8000a14:	b500      	push	{lr}
 8000a16:	b08f      	sub	sp, #60	; 0x3c
  HAL_Init();
 8000a18:	f000 fb48 	bl	80010ac <HAL_Init>
  SystemClock_Config();
 8000a1c:	f7ff ffc6 	bl	80009ac <SystemClock_Config>
  MX_GPIO_Init();
 8000a20:	f7ff fd50 	bl	80004c4 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000a24:	f7ff ff2c 	bl	8000880 <MX_TIM2_Init>
  MX_USART3_UART_Init();
 8000a28:	f7ff ff5e 	bl	80008e8 <MX_USART3_UART_Init>
  MX_USART1_UART_Init();
 8000a2c:	f7ff ff76 	bl	800091c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000a30:	f7ff ff8e 	bl	8000950 <MX_USART2_UART_Init>
  MX_IWDG_Init();
 8000a34:	f7ff ffa6 	bl	8000984 <MX_IWDG_Init>
  ready_flag=0;
 8000a38:	4bbf      	ldr	r3, [pc, #764]	; (8000d38 <main+0x324>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8000a3e:	4cbf      	ldr	r4, [pc, #764]	; (8000d3c <main+0x328>)
 8000a40:	2201      	movs	r2, #1
 8000a42:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a46:	4620      	mov	r0, r4
 8000a48:	f000 fd54 	bl	80014f4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000a4c:	2201      	movs	r2, #1
 8000a4e:	2140      	movs	r1, #64	; 0x40
 8000a50:	4620      	mov	r0, r4
 8000a52:	f000 fd4f 	bl	80014f4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000a56:	2201      	movs	r2, #1
 8000a58:	2180      	movs	r1, #128	; 0x80
 8000a5a:	4620      	mov	r0, r4
 8000a5c:	f000 fd4a 	bl	80014f4 <HAL_GPIO_WritePin>
  HAL_TIM_Base_Start_IT(&htim2);
 8000a60:	48b7      	ldr	r0, [pc, #732]	; (8000d40 <main+0x32c>)
 8000a62:	f001 f8df 	bl	8001c24 <HAL_TIM_Base_Start_IT>
  Clean();
 8000a66:	f7ff fd71 	bl	800054c <Clean>
  HAL_UART_Receive_IT(&huart3, &rcvDat, 1);
 8000a6a:	4db6      	ldr	r5, [pc, #728]	; (8000d44 <main+0x330>)
 8000a6c:	2201      	movs	r2, #1
 8000a6e:	49b6      	ldr	r1, [pc, #728]	; (8000d48 <main+0x334>)
 8000a70:	4628      	mov	r0, r5
 8000a72:	f001 fdea 	bl	800264a <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart1, &rcvDat1, 1);
 8000a76:	2201      	movs	r2, #1
 8000a78:	49b4      	ldr	r1, [pc, #720]	; (8000d4c <main+0x338>)
 8000a7a:	48b5      	ldr	r0, [pc, #724]	; (8000d50 <main+0x33c>)
 8000a7c:	f001 fde5 	bl	800264a <HAL_UART_Receive_IT>
  Clean();
 8000a80:	f7ff fd64 	bl	800054c <Clean>
  Clean();
 8000a84:	f7ff fd62 	bl	800054c <Clean>
  HAL_IWDG_Refresh(&hiwdg);
 8000a88:	4cb2      	ldr	r4, [pc, #712]	; (8000d54 <main+0x340>)
 8000a8a:	4620      	mov	r0, r4
 8000a8c:	f000 fd64 	bl	8001558 <HAL_IWDG_Refresh>
  HAL_UART_Transmit(&huart3,(uint8_t *)"AT+RST\r\n",8,HAL_MAX_DELAY);
 8000a90:	f04f 33ff 	mov.w	r3, #4294967295
 8000a94:	2208      	movs	r2, #8
 8000a96:	49b0      	ldr	r1, [pc, #704]	; (8000d58 <main+0x344>)
 8000a98:	4628      	mov	r0, r5
 8000a9a:	f001 fbca 	bl	8002232 <HAL_UART_Transmit>
  HAL_Delay(1000);
 8000a9e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000aa2:	f000 fb27 	bl	80010f4 <HAL_Delay>
  HAL_IWDG_Refresh(&hiwdg);
 8000aa6:	4620      	mov	r0, r4
 8000aa8:	f000 fd56 	bl	8001558 <HAL_IWDG_Refresh>
  HAL_Delay(1000);
 8000aac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ab0:	f000 fb20 	bl	80010f4 <HAL_Delay>
  HAL_IWDG_Refresh(&hiwdg);
 8000ab4:	4620      	mov	r0, r4
 8000ab6:	f000 fd4f 	bl	8001558 <HAL_IWDG_Refresh>
  HAL_Delay(1000);
 8000aba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000abe:	f000 fb19 	bl	80010f4 <HAL_Delay>
  HAL_IWDG_Refresh(&hiwdg);
 8000ac2:	4620      	mov	r0, r4
 8000ac4:	f000 fd48 	bl	8001558 <HAL_IWDG_Refresh>
  HAL_Delay(1000);
 8000ac8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000acc:	f000 fb12 	bl	80010f4 <HAL_Delay>
  HAL_IWDG_Refresh(&hiwdg);
 8000ad0:	4620      	mov	r0, r4
 8000ad2:	f000 fd41 	bl	8001558 <HAL_IWDG_Refresh>
  HAL_Delay(1000);
 8000ad6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ada:	f000 fb0b 	bl	80010f4 <HAL_Delay>
  HAL_IWDG_Refresh(&hiwdg);
 8000ade:	4620      	mov	r0, r4
 8000ae0:	f000 fd3a 	bl	8001558 <HAL_IWDG_Refresh>
  HAL_Delay(1000);
 8000ae4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ae8:	f000 fb04 	bl	80010f4 <HAL_Delay>
  HAL_IWDG_Refresh(&hiwdg);
 8000aec:	4620      	mov	r0, r4
 8000aee:	f000 fd33 	bl	8001558 <HAL_IWDG_Refresh>
  Clean();
 8000af2:	f7ff fd2b 	bl	800054c <Clean>
  ret=0;
 8000af6:	4c99      	ldr	r4, [pc, #612]	; (8000d5c <main+0x348>)
 8000af8:	2300      	movs	r3, #0
 8000afa:	7023      	strb	r3, [r4, #0]
  Clean();
 8000afc:	f7ff fd26 	bl	800054c <Clean>
  Clean();
 8000b00:	f7ff fd24 	bl	800054c <Clean>
  HAL_UART_Transmit(&huart3,(uint8_t *)"AT\r\n",4,HAL_MAX_DELAY);
 8000b04:	f04f 33ff 	mov.w	r3, #4294967295
 8000b08:	2204      	movs	r2, #4
 8000b0a:	4995      	ldr	r1, [pc, #596]	; (8000d60 <main+0x34c>)
 8000b0c:	488d      	ldr	r0, [pc, #564]	; (8000d44 <main+0x330>)
 8000b0e:	f001 fb90 	bl	8002232 <HAL_UART_Transmit>
  ret=compare("OK\r\n",4);
 8000b12:	2104      	movs	r1, #4
 8000b14:	4893      	ldr	r0, [pc, #588]	; (8000d64 <main+0x350>)
 8000b16:	f7ff fda3 	bl	8000660 <compare>
 8000b1a:	7020      	strb	r0, [r4, #0]
  if(ret) break;
 8000b1c:	2800      	cmp	r0, #0
 8000b1e:	d0ea      	beq.n	8000af6 <main+0xe2>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 8000b20:	4c86      	ldr	r4, [pc, #536]	; (8000d3c <main+0x328>)
 8000b22:	2201      	movs	r2, #1
 8000b24:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b28:	4620      	mov	r0, r4
 8000b2a:	f000 fce3 	bl	80014f4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 8000b2e:	2200      	movs	r2, #0
 8000b30:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b34:	4620      	mov	r0, r4
 8000b36:	f000 fcdd 	bl	80014f4 <HAL_GPIO_WritePin>
  HAL_IWDG_Refresh(&hiwdg);
 8000b3a:	4c86      	ldr	r4, [pc, #536]	; (8000d54 <main+0x340>)
 8000b3c:	4620      	mov	r0, r4
 8000b3e:	f000 fd0b 	bl	8001558 <HAL_IWDG_Refresh>
  HAL_Delay(200);
 8000b42:	20c8      	movs	r0, #200	; 0xc8
 8000b44:	f000 fad6 	bl	80010f4 <HAL_Delay>
  HAL_IWDG_Refresh(&hiwdg);
 8000b48:	4620      	mov	r0, r4
 8000b4a:	f000 fd05 	bl	8001558 <HAL_IWDG_Refresh>
  Clean();
 8000b4e:	f7ff fcfd 	bl	800054c <Clean>
  ret=0;
 8000b52:	4c82      	ldr	r4, [pc, #520]	; (8000d5c <main+0x348>)
 8000b54:	2300      	movs	r3, #0
 8000b56:	7023      	strb	r3, [r4, #0]
  Clean();
 8000b58:	f7ff fcf8 	bl	800054c <Clean>
  HAL_UART_Transmit(&huart3,(uint8_t *)"AT+CWMODE=1\r\n",13,HAL_MAX_DELAY);
 8000b5c:	f04f 33ff 	mov.w	r3, #4294967295
 8000b60:	220d      	movs	r2, #13
 8000b62:	4981      	ldr	r1, [pc, #516]	; (8000d68 <main+0x354>)
 8000b64:	4877      	ldr	r0, [pc, #476]	; (8000d44 <main+0x330>)
 8000b66:	f001 fb64 	bl	8002232 <HAL_UART_Transmit>
  HAL_IWDG_Refresh(&hiwdg);
 8000b6a:	487a      	ldr	r0, [pc, #488]	; (8000d54 <main+0x340>)
 8000b6c:	f000 fcf4 	bl	8001558 <HAL_IWDG_Refresh>
  ret=compare("OK\r\n",4);
 8000b70:	2104      	movs	r1, #4
 8000b72:	487c      	ldr	r0, [pc, #496]	; (8000d64 <main+0x350>)
 8000b74:	f7ff fd74 	bl	8000660 <compare>
 8000b78:	7020      	strb	r0, [r4, #0]
  if(ret) break;
 8000b7a:	2800      	cmp	r0, #0
 8000b7c:	d0e9      	beq.n	8000b52 <main+0x13e>
  HAL_Delay(200);
 8000b7e:	20c8      	movs	r0, #200	; 0xc8
 8000b80:	f000 fab8 	bl	80010f4 <HAL_Delay>
  HAL_IWDG_Refresh(&hiwdg);
 8000b84:	4873      	ldr	r0, [pc, #460]	; (8000d54 <main+0x340>)
 8000b86:	f000 fce7 	bl	8001558 <HAL_IWDG_Refresh>
  Clean();
 8000b8a:	f7ff fcdf 	bl	800054c <Clean>
  ret=0;
 8000b8e:	4c73      	ldr	r4, [pc, #460]	; (8000d5c <main+0x348>)
 8000b90:	2100      	movs	r1, #0
 8000b92:	7021      	strb	r1, [r4, #0]
  char tmpData[40]={0,};
 8000b94:	9101      	str	r1, [sp, #4]
 8000b96:	2524      	movs	r5, #36	; 0x24
 8000b98:	462a      	mov	r2, r5
 8000b9a:	a802      	add	r0, sp, #8
 8000b9c:	f001 fd9c 	bl	80026d8 <memset>
  sprintf (tmpData, "AT+CWJAP_CUR=\"%s\",\"%s\"\r\n", SSID, PASSWD);    //AT+CWJAP_CUR="H2SENSOR","tsei1234"
 8000ba0:	4b72      	ldr	r3, [pc, #456]	; (8000d6c <main+0x358>)
 8000ba2:	4a73      	ldr	r2, [pc, #460]	; (8000d70 <main+0x35c>)
 8000ba4:	4973      	ldr	r1, [pc, #460]	; (8000d74 <main+0x360>)
 8000ba6:	a801      	add	r0, sp, #4
 8000ba8:	f001 fd9e 	bl	80026e8 <siprintf>
  Clean();
 8000bac:	f7ff fcce 	bl	800054c <Clean>
  HAL_UART_Transmit(&huart3,(uint8_t *)tmpData,36,HAL_MAX_DELAY);
 8000bb0:	f04f 33ff 	mov.w	r3, #4294967295
 8000bb4:	462a      	mov	r2, r5
 8000bb6:	a901      	add	r1, sp, #4
 8000bb8:	4862      	ldr	r0, [pc, #392]	; (8000d44 <main+0x330>)
 8000bba:	f001 fb3a 	bl	8002232 <HAL_UART_Transmit>
  ret=compare("OK\r\n",4);
 8000bbe:	2104      	movs	r1, #4
 8000bc0:	4868      	ldr	r0, [pc, #416]	; (8000d64 <main+0x350>)
 8000bc2:	f7ff fd4d 	bl	8000660 <compare>
 8000bc6:	7020      	strb	r0, [r4, #0]
  if(ret) break;
 8000bc8:	2800      	cmp	r0, #0
 8000bca:	d0e0      	beq.n	8000b8e <main+0x17a>
  HAL_Delay(200);
 8000bcc:	20c8      	movs	r0, #200	; 0xc8
 8000bce:	f000 fa91 	bl	80010f4 <HAL_Delay>
  HAL_IWDG_Refresh(&hiwdg);
 8000bd2:	4860      	ldr	r0, [pc, #384]	; (8000d54 <main+0x340>)
 8000bd4:	f000 fcc0 	bl	8001558 <HAL_IWDG_Refresh>
  Clean();
 8000bd8:	f7ff fcb8 	bl	800054c <Clean>
  ret=0;
 8000bdc:	4c5f      	ldr	r4, [pc, #380]	; (8000d5c <main+0x348>)
 8000bde:	2300      	movs	r3, #0
 8000be0:	7023      	strb	r3, [r4, #0]
  Clean();
 8000be2:	f7ff fcb3 	bl	800054c <Clean>
  HAL_IWDG_Refresh(&hiwdg);
 8000be6:	485b      	ldr	r0, [pc, #364]	; (8000d54 <main+0x340>)
 8000be8:	f000 fcb6 	bl	8001558 <HAL_IWDG_Refresh>
  HAL_UART_Transmit(&huart3,(uint8_t *)"AT+CIPMUX=0\r\n",13,HAL_MAX_DELAY);   // if multimode, link id is need when using sending commands
 8000bec:	f04f 33ff 	mov.w	r3, #4294967295
 8000bf0:	220d      	movs	r2, #13
 8000bf2:	4961      	ldr	r1, [pc, #388]	; (8000d78 <main+0x364>)
 8000bf4:	4853      	ldr	r0, [pc, #332]	; (8000d44 <main+0x330>)
 8000bf6:	f001 fb1c 	bl	8002232 <HAL_UART_Transmit>
  ret=compare("OK\r\n",4);
 8000bfa:	2104      	movs	r1, #4
 8000bfc:	4859      	ldr	r0, [pc, #356]	; (8000d64 <main+0x350>)
 8000bfe:	f7ff fd2f 	bl	8000660 <compare>
 8000c02:	7020      	strb	r0, [r4, #0]
  if(ret) break;
 8000c04:	2800      	cmp	r0, #0
 8000c06:	d0e9      	beq.n	8000bdc <main+0x1c8>
  HAL_Delay(100);
 8000c08:	2064      	movs	r0, #100	; 0x64
 8000c0a:	f000 fa73 	bl	80010f4 <HAL_Delay>
  HAL_IWDG_Refresh(&hiwdg);
 8000c0e:	4851      	ldr	r0, [pc, #324]	; (8000d54 <main+0x340>)
 8000c10:	f000 fca2 	bl	8001558 <HAL_IWDG_Refresh>
  Clean();
 8000c14:	f7ff fc9a 	bl	800054c <Clean>
  ret=0;
 8000c18:	4c50      	ldr	r4, [pc, #320]	; (8000d5c <main+0x348>)
 8000c1a:	2100      	movs	r1, #0
 8000c1c:	7021      	strb	r1, [r4, #0]
  char tmpStr[50]={0,};
 8000c1e:	9101      	str	r1, [sp, #4]
 8000c20:	222e      	movs	r2, #46	; 0x2e
 8000c22:	a802      	add	r0, sp, #8
 8000c24:	f001 fd58 	bl	80026d8 <memset>
  Clean();
 8000c28:	f7ff fc90 	bl	800054c <Clean>
  sprintf (tmpStr, "AT+CIPSTART=\"%s\",\"%s\",5000\r\n", PROTOCOL, SEV_IP);  //AT+CIPSTART=0,"TCP","192.168.0.5",3306\r\n
 8000c2c:	4b53      	ldr	r3, [pc, #332]	; (8000d7c <main+0x368>)
 8000c2e:	4a54      	ldr	r2, [pc, #336]	; (8000d80 <main+0x36c>)
 8000c30:	4954      	ldr	r1, [pc, #336]	; (8000d84 <main+0x370>)
 8000c32:	a801      	add	r0, sp, #4
 8000c34:	f001 fd58 	bl	80026e8 <siprintf>
  Clean();
 8000c38:	f7ff fc88 	bl	800054c <Clean>
  HAL_IWDG_Refresh(&hiwdg);
 8000c3c:	4845      	ldr	r0, [pc, #276]	; (8000d54 <main+0x340>)
 8000c3e:	f000 fc8b 	bl	8001558 <HAL_IWDG_Refresh>
  HAL_UART_Transmit(&huart3,(uint8_t *)tmpStr,38,HAL_MAX_DELAY);
 8000c42:	f04f 33ff 	mov.w	r3, #4294967295
 8000c46:	2226      	movs	r2, #38	; 0x26
 8000c48:	a901      	add	r1, sp, #4
 8000c4a:	483e      	ldr	r0, [pc, #248]	; (8000d44 <main+0x330>)
 8000c4c:	f001 faf1 	bl	8002232 <HAL_UART_Transmit>
  ret=compare("OK\r\n",4);
 8000c50:	2104      	movs	r1, #4
 8000c52:	4844      	ldr	r0, [pc, #272]	; (8000d64 <main+0x350>)
 8000c54:	f7ff fd04 	bl	8000660 <compare>
 8000c58:	7020      	strb	r0, [r4, #0]
  if(ret) break;
 8000c5a:	2800      	cmp	r0, #0
 8000c5c:	d0dc      	beq.n	8000c18 <main+0x204>
  HAL_IWDG_Refresh(&hiwdg);
 8000c5e:	483d      	ldr	r0, [pc, #244]	; (8000d54 <main+0x340>)
 8000c60:	f000 fc7a 	bl	8001558 <HAL_IWDG_Refresh>
  HAL_Delay(200);
 8000c64:	20c8      	movs	r0, #200	; 0xc8
 8000c66:	f000 fa45 	bl	80010f4 <HAL_Delay>
 8000c6a:	e04a      	b.n	8000d02 <main+0x2ee>
		  HAL_Delay(200);
 8000c6c:	20c8      	movs	r0, #200	; 0xc8
 8000c6e:	f000 fa41 	bl	80010f4 <HAL_Delay>
		  HAL_IWDG_Refresh(&hiwdg);
 8000c72:	4838      	ldr	r0, [pc, #224]	; (8000d54 <main+0x340>)
 8000c74:	f000 fc70 	bl	8001558 <HAL_IWDG_Refresh>
		  Clean();
 8000c78:	f7ff fc68 	bl	800054c <Clean>
		  HAL_UART_Transmit(&huart3,(uint8_t *)x_value,8,HAL_MAX_DELAY);
 8000c7c:	4c42      	ldr	r4, [pc, #264]	; (8000d88 <main+0x374>)
 8000c7e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c82:	2208      	movs	r2, #8
 8000c84:	4621      	mov	r1, r4
 8000c86:	482f      	ldr	r0, [pc, #188]	; (8000d44 <main+0x330>)
 8000c88:	f001 fad3 	bl	8002232 <HAL_UART_Transmit>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8000c8c:	4d2b      	ldr	r5, [pc, #172]	; (8000d3c <main+0x328>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c94:	4628      	mov	r0, r5
 8000c96:	f000 fc2d 	bl	80014f4 <HAL_GPIO_WritePin>
		  HAL_UART_Transmit(&huart2,(uint8_t *)x_value,8,HAL_MAX_DELAY);
 8000c9a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c9e:	2208      	movs	r2, #8
 8000ca0:	4621      	mov	r1, r4
 8000ca2:	483a      	ldr	r0, [pc, #232]	; (8000d8c <main+0x378>)
 8000ca4:	f001 fac5 	bl	8002232 <HAL_UART_Transmit>
		  HAL_Delay(300);
 8000ca8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000cac:	f000 fa22 	bl	80010f4 <HAL_Delay>
		  ret=compare_OK("OK\r\n",4);
 8000cb0:	2104      	movs	r1, #4
 8000cb2:	482c      	ldr	r0, [pc, #176]	; (8000d64 <main+0x350>)
 8000cb4:	f7ff fd06 	bl	80006c4 <compare_OK>
 8000cb8:	4c28      	ldr	r4, [pc, #160]	; (8000d5c <main+0x348>)
 8000cba:	7020      	strb	r0, [r4, #0]
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000cc2:	4628      	mov	r0, r5
 8000cc4:	f000 fc16 	bl	80014f4 <HAL_GPIO_WritePin>
		  if(ret) break;
 8000cc8:	7823      	ldrb	r3, [r4, #0]
 8000cca:	b9b3      	cbnz	r3, 8000cfa <main+0x2e6>
		  ret=0;
 8000ccc:	4b23      	ldr	r3, [pc, #140]	; (8000d5c <main+0x348>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	701a      	strb	r2, [r3, #0]
		  Clean();
 8000cd2:	f7ff fc3b 	bl	800054c <Clean>
		  HAL_UART_Transmit(&huart3,(uint8_t *)"AT+CIPSEND=6\r\n",14,HAL_MAX_DELAY);
 8000cd6:	f04f 33ff 	mov.w	r3, #4294967295
 8000cda:	220e      	movs	r2, #14
 8000cdc:	492c      	ldr	r1, [pc, #176]	; (8000d90 <main+0x37c>)
 8000cde:	4819      	ldr	r0, [pc, #100]	; (8000d44 <main+0x330>)
 8000ce0:	f001 faa7 	bl	8002232 <HAL_UART_Transmit>
		  while(DeQ()!='>'){
 8000ce4:	f7ff fc76 	bl	80005d4 <DeQ>
 8000ce8:	283e      	cmp	r0, #62	; 0x3e
 8000cea:	d0bf      	beq.n	8000c6c <main+0x258>
			if (ring_ptr_tail >= ring_ptr_head) break;
 8000cec:	4b29      	ldr	r3, [pc, #164]	; (8000d94 <main+0x380>)
 8000cee:	681a      	ldr	r2, [r3, #0]
 8000cf0:	4b29      	ldr	r3, [pc, #164]	; (8000d98 <main+0x384>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	429a      	cmp	r2, r3
 8000cf6:	d3f5      	bcc.n	8000ce4 <main+0x2d0>
 8000cf8:	e7b8      	b.n	8000c6c <main+0x258>
	  HAL_Delay(490);
 8000cfa:	f44f 70f5 	mov.w	r0, #490	; 0x1ea
 8000cfe:	f000 f9f9 	bl	80010f4 <HAL_Delay>
      HAL_IWDG_Refresh(&hiwdg);
 8000d02:	4814      	ldr	r0, [pc, #80]	; (8000d54 <main+0x340>)
 8000d04:	f000 fc28 	bl	8001558 <HAL_IWDG_Refresh>
	  Clean();
 8000d08:	f7ff fc20 	bl	800054c <Clean>
	  h2_val.hex = (h2_buffer[5] <<24) | (h2_buffer[6] << 16) | (h2_buffer[3] << 8) | (h2_buffer[4]) ;
 8000d0c:	4b23      	ldr	r3, [pc, #140]	; (8000d9c <main+0x388>)
 8000d0e:	795a      	ldrb	r2, [r3, #5]
 8000d10:	7998      	ldrb	r0, [r3, #6]
 8000d12:	0400      	lsls	r0, r0, #16
 8000d14:	ea40 6002 	orr.w	r0, r0, r2, lsl #24
 8000d18:	78da      	ldrb	r2, [r3, #3]
 8000d1a:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 8000d1e:	791b      	ldrb	r3, [r3, #4]
 8000d20:	4318      	orrs	r0, r3
 8000d22:	4b1f      	ldr	r3, [pc, #124]	; (8000da0 <main+0x38c>)
 8000d24:	6018      	str	r0, [r3, #0]
	  sprintf(x_value,"%6.4f\r\n",(h2_val.fVal));  //3.2345   in terms of voltage value
 8000d26:	f7ff fb75 	bl	8000414 <__aeabi_f2d>
 8000d2a:	4602      	mov	r2, r0
 8000d2c:	460b      	mov	r3, r1
 8000d2e:	491d      	ldr	r1, [pc, #116]	; (8000da4 <main+0x390>)
 8000d30:	4815      	ldr	r0, [pc, #84]	; (8000d88 <main+0x374>)
 8000d32:	f001 fcd9 	bl	80026e8 <siprintf>
 8000d36:	e7c9      	b.n	8000ccc <main+0x2b8>
 8000d38:	20000296 	.word	0x20000296
 8000d3c:	40010c00 	.word	0x40010c00
 8000d40:	20000174 	.word	0x20000174
 8000d44:	20000244 	.word	0x20000244
 8000d48:	20000294 	.word	0x20000294
 8000d4c:	20000295 	.word	0x20000295
 8000d50:	200001bc 	.word	0x200001bc
 8000d54:	20000168 	.word	0x20000168
 8000d58:	0800301c 	.word	0x0800301c
 8000d5c:	20000297 	.word	0x20000297
 8000d60:	08003028 	.word	0x08003028
 8000d64:	08003030 	.word	0x08003030
 8000d68:	08003038 	.word	0x08003038
 8000d6c:	08003048 	.word	0x08003048
 8000d70:	08003054 	.word	0x08003054
 8000d74:	08003060 	.word	0x08003060
 8000d78:	0800307c 	.word	0x0800307c
 8000d7c:	0800308c 	.word	0x0800308c
 8000d80:	08003098 	.word	0x08003098
 8000d84:	0800309c 	.word	0x0800309c
 8000d88:	20000310 	.word	0x20000310
 8000d8c:	20000200 	.word	0x20000200
 8000d90:	080030c4 	.word	0x080030c4
 8000d94:	20000308 	.word	0x20000308
 8000d98:	20000300 	.word	0x20000300
 8000d9c:	2000009c 	.word	0x2000009c
 8000da0:	20000164 	.word	0x20000164
 8000da4:	080030bc 	.word	0x080030bc

08000da8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000da8:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000daa:	4b0e      	ldr	r3, [pc, #56]	; (8000de4 <HAL_MspInit+0x3c>)
 8000dac:	699a      	ldr	r2, [r3, #24]
 8000dae:	f042 0201 	orr.w	r2, r2, #1
 8000db2:	619a      	str	r2, [r3, #24]
 8000db4:	699a      	ldr	r2, [r3, #24]
 8000db6:	f002 0201 	and.w	r2, r2, #1
 8000dba:	9200      	str	r2, [sp, #0]
 8000dbc:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dbe:	69da      	ldr	r2, [r3, #28]
 8000dc0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000dc4:	61da      	str	r2, [r3, #28]
 8000dc6:	69db      	ldr	r3, [r3, #28]
 8000dc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dcc:	9301      	str	r3, [sp, #4]
 8000dce:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000dd0:	4a05      	ldr	r2, [pc, #20]	; (8000de8 <HAL_MspInit+0x40>)
 8000dd2:	6853      	ldr	r3, [r2, #4]
 8000dd4:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000dd8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000ddc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dde:	b002      	add	sp, #8
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop
 8000de4:	40021000 	.word	0x40021000
 8000de8:	40010000 	.word	0x40010000

08000dec <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM2)
 8000dec:	6803      	ldr	r3, [r0, #0]
 8000dee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000df2:	d000      	beq.n	8000df6 <HAL_TIM_Base_MspInit+0xa>
 8000df4:	4770      	bx	lr
{
 8000df6:	b500      	push	{lr}
 8000df8:	b083      	sub	sp, #12
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000dfa:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8000dfe:	69da      	ldr	r2, [r3, #28]
 8000e00:	f042 0201 	orr.w	r2, r2, #1
 8000e04:	61da      	str	r2, [r3, #28]
 8000e06:	69db      	ldr	r3, [r3, #28]
 8000e08:	f003 0301 	and.w	r3, r3, #1
 8000e0c:	9301      	str	r3, [sp, #4]
 8000e0e:	9b01      	ldr	r3, [sp, #4]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000e10:	2200      	movs	r2, #0
 8000e12:	4611      	mov	r1, r2
 8000e14:	201c      	movs	r0, #28
 8000e16:	f000 f993 	bl	8001140 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000e1a:	201c      	movs	r0, #28
 8000e1c:	f000 f9c8 	bl	80011b0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000e20:	b003      	add	sp, #12
 8000e22:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08000e28 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e28:	b530      	push	{r4, r5, lr}
 8000e2a:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	9306      	str	r3, [sp, #24]
 8000e30:	9307      	str	r3, [sp, #28]
 8000e32:	9308      	str	r3, [sp, #32]
 8000e34:	9309      	str	r3, [sp, #36]	; 0x24
  if(huart->Instance==USART1)
 8000e36:	6803      	ldr	r3, [r0, #0]
 8000e38:	4a4b      	ldr	r2, [pc, #300]	; (8000f68 <HAL_UART_MspInit+0x140>)
 8000e3a:	4293      	cmp	r3, r2
 8000e3c:	d007      	beq.n	8000e4e <HAL_UART_MspInit+0x26>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
  else if(huart->Instance==USART2)
 8000e3e:	4a4b      	ldr	r2, [pc, #300]	; (8000f6c <HAL_UART_MspInit+0x144>)
 8000e40:	4293      	cmp	r3, r2
 8000e42:	d036      	beq.n	8000eb2 <HAL_UART_MspInit+0x8a>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
  else if(huart->Instance==USART3)
 8000e44:	4a4a      	ldr	r2, [pc, #296]	; (8000f70 <HAL_UART_MspInit+0x148>)
 8000e46:	4293      	cmp	r3, r2
 8000e48:	d05b      	beq.n	8000f02 <HAL_UART_MspInit+0xda>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000e4a:	b00b      	add	sp, #44	; 0x2c
 8000e4c:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e4e:	4b49      	ldr	r3, [pc, #292]	; (8000f74 <HAL_UART_MspInit+0x14c>)
 8000e50:	699a      	ldr	r2, [r3, #24]
 8000e52:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000e56:	619a      	str	r2, [r3, #24]
 8000e58:	699a      	ldr	r2, [r3, #24]
 8000e5a:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8000e5e:	9200      	str	r2, [sp, #0]
 8000e60:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e62:	699a      	ldr	r2, [r3, #24]
 8000e64:	f042 0204 	orr.w	r2, r2, #4
 8000e68:	619a      	str	r2, [r3, #24]
 8000e6a:	699b      	ldr	r3, [r3, #24]
 8000e6c:	f003 0304 	and.w	r3, r3, #4
 8000e70:	9301      	str	r3, [sp, #4]
 8000e72:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000e74:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e78:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e7a:	2302      	movs	r3, #2
 8000e7c:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e7e:	2303      	movs	r3, #3
 8000e80:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e82:	4d3d      	ldr	r5, [pc, #244]	; (8000f78 <HAL_UART_MspInit+0x150>)
 8000e84:	a906      	add	r1, sp, #24
 8000e86:	4628      	mov	r0, r5
 8000e88:	f000 fa22 	bl	80012d0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000e8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e90:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e92:	2400      	movs	r4, #0
 8000e94:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e96:	9408      	str	r4, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e98:	a906      	add	r1, sp, #24
 8000e9a:	4628      	mov	r0, r5
 8000e9c:	f000 fa18 	bl	80012d0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000ea0:	4622      	mov	r2, r4
 8000ea2:	4621      	mov	r1, r4
 8000ea4:	2025      	movs	r0, #37	; 0x25
 8000ea6:	f000 f94b 	bl	8001140 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000eaa:	2025      	movs	r0, #37	; 0x25
 8000eac:	f000 f980 	bl	80011b0 <HAL_NVIC_EnableIRQ>
 8000eb0:	e7cb      	b.n	8000e4a <HAL_UART_MspInit+0x22>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000eb2:	4b30      	ldr	r3, [pc, #192]	; (8000f74 <HAL_UART_MspInit+0x14c>)
 8000eb4:	69da      	ldr	r2, [r3, #28]
 8000eb6:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000eba:	61da      	str	r2, [r3, #28]
 8000ebc:	69da      	ldr	r2, [r3, #28]
 8000ebe:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8000ec2:	9202      	str	r2, [sp, #8]
 8000ec4:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ec6:	699a      	ldr	r2, [r3, #24]
 8000ec8:	f042 0204 	orr.w	r2, r2, #4
 8000ecc:	619a      	str	r2, [r3, #24]
 8000ece:	699b      	ldr	r3, [r3, #24]
 8000ed0:	f003 0304 	and.w	r3, r3, #4
 8000ed4:	9303      	str	r3, [sp, #12]
 8000ed6:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000ed8:	2304      	movs	r3, #4
 8000eda:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000edc:	2302      	movs	r3, #2
 8000ede:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ee0:	2303      	movs	r3, #3
 8000ee2:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ee4:	4c24      	ldr	r4, [pc, #144]	; (8000f78 <HAL_UART_MspInit+0x150>)
 8000ee6:	a906      	add	r1, sp, #24
 8000ee8:	4620      	mov	r0, r4
 8000eea:	f000 f9f1 	bl	80012d0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000eee:	2308      	movs	r3, #8
 8000ef0:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef6:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ef8:	a906      	add	r1, sp, #24
 8000efa:	4620      	mov	r0, r4
 8000efc:	f000 f9e8 	bl	80012d0 <HAL_GPIO_Init>
 8000f00:	e7a3      	b.n	8000e4a <HAL_UART_MspInit+0x22>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000f02:	4b1c      	ldr	r3, [pc, #112]	; (8000f74 <HAL_UART_MspInit+0x14c>)
 8000f04:	69da      	ldr	r2, [r3, #28]
 8000f06:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000f0a:	61da      	str	r2, [r3, #28]
 8000f0c:	69da      	ldr	r2, [r3, #28]
 8000f0e:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8000f12:	9204      	str	r2, [sp, #16]
 8000f14:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f16:	699a      	ldr	r2, [r3, #24]
 8000f18:	f042 0208 	orr.w	r2, r2, #8
 8000f1c:	619a      	str	r2, [r3, #24]
 8000f1e:	699b      	ldr	r3, [r3, #24]
 8000f20:	f003 0308 	and.w	r3, r3, #8
 8000f24:	9305      	str	r3, [sp, #20]
 8000f26:	9b05      	ldr	r3, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000f28:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f2c:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f2e:	2302      	movs	r3, #2
 8000f30:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f32:	2303      	movs	r3, #3
 8000f34:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f36:	4d11      	ldr	r5, [pc, #68]	; (8000f7c <HAL_UART_MspInit+0x154>)
 8000f38:	a906      	add	r1, sp, #24
 8000f3a:	4628      	mov	r0, r5
 8000f3c:	f000 f9c8 	bl	80012d0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000f40:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000f44:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f46:	2400      	movs	r4, #0
 8000f48:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4a:	9408      	str	r4, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f4c:	a906      	add	r1, sp, #24
 8000f4e:	4628      	mov	r0, r5
 8000f50:	f000 f9be 	bl	80012d0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000f54:	4622      	mov	r2, r4
 8000f56:	4621      	mov	r1, r4
 8000f58:	2027      	movs	r0, #39	; 0x27
 8000f5a:	f000 f8f1 	bl	8001140 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000f5e:	2027      	movs	r0, #39	; 0x27
 8000f60:	f000 f926 	bl	80011b0 <HAL_NVIC_EnableIRQ>
}
 8000f64:	e771      	b.n	8000e4a <HAL_UART_MspInit+0x22>
 8000f66:	bf00      	nop
 8000f68:	40013800 	.word	0x40013800
 8000f6c:	40004400 	.word	0x40004400
 8000f70:	40004800 	.word	0x40004800
 8000f74:	40021000 	.word	0x40021000
 8000f78:	40010800 	.word	0x40010800
 8000f7c:	40010c00 	.word	0x40010c00

08000f80 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f80:	e7fe      	b.n	8000f80 <NMI_Handler>

08000f82 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f82:	e7fe      	b.n	8000f82 <HardFault_Handler>

08000f84 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f84:	e7fe      	b.n	8000f84 <MemManage_Handler>

08000f86 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f86:	e7fe      	b.n	8000f86 <BusFault_Handler>

08000f88 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f88:	e7fe      	b.n	8000f88 <UsageFault_Handler>

08000f8a <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f8a:	4770      	bx	lr

08000f8c <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f8c:	4770      	bx	lr

08000f8e <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f8e:	4770      	bx	lr

08000f90 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f90:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f92:	f000 f89d 	bl	80010d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f96:	bd08      	pop	{r3, pc}

08000f98 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000f98:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000f9a:	4802      	ldr	r0, [pc, #8]	; (8000fa4 <TIM2_IRQHandler+0xc>)
 8000f9c:	f000 fe7a 	bl	8001c94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000fa0:	bd08      	pop	{r3, pc}
 8000fa2:	bf00      	nop
 8000fa4:	20000174 	.word	0x20000174

08000fa8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000fa8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000faa:	4802      	ldr	r0, [pc, #8]	; (8000fb4 <USART1_IRQHandler+0xc>)
 8000fac:	f001 fa30 	bl	8002410 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000fb0:	bd08      	pop	{r3, pc}
 8000fb2:	bf00      	nop
 8000fb4:	200001bc 	.word	0x200001bc

08000fb8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000fb8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000fba:	4802      	ldr	r0, [pc, #8]	; (8000fc4 <USART3_IRQHandler+0xc>)
 8000fbc:	f001 fa28 	bl	8002410 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000fc0:	bd08      	pop	{r3, pc}
 8000fc2:	bf00      	nop
 8000fc4:	20000244 	.word	0x20000244

08000fc8 <_sbrk>:
 8000fc8:	b510      	push	{r4, lr}
 8000fca:	4603      	mov	r3, r0
 8000fcc:	4a0c      	ldr	r2, [pc, #48]	; (8001000 <_sbrk+0x38>)
 8000fce:	490d      	ldr	r1, [pc, #52]	; (8001004 <_sbrk+0x3c>)
 8000fd0:	480d      	ldr	r0, [pc, #52]	; (8001008 <_sbrk+0x40>)
 8000fd2:	6800      	ldr	r0, [r0, #0]
 8000fd4:	b140      	cbz	r0, 8000fe8 <_sbrk+0x20>
 8000fd6:	480c      	ldr	r0, [pc, #48]	; (8001008 <_sbrk+0x40>)
 8000fd8:	6800      	ldr	r0, [r0, #0]
 8000fda:	4403      	add	r3, r0
 8000fdc:	1a52      	subs	r2, r2, r1
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	d806      	bhi.n	8000ff0 <_sbrk+0x28>
 8000fe2:	4a09      	ldr	r2, [pc, #36]	; (8001008 <_sbrk+0x40>)
 8000fe4:	6013      	str	r3, [r2, #0]
 8000fe6:	bd10      	pop	{r4, pc}
 8000fe8:	4807      	ldr	r0, [pc, #28]	; (8001008 <_sbrk+0x40>)
 8000fea:	4c08      	ldr	r4, [pc, #32]	; (800100c <_sbrk+0x44>)
 8000fec:	6004      	str	r4, [r0, #0]
 8000fee:	e7f2      	b.n	8000fd6 <_sbrk+0xe>
 8000ff0:	f001 fb48 	bl	8002684 <__errno>
 8000ff4:	230c      	movs	r3, #12
 8000ff6:	6003      	str	r3, [r0, #0]
 8000ff8:	f04f 30ff 	mov.w	r0, #4294967295
 8000ffc:	e7f3      	b.n	8000fe6 <_sbrk+0x1e>
 8000ffe:	bf00      	nop
 8001000:	20005000 	.word	0x20005000
 8001004:	00000400 	.word	0x00000400
 8001008:	20000318 	.word	0x20000318
 800100c:	20000330 	.word	0x20000330

08001010 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001010:	4770      	bx	lr
	...

08001014 <Reset_Handler>:
 8001014:	480c      	ldr	r0, [pc, #48]	; (8001048 <LoopFillZerobss+0x12>)
 8001016:	490d      	ldr	r1, [pc, #52]	; (800104c <LoopFillZerobss+0x16>)
 8001018:	4a0d      	ldr	r2, [pc, #52]	; (8001050 <LoopFillZerobss+0x1a>)
 800101a:	2300      	movs	r3, #0
 800101c:	e002      	b.n	8001024 <LoopCopyDataInit>

0800101e <CopyDataInit>:
 800101e:	58d4      	ldr	r4, [r2, r3]
 8001020:	50c4      	str	r4, [r0, r3]
 8001022:	3304      	adds	r3, #4

08001024 <LoopCopyDataInit>:
 8001024:	18c4      	adds	r4, r0, r3
 8001026:	428c      	cmp	r4, r1
 8001028:	d3f9      	bcc.n	800101e <CopyDataInit>
 800102a:	4a0a      	ldr	r2, [pc, #40]	; (8001054 <LoopFillZerobss+0x1e>)
 800102c:	4c0a      	ldr	r4, [pc, #40]	; (8001058 <LoopFillZerobss+0x22>)
 800102e:	2300      	movs	r3, #0
 8001030:	e001      	b.n	8001036 <LoopFillZerobss>

08001032 <FillZerobss>:
 8001032:	6013      	str	r3, [r2, #0]
 8001034:	3204      	adds	r2, #4

08001036 <LoopFillZerobss>:
 8001036:	42a2      	cmp	r2, r4
 8001038:	d3fb      	bcc.n	8001032 <FillZerobss>
 800103a:	f7ff ffe9 	bl	8001010 <SystemInit>
 800103e:	f001 fb27 	bl	8002690 <__libc_init_array>
 8001042:	f7ff fce7 	bl	8000a14 <main>
 8001046:	4770      	bx	lr
 8001048:	20000000 	.word	0x20000000
 800104c:	20000078 	.word	0x20000078
 8001050:	08003138 	.word	0x08003138
 8001054:	20000078 	.word	0x20000078
 8001058:	20000330 	.word	0x20000330

0800105c <ADC1_2_IRQHandler>:
 800105c:	e7fe      	b.n	800105c <ADC1_2_IRQHandler>
	...

08001060 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001060:	b510      	push	{r4, lr}
 8001062:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001064:	4b0e      	ldr	r3, [pc, #56]	; (80010a0 <HAL_InitTick+0x40>)
 8001066:	7818      	ldrb	r0, [r3, #0]
 8001068:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800106c:	fbb3 f3f0 	udiv	r3, r3, r0
 8001070:	4a0c      	ldr	r2, [pc, #48]	; (80010a4 <HAL_InitTick+0x44>)
 8001072:	6810      	ldr	r0, [r2, #0]
 8001074:	fbb0 f0f3 	udiv	r0, r0, r3
 8001078:	f000 f8a8 	bl	80011cc <HAL_SYSTICK_Config>
 800107c:	b968      	cbnz	r0, 800109a <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800107e:	2c0f      	cmp	r4, #15
 8001080:	d901      	bls.n	8001086 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8001082:	2001      	movs	r0, #1
 8001084:	e00a      	b.n	800109c <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001086:	2200      	movs	r2, #0
 8001088:	4621      	mov	r1, r4
 800108a:	f04f 30ff 	mov.w	r0, #4294967295
 800108e:	f000 f857 	bl	8001140 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001092:	4b05      	ldr	r3, [pc, #20]	; (80010a8 <HAL_InitTick+0x48>)
 8001094:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001096:	2000      	movs	r0, #0
 8001098:	e000      	b.n	800109c <HAL_InitTick+0x3c>
    return HAL_ERROR;
 800109a:	2001      	movs	r0, #1
}
 800109c:	bd10      	pop	{r4, pc}
 800109e:	bf00      	nop
 80010a0:	2000000c 	.word	0x2000000c
 80010a4:	20000008 	.word	0x20000008
 80010a8:	20000010 	.word	0x20000010

080010ac <HAL_Init>:
{
 80010ac:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010ae:	4a07      	ldr	r2, [pc, #28]	; (80010cc <HAL_Init+0x20>)
 80010b0:	6813      	ldr	r3, [r2, #0]
 80010b2:	f043 0310 	orr.w	r3, r3, #16
 80010b6:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010b8:	2003      	movs	r0, #3
 80010ba:	f000 f82f 	bl	800111c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80010be:	2000      	movs	r0, #0
 80010c0:	f7ff ffce 	bl	8001060 <HAL_InitTick>
  HAL_MspInit();
 80010c4:	f7ff fe70 	bl	8000da8 <HAL_MspInit>
}
 80010c8:	2000      	movs	r0, #0
 80010ca:	bd08      	pop	{r3, pc}
 80010cc:	40022000 	.word	0x40022000

080010d0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80010d0:	4a03      	ldr	r2, [pc, #12]	; (80010e0 <HAL_IncTick+0x10>)
 80010d2:	6811      	ldr	r1, [r2, #0]
 80010d4:	4b03      	ldr	r3, [pc, #12]	; (80010e4 <HAL_IncTick+0x14>)
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	440b      	add	r3, r1
 80010da:	6013      	str	r3, [r2, #0]
}
 80010dc:	4770      	bx	lr
 80010de:	bf00      	nop
 80010e0:	2000031c 	.word	0x2000031c
 80010e4:	2000000c 	.word	0x2000000c

080010e8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80010e8:	4b01      	ldr	r3, [pc, #4]	; (80010f0 <HAL_GetTick+0x8>)
 80010ea:	6818      	ldr	r0, [r3, #0]
}
 80010ec:	4770      	bx	lr
 80010ee:	bf00      	nop
 80010f0:	2000031c 	.word	0x2000031c

080010f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010f4:	b538      	push	{r3, r4, r5, lr}
 80010f6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80010f8:	f7ff fff6 	bl	80010e8 <HAL_GetTick>
 80010fc:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010fe:	f1b4 3fff 	cmp.w	r4, #4294967295
 8001102:	d002      	beq.n	800110a <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8001104:	4b04      	ldr	r3, [pc, #16]	; (8001118 <HAL_Delay+0x24>)
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800110a:	f7ff ffed 	bl	80010e8 <HAL_GetTick>
 800110e:	1b40      	subs	r0, r0, r5
 8001110:	42a0      	cmp	r0, r4
 8001112:	d3fa      	bcc.n	800110a <HAL_Delay+0x16>
  {
  }
}
 8001114:	bd38      	pop	{r3, r4, r5, pc}
 8001116:	bf00      	nop
 8001118:	2000000c 	.word	0x2000000c

0800111c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800111c:	4a07      	ldr	r2, [pc, #28]	; (800113c <HAL_NVIC_SetPriorityGrouping+0x20>)
 800111e:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001120:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001124:	041b      	lsls	r3, r3, #16
 8001126:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001128:	0200      	lsls	r0, r0, #8
 800112a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800112e:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8001130:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001134:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8001138:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800113a:	4770      	bx	lr
 800113c:	e000ed00 	.word	0xe000ed00

08001140 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001140:	b500      	push	{lr}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001142:	4b19      	ldr	r3, [pc, #100]	; (80011a8 <HAL_NVIC_SetPriority+0x68>)
 8001144:	68db      	ldr	r3, [r3, #12]
 8001146:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800114a:	f1c3 0c07 	rsb	ip, r3, #7
 800114e:	f1bc 0f04 	cmp.w	ip, #4
 8001152:	bf28      	it	cs
 8001154:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001158:	f103 0e04 	add.w	lr, r3, #4
 800115c:	f1be 0f06 	cmp.w	lr, #6
 8001160:	d918      	bls.n	8001194 <HAL_NVIC_SetPriority+0x54>
 8001162:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001164:	f04f 3eff 	mov.w	lr, #4294967295
 8001168:	fa0e fc0c 	lsl.w	ip, lr, ip
 800116c:	ea21 010c 	bic.w	r1, r1, ip
 8001170:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001172:	fa0e f303 	lsl.w	r3, lr, r3
 8001176:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800117a:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 800117c:	2800      	cmp	r0, #0
 800117e:	db0b      	blt.n	8001198 <HAL_NVIC_SetPriority+0x58>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001180:	0109      	lsls	r1, r1, #4
 8001182:	b2c9      	uxtb	r1, r1
 8001184:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8001188:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 800118c:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001190:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001194:	2300      	movs	r3, #0
 8001196:	e7e5      	b.n	8001164 <HAL_NVIC_SetPriority+0x24>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001198:	f000 000f 	and.w	r0, r0, #15
 800119c:	0109      	lsls	r1, r1, #4
 800119e:	b2c9      	uxtb	r1, r1
 80011a0:	4b02      	ldr	r3, [pc, #8]	; (80011ac <HAL_NVIC_SetPriority+0x6c>)
 80011a2:	5419      	strb	r1, [r3, r0]
 80011a4:	e7f4      	b.n	8001190 <HAL_NVIC_SetPriority+0x50>
 80011a6:	bf00      	nop
 80011a8:	e000ed00 	.word	0xe000ed00
 80011ac:	e000ed14 	.word	0xe000ed14

080011b0 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80011b0:	2800      	cmp	r0, #0
 80011b2:	db07      	blt.n	80011c4 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011b4:	f000 021f 	and.w	r2, r0, #31
 80011b8:	0940      	lsrs	r0, r0, #5
 80011ba:	2301      	movs	r3, #1
 80011bc:	4093      	lsls	r3, r2
 80011be:	4a02      	ldr	r2, [pc, #8]	; (80011c8 <HAL_NVIC_EnableIRQ+0x18>)
 80011c0:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80011c4:	4770      	bx	lr
 80011c6:	bf00      	nop
 80011c8:	e000e100 	.word	0xe000e100

080011cc <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011cc:	3801      	subs	r0, #1
 80011ce:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80011d2:	d20b      	bcs.n	80011ec <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011d4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80011d8:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011da:	4a05      	ldr	r2, [pc, #20]	; (80011f0 <HAL_SYSTICK_Config+0x24>)
 80011dc:	21f0      	movs	r1, #240	; 0xf0
 80011de:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011e2:	2000      	movs	r0, #0
 80011e4:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011e6:	2207      	movs	r2, #7
 80011e8:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011ea:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80011ec:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80011ee:	4770      	bx	lr
 80011f0:	e000ed00 	.word	0xe000ed00

080011f4 <HAL_DMA_Abort>:
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80011f4:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 80011f8:	2b02      	cmp	r3, #2
 80011fa:	d006      	beq.n	800120a <HAL_DMA_Abort+0x16>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011fc:	2304      	movs	r3, #4
 80011fe:	6383      	str	r3, [r0, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001200:	2300      	movs	r3, #0
 8001202:	f880 3020 	strb.w	r3, [r0, #32]
    
    return HAL_ERROR;
 8001206:	2001      	movs	r0, #1
 8001208:	4770      	bx	lr
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800120a:	6802      	ldr	r2, [r0, #0]
 800120c:	6813      	ldr	r3, [r2, #0]
 800120e:	f023 030e 	bic.w	r3, r3, #14
 8001212:	6013      	str	r3, [r2, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001214:	6802      	ldr	r2, [r0, #0]
 8001216:	6813      	ldr	r3, [r2, #0]
 8001218:	f023 0301 	bic.w	r3, r3, #1
 800121c:	6013      	str	r3, [r2, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800121e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001220:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8001222:	2201      	movs	r2, #1
 8001224:	fa02 f303 	lsl.w	r3, r2, r3
 8001228:	604b      	str	r3, [r1, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800122a:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800122e:	2300      	movs	r3, #0
 8001230:	f880 3020 	strb.w	r3, [r0, #32]
  
  return status; 
 8001234:	4618      	mov	r0, r3
}
 8001236:	4770      	bx	lr

08001238 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001238:	b508      	push	{r3, lr}
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800123a:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 800123e:	2b02      	cmp	r3, #2
 8001240:	d003      	beq.n	800124a <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001242:	2304      	movs	r3, #4
 8001244:	6383      	str	r3, [r0, #56]	; 0x38
        
    status = HAL_ERROR;
 8001246:	2001      	movs	r0, #1
    {
      hdma->XferAbortCallback(hdma);
    } 
  }
  return status;
}
 8001248:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800124a:	6802      	ldr	r2, [r0, #0]
 800124c:	6813      	ldr	r3, [r2, #0]
 800124e:	f023 030e 	bic.w	r3, r3, #14
 8001252:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8001254:	6802      	ldr	r2, [r0, #0]
 8001256:	6813      	ldr	r3, [r2, #0]
 8001258:	f023 0301 	bic.w	r3, r3, #1
 800125c:	6013      	str	r3, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800125e:	6803      	ldr	r3, [r0, #0]
 8001260:	4a19      	ldr	r2, [pc, #100]	; (80012c8 <HAL_DMA_Abort_IT+0x90>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d014      	beq.n	8001290 <HAL_DMA_Abort_IT+0x58>
 8001266:	3214      	adds	r2, #20
 8001268:	4293      	cmp	r3, r2
 800126a:	d01f      	beq.n	80012ac <HAL_DMA_Abort_IT+0x74>
 800126c:	3214      	adds	r2, #20
 800126e:	4293      	cmp	r3, r2
 8001270:	d01e      	beq.n	80012b0 <HAL_DMA_Abort_IT+0x78>
 8001272:	3214      	adds	r2, #20
 8001274:	4293      	cmp	r3, r2
 8001276:	d01e      	beq.n	80012b6 <HAL_DMA_Abort_IT+0x7e>
 8001278:	3214      	adds	r2, #20
 800127a:	4293      	cmp	r3, r2
 800127c:	d01e      	beq.n	80012bc <HAL_DMA_Abort_IT+0x84>
 800127e:	3214      	adds	r2, #20
 8001280:	4293      	cmp	r3, r2
 8001282:	d002      	beq.n	800128a <HAL_DMA_Abort_IT+0x52>
 8001284:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001288:	e003      	b.n	8001292 <HAL_DMA_Abort_IT+0x5a>
 800128a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800128e:	e000      	b.n	8001292 <HAL_DMA_Abort_IT+0x5a>
 8001290:	2201      	movs	r2, #1
 8001292:	4b0e      	ldr	r3, [pc, #56]	; (80012cc <HAL_DMA_Abort_IT+0x94>)
 8001294:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8001296:	2301      	movs	r3, #1
 8001298:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 800129c:	2300      	movs	r3, #0
 800129e:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 80012a2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80012a4:	b16b      	cbz	r3, 80012c2 <HAL_DMA_Abort_IT+0x8a>
      hdma->XferAbortCallback(hdma);
 80012a6:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 80012a8:	2000      	movs	r0, #0
 80012aa:	e7cd      	b.n	8001248 <HAL_DMA_Abort_IT+0x10>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80012ac:	2210      	movs	r2, #16
 80012ae:	e7f0      	b.n	8001292 <HAL_DMA_Abort_IT+0x5a>
 80012b0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012b4:	e7ed      	b.n	8001292 <HAL_DMA_Abort_IT+0x5a>
 80012b6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80012ba:	e7ea      	b.n	8001292 <HAL_DMA_Abort_IT+0x5a>
 80012bc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80012c0:	e7e7      	b.n	8001292 <HAL_DMA_Abort_IT+0x5a>
  HAL_StatusTypeDef status = HAL_OK;
 80012c2:	2000      	movs	r0, #0
 80012c4:	e7c0      	b.n	8001248 <HAL_DMA_Abort_IT+0x10>
 80012c6:	bf00      	nop
 80012c8:	40020008 	.word	0x40020008
 80012cc:	40020000 	.word	0x40020000

080012d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012d0:	b570      	push	{r4, r5, r6, lr}
 80012d2:	b082      	sub	sp, #8
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80012d4:	2400      	movs	r4, #0
  uint32_t position = 0x00u;
 80012d6:	46a4      	mov	ip, r4
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012d8:	e0a6      	b.n	8001428 <HAL_GPIO_Init+0x158>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80012da:	4d80      	ldr	r5, [pc, #512]	; (80014dc <HAL_GPIO_Init+0x20c>)
 80012dc:	42aa      	cmp	r2, r5
 80012de:	d010      	beq.n	8001302 <HAL_GPIO_Init+0x32>
 80012e0:	d907      	bls.n	80012f2 <HAL_GPIO_Init+0x22>
 80012e2:	4d7f      	ldr	r5, [pc, #508]	; (80014e0 <HAL_GPIO_Init+0x210>)
 80012e4:	42aa      	cmp	r2, r5
 80012e6:	d00c      	beq.n	8001302 <HAL_GPIO_Init+0x32>
 80012e8:	f505 3580 	add.w	r5, r5, #65536	; 0x10000
 80012ec:	42aa      	cmp	r2, r5
 80012ee:	d008      	beq.n	8001302 <HAL_GPIO_Init+0x32>
 80012f0:	e013      	b.n	800131a <HAL_GPIO_Init+0x4a>
 80012f2:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80012f6:	42aa      	cmp	r2, r5
 80012f8:	d003      	beq.n	8001302 <HAL_GPIO_Init+0x32>
 80012fa:	f505 2570 	add.w	r5, r5, #983040	; 0xf0000
 80012fe:	42aa      	cmp	r2, r5
 8001300:	d107      	bne.n	8001312 <HAL_GPIO_Init+0x42>
        case GPIO_MODE_EVT_RISING:
        case GPIO_MODE_EVT_FALLING:
        case GPIO_MODE_EVT_RISING_FALLING:
          /* Check the GPIO pull parameter */
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001302:	688a      	ldr	r2, [r1, #8]
 8001304:	2a00      	cmp	r2, #0
 8001306:	d058      	beq.n	80013ba <HAL_GPIO_Init+0xea>
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
          }
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001308:	2a01      	cmp	r2, #1
 800130a:	d051      	beq.n	80013b0 <HAL_GPIO_Init+0xe0>
          else /* GPIO_PULLDOWN */
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;

            /* Reset the corresponding ODR bit */
            GPIOx->BRR = ioposition;
 800130c:	6143      	str	r3, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800130e:	2408      	movs	r4, #8
 8001310:	e003      	b.n	800131a <HAL_GPIO_Init+0x4a>
      switch (GPIO_Init->Mode)
 8001312:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8001316:	42aa      	cmp	r2, r5
 8001318:	d0f3      	beq.n	8001302 <HAL_GPIO_Init+0x32>
          break;
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800131a:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 800131e:	d84e      	bhi.n	80013be <HAL_GPIO_Init+0xee>
 8001320:	4606      	mov	r6, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001322:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8001326:	d84c      	bhi.n	80013c2 <HAL_GPIO_Init+0xf2>
 8001328:	ea4f 028c 	mov.w	r2, ip, lsl #2

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800132c:	6833      	ldr	r3, [r6, #0]
 800132e:	250f      	movs	r5, #15
 8001330:	4095      	lsls	r5, r2
 8001332:	ea23 0305 	bic.w	r3, r3, r5
 8001336:	fa04 f202 	lsl.w	r2, r4, r2
 800133a:	4313      	orrs	r3, r2
 800133c:	6033      	str	r3, [r6, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800133e:	684b      	ldr	r3, [r1, #4]
 8001340:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8001344:	d06e      	beq.n	8001424 <HAL_GPIO_Init+0x154>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001346:	4b67      	ldr	r3, [pc, #412]	; (80014e4 <HAL_GPIO_Init+0x214>)
 8001348:	699a      	ldr	r2, [r3, #24]
 800134a:	f042 0201 	orr.w	r2, r2, #1
 800134e:	619a      	str	r2, [r3, #24]
 8001350:	699b      	ldr	r3, [r3, #24]
 8001352:	f003 0301 	and.w	r3, r3, #1
 8001356:	9301      	str	r3, [sp, #4]
 8001358:	9b01      	ldr	r3, [sp, #4]
        temp = AFIO->EXTICR[position >> 2u];
 800135a:	ea4f 029c 	mov.w	r2, ip, lsr #2
 800135e:	1c95      	adds	r5, r2, #2
 8001360:	4b61      	ldr	r3, [pc, #388]	; (80014e8 <HAL_GPIO_Init+0x218>)
 8001362:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001366:	f00c 0303 	and.w	r3, ip, #3
 800136a:	009d      	lsls	r5, r3, #2
 800136c:	230f      	movs	r3, #15
 800136e:	40ab      	lsls	r3, r5
 8001370:	ea26 0603 	bic.w	r6, r6, r3
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001374:	4b5d      	ldr	r3, [pc, #372]	; (80014ec <HAL_GPIO_Init+0x21c>)
 8001376:	4298      	cmp	r0, r3
 8001378:	d029      	beq.n	80013ce <HAL_GPIO_Init+0xfe>
 800137a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800137e:	4298      	cmp	r0, r3
 8001380:	f000 808e 	beq.w	80014a0 <HAL_GPIO_Init+0x1d0>
 8001384:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001388:	4298      	cmp	r0, r3
 800138a:	f000 808b 	beq.w	80014a4 <HAL_GPIO_Init+0x1d4>
 800138e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001392:	4298      	cmp	r0, r3
 8001394:	d019      	beq.n	80013ca <HAL_GPIO_Init+0xfa>
 8001396:	2304      	movs	r3, #4
 8001398:	e01a      	b.n	80013d0 <HAL_GPIO_Init+0x100>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800139a:	68cc      	ldr	r4, [r1, #12]
          break;
 800139c:	e7bd      	b.n	800131a <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800139e:	68cc      	ldr	r4, [r1, #12]
 80013a0:	3404      	adds	r4, #4
          break;
 80013a2:	e7ba      	b.n	800131a <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80013a4:	68cc      	ldr	r4, [r1, #12]
 80013a6:	3408      	adds	r4, #8
          break;
 80013a8:	e7b7      	b.n	800131a <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80013aa:	68cc      	ldr	r4, [r1, #12]
 80013ac:	340c      	adds	r4, #12
          break;
 80013ae:	e7b4      	b.n	800131a <HAL_GPIO_Init+0x4a>
            GPIOx->BSRR = ioposition;
 80013b0:	6103      	str	r3, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80013b2:	2408      	movs	r4, #8
 80013b4:	e7b1      	b.n	800131a <HAL_GPIO_Init+0x4a>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80013b6:	2400      	movs	r4, #0
 80013b8:	e7af      	b.n	800131a <HAL_GPIO_Init+0x4a>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80013ba:	2404      	movs	r4, #4
 80013bc:	e7ad      	b.n	800131a <HAL_GPIO_Init+0x4a>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80013be:	1d06      	adds	r6, r0, #4
 80013c0:	e7af      	b.n	8001322 <HAL_GPIO_Init+0x52>
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80013c2:	f1ac 0208 	sub.w	r2, ip, #8
 80013c6:	0092      	lsls	r2, r2, #2
 80013c8:	e7b0      	b.n	800132c <HAL_GPIO_Init+0x5c>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80013ca:	2303      	movs	r3, #3
 80013cc:	e000      	b.n	80013d0 <HAL_GPIO_Init+0x100>
 80013ce:	2300      	movs	r3, #0
 80013d0:	40ab      	lsls	r3, r5
 80013d2:	4333      	orrs	r3, r6
        AFIO->EXTICR[position >> 2u] = temp;
 80013d4:	3202      	adds	r2, #2
 80013d6:	4d44      	ldr	r5, [pc, #272]	; (80014e8 <HAL_GPIO_Init+0x218>)
 80013d8:	f845 3022 	str.w	r3, [r5, r2, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80013dc:	684b      	ldr	r3, [r1, #4]
 80013de:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80013e2:	d061      	beq.n	80014a8 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80013e4:	4a42      	ldr	r2, [pc, #264]	; (80014f0 <HAL_GPIO_Init+0x220>)
 80013e6:	6813      	ldr	r3, [r2, #0]
 80013e8:	ea43 030e 	orr.w	r3, r3, lr
 80013ec:	6013      	str	r3, [r2, #0]
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80013ee:	684b      	ldr	r3, [r1, #4]
 80013f0:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80013f4:	d05e      	beq.n	80014b4 <HAL_GPIO_Init+0x1e4>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80013f6:	4a3e      	ldr	r2, [pc, #248]	; (80014f0 <HAL_GPIO_Init+0x220>)
 80013f8:	6853      	ldr	r3, [r2, #4]
 80013fa:	ea43 030e 	orr.w	r3, r3, lr
 80013fe:	6053      	str	r3, [r2, #4]
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001400:	684b      	ldr	r3, [r1, #4]
 8001402:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8001406:	d05b      	beq.n	80014c0 <HAL_GPIO_Init+0x1f0>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001408:	4a39      	ldr	r2, [pc, #228]	; (80014f0 <HAL_GPIO_Init+0x220>)
 800140a:	6893      	ldr	r3, [r2, #8]
 800140c:	ea43 030e 	orr.w	r3, r3, lr
 8001410:	6093      	str	r3, [r2, #8]
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001412:	684b      	ldr	r3, [r1, #4]
 8001414:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 8001418:	d058      	beq.n	80014cc <HAL_GPIO_Init+0x1fc>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800141a:	4a35      	ldr	r2, [pc, #212]	; (80014f0 <HAL_GPIO_Init+0x220>)
 800141c:	68d3      	ldr	r3, [r2, #12]
 800141e:	ea43 030e 	orr.w	r3, r3, lr
 8001422:	60d3      	str	r3, [r2, #12]
          CLEAR_BIT(EXTI->FTSR, iocurrent);
        }
      }
    }

	position++;
 8001424:	f10c 0c01 	add.w	ip, ip, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001428:	680a      	ldr	r2, [r1, #0]
 800142a:	fa32 f30c 	lsrs.w	r3, r2, ip
 800142e:	d053      	beq.n	80014d8 <HAL_GPIO_Init+0x208>
    ioposition = (0x01uL << position);
 8001430:	2301      	movs	r3, #1
 8001432:	fa03 f30c 	lsl.w	r3, r3, ip
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001436:	ea02 0e03 	and.w	lr, r2, r3
    if (iocurrent == ioposition)
 800143a:	ea33 0202 	bics.w	r2, r3, r2
 800143e:	d1f1      	bne.n	8001424 <HAL_GPIO_Init+0x154>
      switch (GPIO_Init->Mode)
 8001440:	684a      	ldr	r2, [r1, #4]
 8001442:	2a12      	cmp	r2, #18
 8001444:	f63f af49 	bhi.w	80012da <HAL_GPIO_Init+0xa>
 8001448:	2a12      	cmp	r2, #18
 800144a:	f63f af66 	bhi.w	800131a <HAL_GPIO_Init+0x4a>
 800144e:	a501      	add	r5, pc, #4	; (adr r5, 8001454 <HAL_GPIO_Init+0x184>)
 8001450:	f855 f022 	ldr.w	pc, [r5, r2, lsl #2]
 8001454:	08001303 	.word	0x08001303
 8001458:	0800139b 	.word	0x0800139b
 800145c:	080013a5 	.word	0x080013a5
 8001460:	080013b7 	.word	0x080013b7
 8001464:	0800131b 	.word	0x0800131b
 8001468:	0800131b 	.word	0x0800131b
 800146c:	0800131b 	.word	0x0800131b
 8001470:	0800131b 	.word	0x0800131b
 8001474:	0800131b 	.word	0x0800131b
 8001478:	0800131b 	.word	0x0800131b
 800147c:	0800131b 	.word	0x0800131b
 8001480:	0800131b 	.word	0x0800131b
 8001484:	0800131b 	.word	0x0800131b
 8001488:	0800131b 	.word	0x0800131b
 800148c:	0800131b 	.word	0x0800131b
 8001490:	0800131b 	.word	0x0800131b
 8001494:	0800131b 	.word	0x0800131b
 8001498:	0800139f 	.word	0x0800139f
 800149c:	080013ab 	.word	0x080013ab
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80014a0:	2301      	movs	r3, #1
 80014a2:	e795      	b.n	80013d0 <HAL_GPIO_Init+0x100>
 80014a4:	2302      	movs	r3, #2
 80014a6:	e793      	b.n	80013d0 <HAL_GPIO_Init+0x100>
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80014a8:	4a11      	ldr	r2, [pc, #68]	; (80014f0 <HAL_GPIO_Init+0x220>)
 80014aa:	6813      	ldr	r3, [r2, #0]
 80014ac:	ea23 030e 	bic.w	r3, r3, lr
 80014b0:	6013      	str	r3, [r2, #0]
 80014b2:	e79c      	b.n	80013ee <HAL_GPIO_Init+0x11e>
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80014b4:	4a0e      	ldr	r2, [pc, #56]	; (80014f0 <HAL_GPIO_Init+0x220>)
 80014b6:	6853      	ldr	r3, [r2, #4]
 80014b8:	ea23 030e 	bic.w	r3, r3, lr
 80014bc:	6053      	str	r3, [r2, #4]
 80014be:	e79f      	b.n	8001400 <HAL_GPIO_Init+0x130>
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80014c0:	4a0b      	ldr	r2, [pc, #44]	; (80014f0 <HAL_GPIO_Init+0x220>)
 80014c2:	6893      	ldr	r3, [r2, #8]
 80014c4:	ea23 030e 	bic.w	r3, r3, lr
 80014c8:	6093      	str	r3, [r2, #8]
 80014ca:	e7a2      	b.n	8001412 <HAL_GPIO_Init+0x142>
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80014cc:	4a08      	ldr	r2, [pc, #32]	; (80014f0 <HAL_GPIO_Init+0x220>)
 80014ce:	68d3      	ldr	r3, [r2, #12]
 80014d0:	ea23 030e 	bic.w	r3, r3, lr
 80014d4:	60d3      	str	r3, [r2, #12]
 80014d6:	e7a5      	b.n	8001424 <HAL_GPIO_Init+0x154>
  }
}
 80014d8:	b002      	add	sp, #8
 80014da:	bd70      	pop	{r4, r5, r6, pc}
 80014dc:	10220000 	.word	0x10220000
 80014e0:	10310000 	.word	0x10310000
 80014e4:	40021000 	.word	0x40021000
 80014e8:	40010000 	.word	0x40010000
 80014ec:	40010800 	.word	0x40010800
 80014f0:	40010400 	.word	0x40010400

080014f4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80014f4:	b10a      	cbz	r2, 80014fa <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014f6:	6101      	str	r1, [r0, #16]
 80014f8:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80014fa:	0409      	lsls	r1, r1, #16
 80014fc:	6101      	str	r1, [r0, #16]
  }
}
 80014fe:	4770      	bx	lr

08001500 <HAL_IWDG_Init>:
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8001500:	b340      	cbz	r0, 8001554 <HAL_IWDG_Init+0x54>
{
 8001502:	b538      	push	{r3, r4, r5, lr}
 8001504:	4604      	mov	r4, r0
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8001506:	6803      	ldr	r3, [r0, #0]
 8001508:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 800150c:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 800150e:	6803      	ldr	r3, [r0, #0]
 8001510:	f245 5255 	movw	r2, #21845	; 0x5555
 8001514:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8001516:	6803      	ldr	r3, [r0, #0]
 8001518:	6842      	ldr	r2, [r0, #4]
 800151a:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 800151c:	6803      	ldr	r3, [r0, #0]
 800151e:	6882      	ldr	r2, [r0, #8]
 8001520:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8001522:	f7ff fde1 	bl	80010e8 <HAL_GetTick>
 8001526:	4605      	mov	r5, r0

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8001528:	6823      	ldr	r3, [r4, #0]
 800152a:	68da      	ldr	r2, [r3, #12]
 800152c:	f012 0f03 	tst.w	r2, #3
 8001530:	d00b      	beq.n	800154a <HAL_IWDG_Init+0x4a>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8001532:	f7ff fdd9 	bl	80010e8 <HAL_GetTick>
 8001536:	1b40      	subs	r0, r0, r5
 8001538:	2827      	cmp	r0, #39	; 0x27
 800153a:	d9f5      	bls.n	8001528 <HAL_IWDG_Init+0x28>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800153c:	6823      	ldr	r3, [r4, #0]
 800153e:	68db      	ldr	r3, [r3, #12]
 8001540:	f013 0f03 	tst.w	r3, #3
 8001544:	d0f0      	beq.n	8001528 <HAL_IWDG_Init+0x28>
      {
        return HAL_TIMEOUT;
 8001546:	2003      	movs	r0, #3
 8001548:	e003      	b.n	8001552 <HAL_IWDG_Init+0x52>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800154a:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800154e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8001550:	2000      	movs	r0, #0
}
 8001552:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8001554:	2001      	movs	r0, #1
}
 8001556:	4770      	bx	lr

08001558 <HAL_IWDG_Refresh>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8001558:	6803      	ldr	r3, [r0, #0]
 800155a:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800155e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
}
 8001560:	2000      	movs	r0, #0
 8001562:	4770      	bx	lr

08001564 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001564:	b082      	sub	sp, #8
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001566:	4b08      	ldr	r3, [pc, #32]	; (8001588 <RCC_Delay+0x24>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4a08      	ldr	r2, [pc, #32]	; (800158c <RCC_Delay+0x28>)
 800156c:	fba2 2303 	umull	r2, r3, r2, r3
 8001570:	0a5b      	lsrs	r3, r3, #9
 8001572:	fb00 f303 	mul.w	r3, r0, r3
 8001576:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8001578:	bf00      	nop
  }
  while (Delay --);
 800157a:	9b01      	ldr	r3, [sp, #4]
 800157c:	1e5a      	subs	r2, r3, #1
 800157e:	9201      	str	r2, [sp, #4]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d1f9      	bne.n	8001578 <RCC_Delay+0x14>
}
 8001584:	b002      	add	sp, #8
 8001586:	4770      	bx	lr
 8001588:	20000008 	.word	0x20000008
 800158c:	10624dd3 	.word	0x10624dd3

08001590 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 8001590:	2800      	cmp	r0, #0
 8001592:	f000 81f1 	beq.w	8001978 <HAL_RCC_OscConfig+0x3e8>
{
 8001596:	b570      	push	{r4, r5, r6, lr}
 8001598:	b082      	sub	sp, #8
 800159a:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800159c:	6803      	ldr	r3, [r0, #0]
 800159e:	f013 0f01 	tst.w	r3, #1
 80015a2:	d02c      	beq.n	80015fe <HAL_RCC_OscConfig+0x6e>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80015a4:	4b99      	ldr	r3, [pc, #612]	; (800180c <HAL_RCC_OscConfig+0x27c>)
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	f003 030c 	and.w	r3, r3, #12
 80015ac:	2b04      	cmp	r3, #4
 80015ae:	d01d      	beq.n	80015ec <HAL_RCC_OscConfig+0x5c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80015b0:	4b96      	ldr	r3, [pc, #600]	; (800180c <HAL_RCC_OscConfig+0x27c>)
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	f003 030c 	and.w	r3, r3, #12
 80015b8:	2b08      	cmp	r3, #8
 80015ba:	d012      	beq.n	80015e2 <HAL_RCC_OscConfig+0x52>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015bc:	6863      	ldr	r3, [r4, #4]
 80015be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015c2:	d041      	beq.n	8001648 <HAL_RCC_OscConfig+0xb8>
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d155      	bne.n	8001674 <HAL_RCC_OscConfig+0xe4>
 80015c8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80015cc:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80015d0:	681a      	ldr	r2, [r3, #0]
 80015d2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80015d6:	601a      	str	r2, [r3, #0]
 80015d8:	681a      	ldr	r2, [r3, #0]
 80015da:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80015de:	601a      	str	r2, [r3, #0]
 80015e0:	e037      	b.n	8001652 <HAL_RCC_OscConfig+0xc2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80015e2:	4b8a      	ldr	r3, [pc, #552]	; (800180c <HAL_RCC_OscConfig+0x27c>)
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80015ea:	d0e7      	beq.n	80015bc <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015ec:	4b87      	ldr	r3, [pc, #540]	; (800180c <HAL_RCC_OscConfig+0x27c>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80015f4:	d003      	beq.n	80015fe <HAL_RCC_OscConfig+0x6e>
 80015f6:	6863      	ldr	r3, [r4, #4]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	f000 81bf 	beq.w	800197c <HAL_RCC_OscConfig+0x3ec>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015fe:	6823      	ldr	r3, [r4, #0]
 8001600:	f013 0f02 	tst.w	r3, #2
 8001604:	d075      	beq.n	80016f2 <HAL_RCC_OscConfig+0x162>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001606:	4b81      	ldr	r3, [pc, #516]	; (800180c <HAL_RCC_OscConfig+0x27c>)
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	f013 0f0c 	tst.w	r3, #12
 800160e:	d05f      	beq.n	80016d0 <HAL_RCC_OscConfig+0x140>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001610:	4b7e      	ldr	r3, [pc, #504]	; (800180c <HAL_RCC_OscConfig+0x27c>)
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	f003 030c 	and.w	r3, r3, #12
 8001618:	2b08      	cmp	r3, #8
 800161a:	d054      	beq.n	80016c6 <HAL_RCC_OscConfig+0x136>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800161c:	6923      	ldr	r3, [r4, #16]
 800161e:	2b00      	cmp	r3, #0
 8001620:	f000 808a 	beq.w	8001738 <HAL_RCC_OscConfig+0x1a8>
        __HAL_RCC_HSI_ENABLE();
 8001624:	4b7a      	ldr	r3, [pc, #488]	; (8001810 <HAL_RCC_OscConfig+0x280>)
 8001626:	2201      	movs	r2, #1
 8001628:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800162a:	f7ff fd5d 	bl	80010e8 <HAL_GetTick>
 800162e:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001630:	4b76      	ldr	r3, [pc, #472]	; (800180c <HAL_RCC_OscConfig+0x27c>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f013 0f02 	tst.w	r3, #2
 8001638:	d175      	bne.n	8001726 <HAL_RCC_OscConfig+0x196>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800163a:	f7ff fd55 	bl	80010e8 <HAL_GetTick>
 800163e:	1b40      	subs	r0, r0, r5
 8001640:	2802      	cmp	r0, #2
 8001642:	d9f5      	bls.n	8001630 <HAL_RCC_OscConfig+0xa0>
            return HAL_TIMEOUT;
 8001644:	2003      	movs	r0, #3
 8001646:	e19e      	b.n	8001986 <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001648:	4a70      	ldr	r2, [pc, #448]	; (800180c <HAL_RCC_OscConfig+0x27c>)
 800164a:	6813      	ldr	r3, [r2, #0]
 800164c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001650:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001652:	6863      	ldr	r3, [r4, #4]
 8001654:	b343      	cbz	r3, 80016a8 <HAL_RCC_OscConfig+0x118>
        tickstart = HAL_GetTick();
 8001656:	f7ff fd47 	bl	80010e8 <HAL_GetTick>
 800165a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800165c:	4b6b      	ldr	r3, [pc, #428]	; (800180c <HAL_RCC_OscConfig+0x27c>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001664:	d1cb      	bne.n	80015fe <HAL_RCC_OscConfig+0x6e>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001666:	f7ff fd3f 	bl	80010e8 <HAL_GetTick>
 800166a:	1b40      	subs	r0, r0, r5
 800166c:	2864      	cmp	r0, #100	; 0x64
 800166e:	d9f5      	bls.n	800165c <HAL_RCC_OscConfig+0xcc>
            return HAL_TIMEOUT;
 8001670:	2003      	movs	r0, #3
 8001672:	e188      	b.n	8001986 <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001674:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001678:	d009      	beq.n	800168e <HAL_RCC_OscConfig+0xfe>
 800167a:	4b64      	ldr	r3, [pc, #400]	; (800180c <HAL_RCC_OscConfig+0x27c>)
 800167c:	681a      	ldr	r2, [r3, #0]
 800167e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001682:	601a      	str	r2, [r3, #0]
 8001684:	681a      	ldr	r2, [r3, #0]
 8001686:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800168a:	601a      	str	r2, [r3, #0]
 800168c:	e7e1      	b.n	8001652 <HAL_RCC_OscConfig+0xc2>
 800168e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001692:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8001696:	681a      	ldr	r2, [r3, #0]
 8001698:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800169c:	601a      	str	r2, [r3, #0]
 800169e:	681a      	ldr	r2, [r3, #0]
 80016a0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80016a4:	601a      	str	r2, [r3, #0]
 80016a6:	e7d4      	b.n	8001652 <HAL_RCC_OscConfig+0xc2>
        tickstart = HAL_GetTick();
 80016a8:	f7ff fd1e 	bl	80010e8 <HAL_GetTick>
 80016ac:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016ae:	4b57      	ldr	r3, [pc, #348]	; (800180c <HAL_RCC_OscConfig+0x27c>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80016b6:	d0a2      	beq.n	80015fe <HAL_RCC_OscConfig+0x6e>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016b8:	f7ff fd16 	bl	80010e8 <HAL_GetTick>
 80016bc:	1b40      	subs	r0, r0, r5
 80016be:	2864      	cmp	r0, #100	; 0x64
 80016c0:	d9f5      	bls.n	80016ae <HAL_RCC_OscConfig+0x11e>
            return HAL_TIMEOUT;
 80016c2:	2003      	movs	r0, #3
 80016c4:	e15f      	b.n	8001986 <HAL_RCC_OscConfig+0x3f6>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80016c6:	4b51      	ldr	r3, [pc, #324]	; (800180c <HAL_RCC_OscConfig+0x27c>)
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80016ce:	d1a5      	bne.n	800161c <HAL_RCC_OscConfig+0x8c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016d0:	4b4e      	ldr	r3, [pc, #312]	; (800180c <HAL_RCC_OscConfig+0x27c>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f013 0f02 	tst.w	r3, #2
 80016d8:	d003      	beq.n	80016e2 <HAL_RCC_OscConfig+0x152>
 80016da:	6923      	ldr	r3, [r4, #16]
 80016dc:	2b01      	cmp	r3, #1
 80016de:	f040 814f 	bne.w	8001980 <HAL_RCC_OscConfig+0x3f0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016e2:	4a4a      	ldr	r2, [pc, #296]	; (800180c <HAL_RCC_OscConfig+0x27c>)
 80016e4:	6813      	ldr	r3, [r2, #0]
 80016e6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80016ea:	6961      	ldr	r1, [r4, #20]
 80016ec:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80016f0:	6013      	str	r3, [r2, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016f2:	6823      	ldr	r3, [r4, #0]
 80016f4:	f013 0f08 	tst.w	r3, #8
 80016f8:	d033      	beq.n	8001762 <HAL_RCC_OscConfig+0x1d2>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80016fa:	69a3      	ldr	r3, [r4, #24]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d05c      	beq.n	80017ba <HAL_RCC_OscConfig+0x22a>
      __HAL_RCC_LSI_ENABLE();
 8001700:	4b43      	ldr	r3, [pc, #268]	; (8001810 <HAL_RCC_OscConfig+0x280>)
 8001702:	2201      	movs	r2, #1
 8001704:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 8001708:	f7ff fcee 	bl	80010e8 <HAL_GetTick>
 800170c:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800170e:	4b3f      	ldr	r3, [pc, #252]	; (800180c <HAL_RCC_OscConfig+0x27c>)
 8001710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001712:	f013 0f02 	tst.w	r3, #2
 8001716:	d121      	bne.n	800175c <HAL_RCC_OscConfig+0x1cc>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001718:	f7ff fce6 	bl	80010e8 <HAL_GetTick>
 800171c:	1b40      	subs	r0, r0, r5
 800171e:	2802      	cmp	r0, #2
 8001720:	d9f5      	bls.n	800170e <HAL_RCC_OscConfig+0x17e>
          return HAL_TIMEOUT;
 8001722:	2003      	movs	r0, #3
 8001724:	e12f      	b.n	8001986 <HAL_RCC_OscConfig+0x3f6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001726:	4a39      	ldr	r2, [pc, #228]	; (800180c <HAL_RCC_OscConfig+0x27c>)
 8001728:	6813      	ldr	r3, [r2, #0]
 800172a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800172e:	6961      	ldr	r1, [r4, #20]
 8001730:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001734:	6013      	str	r3, [r2, #0]
 8001736:	e7dc      	b.n	80016f2 <HAL_RCC_OscConfig+0x162>
        __HAL_RCC_HSI_DISABLE();
 8001738:	4b35      	ldr	r3, [pc, #212]	; (8001810 <HAL_RCC_OscConfig+0x280>)
 800173a:	2200      	movs	r2, #0
 800173c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800173e:	f7ff fcd3 	bl	80010e8 <HAL_GetTick>
 8001742:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001744:	4b31      	ldr	r3, [pc, #196]	; (800180c <HAL_RCC_OscConfig+0x27c>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f013 0f02 	tst.w	r3, #2
 800174c:	d0d1      	beq.n	80016f2 <HAL_RCC_OscConfig+0x162>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800174e:	f7ff fccb 	bl	80010e8 <HAL_GetTick>
 8001752:	1b40      	subs	r0, r0, r5
 8001754:	2802      	cmp	r0, #2
 8001756:	d9f5      	bls.n	8001744 <HAL_RCC_OscConfig+0x1b4>
            return HAL_TIMEOUT;
 8001758:	2003      	movs	r0, #3
 800175a:	e114      	b.n	8001986 <HAL_RCC_OscConfig+0x3f6>
      RCC_Delay(1);
 800175c:	2001      	movs	r0, #1
 800175e:	f7ff ff01 	bl	8001564 <RCC_Delay>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001762:	6823      	ldr	r3, [r4, #0]
 8001764:	f013 0f04 	tst.w	r3, #4
 8001768:	f000 8096 	beq.w	8001898 <HAL_RCC_OscConfig+0x308>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800176c:	4b27      	ldr	r3, [pc, #156]	; (800180c <HAL_RCC_OscConfig+0x27c>)
 800176e:	69db      	ldr	r3, [r3, #28]
 8001770:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8001774:	d134      	bne.n	80017e0 <HAL_RCC_OscConfig+0x250>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001776:	4b25      	ldr	r3, [pc, #148]	; (800180c <HAL_RCC_OscConfig+0x27c>)
 8001778:	69da      	ldr	r2, [r3, #28]
 800177a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800177e:	61da      	str	r2, [r3, #28]
 8001780:	69db      	ldr	r3, [r3, #28]
 8001782:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001786:	9301      	str	r3, [sp, #4]
 8001788:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800178a:	2501      	movs	r5, #1
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800178c:	4b21      	ldr	r3, [pc, #132]	; (8001814 <HAL_RCC_OscConfig+0x284>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001794:	d026      	beq.n	80017e4 <HAL_RCC_OscConfig+0x254>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001796:	68e3      	ldr	r3, [r4, #12]
 8001798:	2b01      	cmp	r3, #1
 800179a:	d03d      	beq.n	8001818 <HAL_RCC_OscConfig+0x288>
 800179c:	2b00      	cmp	r3, #0
 800179e:	d153      	bne.n	8001848 <HAL_RCC_OscConfig+0x2b8>
 80017a0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80017a4:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80017a8:	6a1a      	ldr	r2, [r3, #32]
 80017aa:	f022 0201 	bic.w	r2, r2, #1
 80017ae:	621a      	str	r2, [r3, #32]
 80017b0:	6a1a      	ldr	r2, [r3, #32]
 80017b2:	f022 0204 	bic.w	r2, r2, #4
 80017b6:	621a      	str	r2, [r3, #32]
 80017b8:	e033      	b.n	8001822 <HAL_RCC_OscConfig+0x292>
      __HAL_RCC_LSI_DISABLE();
 80017ba:	4b15      	ldr	r3, [pc, #84]	; (8001810 <HAL_RCC_OscConfig+0x280>)
 80017bc:	2200      	movs	r2, #0
 80017be:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 80017c2:	f7ff fc91 	bl	80010e8 <HAL_GetTick>
 80017c6:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017c8:	4b10      	ldr	r3, [pc, #64]	; (800180c <HAL_RCC_OscConfig+0x27c>)
 80017ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017cc:	f013 0f02 	tst.w	r3, #2
 80017d0:	d0c7      	beq.n	8001762 <HAL_RCC_OscConfig+0x1d2>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017d2:	f7ff fc89 	bl	80010e8 <HAL_GetTick>
 80017d6:	1b40      	subs	r0, r0, r5
 80017d8:	2802      	cmp	r0, #2
 80017da:	d9f5      	bls.n	80017c8 <HAL_RCC_OscConfig+0x238>
          return HAL_TIMEOUT;
 80017dc:	2003      	movs	r0, #3
 80017de:	e0d2      	b.n	8001986 <HAL_RCC_OscConfig+0x3f6>
    FlagStatus       pwrclkchanged = RESET;
 80017e0:	2500      	movs	r5, #0
 80017e2:	e7d3      	b.n	800178c <HAL_RCC_OscConfig+0x1fc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017e4:	4a0b      	ldr	r2, [pc, #44]	; (8001814 <HAL_RCC_OscConfig+0x284>)
 80017e6:	6813      	ldr	r3, [r2, #0]
 80017e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017ec:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80017ee:	f7ff fc7b 	bl	80010e8 <HAL_GetTick>
 80017f2:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017f4:	4b07      	ldr	r3, [pc, #28]	; (8001814 <HAL_RCC_OscConfig+0x284>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f413 7f80 	tst.w	r3, #256	; 0x100
 80017fc:	d1cb      	bne.n	8001796 <HAL_RCC_OscConfig+0x206>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017fe:	f7ff fc73 	bl	80010e8 <HAL_GetTick>
 8001802:	1b80      	subs	r0, r0, r6
 8001804:	2864      	cmp	r0, #100	; 0x64
 8001806:	d9f5      	bls.n	80017f4 <HAL_RCC_OscConfig+0x264>
          return HAL_TIMEOUT;
 8001808:	2003      	movs	r0, #3
 800180a:	e0bc      	b.n	8001986 <HAL_RCC_OscConfig+0x3f6>
 800180c:	40021000 	.word	0x40021000
 8001810:	42420000 	.word	0x42420000
 8001814:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001818:	4a5f      	ldr	r2, [pc, #380]	; (8001998 <HAL_RCC_OscConfig+0x408>)
 800181a:	6a13      	ldr	r3, [r2, #32]
 800181c:	f043 0301 	orr.w	r3, r3, #1
 8001820:	6213      	str	r3, [r2, #32]
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001822:	68e3      	ldr	r3, [r4, #12]
 8001824:	b333      	cbz	r3, 8001874 <HAL_RCC_OscConfig+0x2e4>
      tickstart = HAL_GetTick();
 8001826:	f7ff fc5f 	bl	80010e8 <HAL_GetTick>
 800182a:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800182c:	4b5a      	ldr	r3, [pc, #360]	; (8001998 <HAL_RCC_OscConfig+0x408>)
 800182e:	6a1b      	ldr	r3, [r3, #32]
 8001830:	f013 0f02 	tst.w	r3, #2
 8001834:	d12f      	bne.n	8001896 <HAL_RCC_OscConfig+0x306>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001836:	f7ff fc57 	bl	80010e8 <HAL_GetTick>
 800183a:	1b80      	subs	r0, r0, r6
 800183c:	f241 3388 	movw	r3, #5000	; 0x1388
 8001840:	4298      	cmp	r0, r3
 8001842:	d9f3      	bls.n	800182c <HAL_RCC_OscConfig+0x29c>
          return HAL_TIMEOUT;
 8001844:	2003      	movs	r0, #3
 8001846:	e09e      	b.n	8001986 <HAL_RCC_OscConfig+0x3f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001848:	2b05      	cmp	r3, #5
 800184a:	d009      	beq.n	8001860 <HAL_RCC_OscConfig+0x2d0>
 800184c:	4b52      	ldr	r3, [pc, #328]	; (8001998 <HAL_RCC_OscConfig+0x408>)
 800184e:	6a1a      	ldr	r2, [r3, #32]
 8001850:	f022 0201 	bic.w	r2, r2, #1
 8001854:	621a      	str	r2, [r3, #32]
 8001856:	6a1a      	ldr	r2, [r3, #32]
 8001858:	f022 0204 	bic.w	r2, r2, #4
 800185c:	621a      	str	r2, [r3, #32]
 800185e:	e7e0      	b.n	8001822 <HAL_RCC_OscConfig+0x292>
 8001860:	4b4d      	ldr	r3, [pc, #308]	; (8001998 <HAL_RCC_OscConfig+0x408>)
 8001862:	6a1a      	ldr	r2, [r3, #32]
 8001864:	f042 0204 	orr.w	r2, r2, #4
 8001868:	621a      	str	r2, [r3, #32]
 800186a:	6a1a      	ldr	r2, [r3, #32]
 800186c:	f042 0201 	orr.w	r2, r2, #1
 8001870:	621a      	str	r2, [r3, #32]
 8001872:	e7d6      	b.n	8001822 <HAL_RCC_OscConfig+0x292>
      tickstart = HAL_GetTick();
 8001874:	f7ff fc38 	bl	80010e8 <HAL_GetTick>
 8001878:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800187a:	4b47      	ldr	r3, [pc, #284]	; (8001998 <HAL_RCC_OscConfig+0x408>)
 800187c:	6a1b      	ldr	r3, [r3, #32]
 800187e:	f013 0f02 	tst.w	r3, #2
 8001882:	d008      	beq.n	8001896 <HAL_RCC_OscConfig+0x306>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001884:	f7ff fc30 	bl	80010e8 <HAL_GetTick>
 8001888:	1b80      	subs	r0, r0, r6
 800188a:	f241 3388 	movw	r3, #5000	; 0x1388
 800188e:	4298      	cmp	r0, r3
 8001890:	d9f3      	bls.n	800187a <HAL_RCC_OscConfig+0x2ea>
          return HAL_TIMEOUT;
 8001892:	2003      	movs	r0, #3
 8001894:	e077      	b.n	8001986 <HAL_RCC_OscConfig+0x3f6>
    if (pwrclkchanged == SET)
 8001896:	b9e5      	cbnz	r5, 80018d2 <HAL_RCC_OscConfig+0x342>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001898:	69e3      	ldr	r3, [r4, #28]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d072      	beq.n	8001984 <HAL_RCC_OscConfig+0x3f4>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800189e:	4a3e      	ldr	r2, [pc, #248]	; (8001998 <HAL_RCC_OscConfig+0x408>)
 80018a0:	6852      	ldr	r2, [r2, #4]
 80018a2:	f002 020c 	and.w	r2, r2, #12
 80018a6:	2a08      	cmp	r2, #8
 80018a8:	d056      	beq.n	8001958 <HAL_RCC_OscConfig+0x3c8>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018aa:	2b02      	cmp	r3, #2
 80018ac:	d017      	beq.n	80018de <HAL_RCC_OscConfig+0x34e>
        __HAL_RCC_PLL_DISABLE();
 80018ae:	4b3b      	ldr	r3, [pc, #236]	; (800199c <HAL_RCC_OscConfig+0x40c>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 80018b4:	f7ff fc18 	bl	80010e8 <HAL_GetTick>
 80018b8:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018ba:	4b37      	ldr	r3, [pc, #220]	; (8001998 <HAL_RCC_OscConfig+0x408>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80018c2:	d047      	beq.n	8001954 <HAL_RCC_OscConfig+0x3c4>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018c4:	f7ff fc10 	bl	80010e8 <HAL_GetTick>
 80018c8:	1b00      	subs	r0, r0, r4
 80018ca:	2802      	cmp	r0, #2
 80018cc:	d9f5      	bls.n	80018ba <HAL_RCC_OscConfig+0x32a>
            return HAL_TIMEOUT;
 80018ce:	2003      	movs	r0, #3
 80018d0:	e059      	b.n	8001986 <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_PWR_CLK_DISABLE();
 80018d2:	4a31      	ldr	r2, [pc, #196]	; (8001998 <HAL_RCC_OscConfig+0x408>)
 80018d4:	69d3      	ldr	r3, [r2, #28]
 80018d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018da:	61d3      	str	r3, [r2, #28]
 80018dc:	e7dc      	b.n	8001898 <HAL_RCC_OscConfig+0x308>
        __HAL_RCC_PLL_DISABLE();
 80018de:	4b2f      	ldr	r3, [pc, #188]	; (800199c <HAL_RCC_OscConfig+0x40c>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 80018e4:	f7ff fc00 	bl	80010e8 <HAL_GetTick>
 80018e8:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018ea:	4b2b      	ldr	r3, [pc, #172]	; (8001998 <HAL_RCC_OscConfig+0x408>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80018f2:	d006      	beq.n	8001902 <HAL_RCC_OscConfig+0x372>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018f4:	f7ff fbf8 	bl	80010e8 <HAL_GetTick>
 80018f8:	1b40      	subs	r0, r0, r5
 80018fa:	2802      	cmp	r0, #2
 80018fc:	d9f5      	bls.n	80018ea <HAL_RCC_OscConfig+0x35a>
            return HAL_TIMEOUT;
 80018fe:	2003      	movs	r0, #3
 8001900:	e041      	b.n	8001986 <HAL_RCC_OscConfig+0x3f6>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001902:	6a23      	ldr	r3, [r4, #32]
 8001904:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001908:	d01a      	beq.n	8001940 <HAL_RCC_OscConfig+0x3b0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800190a:	4923      	ldr	r1, [pc, #140]	; (8001998 <HAL_RCC_OscConfig+0x408>)
 800190c:	684b      	ldr	r3, [r1, #4]
 800190e:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 8001912:	6a22      	ldr	r2, [r4, #32]
 8001914:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8001916:	4302      	orrs	r2, r0
 8001918:	4313      	orrs	r3, r2
 800191a:	604b      	str	r3, [r1, #4]
        __HAL_RCC_PLL_ENABLE();
 800191c:	4b1f      	ldr	r3, [pc, #124]	; (800199c <HAL_RCC_OscConfig+0x40c>)
 800191e:	2201      	movs	r2, #1
 8001920:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8001922:	f7ff fbe1 	bl	80010e8 <HAL_GetTick>
 8001926:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001928:	4b1b      	ldr	r3, [pc, #108]	; (8001998 <HAL_RCC_OscConfig+0x408>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001930:	d10e      	bne.n	8001950 <HAL_RCC_OscConfig+0x3c0>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001932:	f7ff fbd9 	bl	80010e8 <HAL_GetTick>
 8001936:	1b00      	subs	r0, r0, r4
 8001938:	2802      	cmp	r0, #2
 800193a:	d9f5      	bls.n	8001928 <HAL_RCC_OscConfig+0x398>
            return HAL_TIMEOUT;
 800193c:	2003      	movs	r0, #3
 800193e:	e022      	b.n	8001986 <HAL_RCC_OscConfig+0x3f6>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001940:	4a15      	ldr	r2, [pc, #84]	; (8001998 <HAL_RCC_OscConfig+0x408>)
 8001942:	6853      	ldr	r3, [r2, #4]
 8001944:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001948:	68a1      	ldr	r1, [r4, #8]
 800194a:	430b      	orrs	r3, r1
 800194c:	6053      	str	r3, [r2, #4]
 800194e:	e7dc      	b.n	800190a <HAL_RCC_OscConfig+0x37a>
  return HAL_OK;
 8001950:	2000      	movs	r0, #0
 8001952:	e018      	b.n	8001986 <HAL_RCC_OscConfig+0x3f6>
 8001954:	2000      	movs	r0, #0
 8001956:	e016      	b.n	8001986 <HAL_RCC_OscConfig+0x3f6>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001958:	2b01      	cmp	r3, #1
 800195a:	d016      	beq.n	800198a <HAL_RCC_OscConfig+0x3fa>
        pll_config = RCC->CFGR;
 800195c:	4b0e      	ldr	r3, [pc, #56]	; (8001998 <HAL_RCC_OscConfig+0x408>)
 800195e:	685b      	ldr	r3, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001960:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8001964:	6a22      	ldr	r2, [r4, #32]
 8001966:	4291      	cmp	r1, r2
 8001968:	d111      	bne.n	800198e <HAL_RCC_OscConfig+0x3fe>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800196a:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800196e:	6a62      	ldr	r2, [r4, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001970:	4293      	cmp	r3, r2
 8001972:	d10e      	bne.n	8001992 <HAL_RCC_OscConfig+0x402>
  return HAL_OK;
 8001974:	2000      	movs	r0, #0
 8001976:	e006      	b.n	8001986 <HAL_RCC_OscConfig+0x3f6>
    return HAL_ERROR;
 8001978:	2001      	movs	r0, #1
}
 800197a:	4770      	bx	lr
        return HAL_ERROR;
 800197c:	2001      	movs	r0, #1
 800197e:	e002      	b.n	8001986 <HAL_RCC_OscConfig+0x3f6>
        return HAL_ERROR;
 8001980:	2001      	movs	r0, #1
 8001982:	e000      	b.n	8001986 <HAL_RCC_OscConfig+0x3f6>
  return HAL_OK;
 8001984:	2000      	movs	r0, #0
}
 8001986:	b002      	add	sp, #8
 8001988:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 800198a:	2001      	movs	r0, #1
 800198c:	e7fb      	b.n	8001986 <HAL_RCC_OscConfig+0x3f6>
          return HAL_ERROR;
 800198e:	2001      	movs	r0, #1
 8001990:	e7f9      	b.n	8001986 <HAL_RCC_OscConfig+0x3f6>
 8001992:	2001      	movs	r0, #1
 8001994:	e7f7      	b.n	8001986 <HAL_RCC_OscConfig+0x3f6>
 8001996:	bf00      	nop
 8001998:	40021000 	.word	0x40021000
 800199c:	42420000 	.word	0x42420000

080019a0 <HAL_RCC_GetSysClockFreq>:
{
 80019a0:	b086      	sub	sp, #24
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80019a2:	4b17      	ldr	r3, [pc, #92]	; (8001a00 <HAL_RCC_GetSysClockFreq+0x60>)
 80019a4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80019a6:	f10d 0c18 	add.w	ip, sp, #24
 80019aa:	e90c 000f 	stmdb	ip, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80019ae:	f240 2301 	movw	r3, #513	; 0x201
 80019b2:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 80019b6:	4b13      	ldr	r3, [pc, #76]	; (8001a04 <HAL_RCC_GetSysClockFreq+0x64>)
 80019b8:	685b      	ldr	r3, [r3, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80019ba:	f003 020c 	and.w	r2, r3, #12
 80019be:	2a08      	cmp	r2, #8
 80019c0:	d002      	beq.n	80019c8 <HAL_RCC_GetSysClockFreq+0x28>
      sysclockfreq = HSE_VALUE;
 80019c2:	4811      	ldr	r0, [pc, #68]	; (8001a08 <HAL_RCC_GetSysClockFreq+0x68>)
}
 80019c4:	b006      	add	sp, #24
 80019c6:	4770      	bx	lr
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80019c8:	f3c3 4283 	ubfx	r2, r3, #18, #4
 80019cc:	3218      	adds	r2, #24
 80019ce:	446a      	add	r2, sp
 80019d0:	f812 0c10 	ldrb.w	r0, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80019d4:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80019d8:	d00d      	beq.n	80019f6 <HAL_RCC_GetSysClockFreq+0x56>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80019da:	4b0a      	ldr	r3, [pc, #40]	; (8001a04 <HAL_RCC_GetSysClockFreq+0x64>)
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	f3c3 4340 	ubfx	r3, r3, #17, #1
 80019e2:	3318      	adds	r3, #24
 80019e4:	446b      	add	r3, sp
 80019e6:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80019ea:	4a07      	ldr	r2, [pc, #28]	; (8001a08 <HAL_RCC_GetSysClockFreq+0x68>)
 80019ec:	fb02 f000 	mul.w	r0, r2, r0
 80019f0:	fbb0 f0f3 	udiv	r0, r0, r3
 80019f4:	e7e6      	b.n	80019c4 <HAL_RCC_GetSysClockFreq+0x24>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80019f6:	4b05      	ldr	r3, [pc, #20]	; (8001a0c <HAL_RCC_GetSysClockFreq+0x6c>)
 80019f8:	fb03 f000 	mul.w	r0, r3, r0
 80019fc:	e7e2      	b.n	80019c4 <HAL_RCC_GetSysClockFreq+0x24>
 80019fe:	bf00      	nop
 8001a00:	080030ec 	.word	0x080030ec
 8001a04:	40021000 	.word	0x40021000
 8001a08:	007a1200 	.word	0x007a1200
 8001a0c:	003d0900 	.word	0x003d0900

08001a10 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8001a10:	2800      	cmp	r0, #0
 8001a12:	f000 80a0 	beq.w	8001b56 <HAL_RCC_ClockConfig+0x146>
{
 8001a16:	b570      	push	{r4, r5, r6, lr}
 8001a18:	460d      	mov	r5, r1
 8001a1a:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a1c:	4b52      	ldr	r3, [pc, #328]	; (8001b68 <HAL_RCC_ClockConfig+0x158>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f003 0307 	and.w	r3, r3, #7
 8001a24:	428b      	cmp	r3, r1
 8001a26:	d20b      	bcs.n	8001a40 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a28:	4a4f      	ldr	r2, [pc, #316]	; (8001b68 <HAL_RCC_ClockConfig+0x158>)
 8001a2a:	6813      	ldr	r3, [r2, #0]
 8001a2c:	f023 0307 	bic.w	r3, r3, #7
 8001a30:	430b      	orrs	r3, r1
 8001a32:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a34:	6813      	ldr	r3, [r2, #0]
 8001a36:	f003 0307 	and.w	r3, r3, #7
 8001a3a:	428b      	cmp	r3, r1
 8001a3c:	f040 808d 	bne.w	8001b5a <HAL_RCC_ClockConfig+0x14a>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a40:	6823      	ldr	r3, [r4, #0]
 8001a42:	f013 0f02 	tst.w	r3, #2
 8001a46:	d017      	beq.n	8001a78 <HAL_RCC_ClockConfig+0x68>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a48:	f013 0f04 	tst.w	r3, #4
 8001a4c:	d004      	beq.n	8001a58 <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a4e:	4a47      	ldr	r2, [pc, #284]	; (8001b6c <HAL_RCC_ClockConfig+0x15c>)
 8001a50:	6853      	ldr	r3, [r2, #4]
 8001a52:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001a56:	6053      	str	r3, [r2, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a58:	6823      	ldr	r3, [r4, #0]
 8001a5a:	f013 0f08 	tst.w	r3, #8
 8001a5e:	d004      	beq.n	8001a6a <HAL_RCC_ClockConfig+0x5a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a60:	4a42      	ldr	r2, [pc, #264]	; (8001b6c <HAL_RCC_ClockConfig+0x15c>)
 8001a62:	6853      	ldr	r3, [r2, #4]
 8001a64:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001a68:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a6a:	4a40      	ldr	r2, [pc, #256]	; (8001b6c <HAL_RCC_ClockConfig+0x15c>)
 8001a6c:	6853      	ldr	r3, [r2, #4]
 8001a6e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001a72:	68a1      	ldr	r1, [r4, #8]
 8001a74:	430b      	orrs	r3, r1
 8001a76:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a78:	6823      	ldr	r3, [r4, #0]
 8001a7a:	f013 0f01 	tst.w	r3, #1
 8001a7e:	d031      	beq.n	8001ae4 <HAL_RCC_ClockConfig+0xd4>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a80:	6863      	ldr	r3, [r4, #4]
 8001a82:	2b01      	cmp	r3, #1
 8001a84:	d020      	beq.n	8001ac8 <HAL_RCC_ClockConfig+0xb8>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a86:	2b02      	cmp	r3, #2
 8001a88:	d025      	beq.n	8001ad6 <HAL_RCC_ClockConfig+0xc6>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a8a:	4a38      	ldr	r2, [pc, #224]	; (8001b6c <HAL_RCC_ClockConfig+0x15c>)
 8001a8c:	6812      	ldr	r2, [r2, #0]
 8001a8e:	f012 0f02 	tst.w	r2, #2
 8001a92:	d064      	beq.n	8001b5e <HAL_RCC_ClockConfig+0x14e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a94:	4935      	ldr	r1, [pc, #212]	; (8001b6c <HAL_RCC_ClockConfig+0x15c>)
 8001a96:	684a      	ldr	r2, [r1, #4]
 8001a98:	f022 0203 	bic.w	r2, r2, #3
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 8001aa0:	f7ff fb22 	bl	80010e8 <HAL_GetTick>
 8001aa4:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001aa6:	4b31      	ldr	r3, [pc, #196]	; (8001b6c <HAL_RCC_ClockConfig+0x15c>)
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	f003 030c 	and.w	r3, r3, #12
 8001aae:	6862      	ldr	r2, [r4, #4]
 8001ab0:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001ab4:	d016      	beq.n	8001ae4 <HAL_RCC_ClockConfig+0xd4>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ab6:	f7ff fb17 	bl	80010e8 <HAL_GetTick>
 8001aba:	1b80      	subs	r0, r0, r6
 8001abc:	f241 3388 	movw	r3, #5000	; 0x1388
 8001ac0:	4298      	cmp	r0, r3
 8001ac2:	d9f0      	bls.n	8001aa6 <HAL_RCC_ClockConfig+0x96>
        return HAL_TIMEOUT;
 8001ac4:	2003      	movs	r0, #3
 8001ac6:	e045      	b.n	8001b54 <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ac8:	4a28      	ldr	r2, [pc, #160]	; (8001b6c <HAL_RCC_ClockConfig+0x15c>)
 8001aca:	6812      	ldr	r2, [r2, #0]
 8001acc:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8001ad0:	d1e0      	bne.n	8001a94 <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 8001ad2:	2001      	movs	r0, #1
 8001ad4:	e03e      	b.n	8001b54 <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ad6:	4a25      	ldr	r2, [pc, #148]	; (8001b6c <HAL_RCC_ClockConfig+0x15c>)
 8001ad8:	6812      	ldr	r2, [r2, #0]
 8001ada:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8001ade:	d1d9      	bne.n	8001a94 <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 8001ae0:	2001      	movs	r0, #1
 8001ae2:	e037      	b.n	8001b54 <HAL_RCC_ClockConfig+0x144>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ae4:	4b20      	ldr	r3, [pc, #128]	; (8001b68 <HAL_RCC_ClockConfig+0x158>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f003 0307 	and.w	r3, r3, #7
 8001aec:	42ab      	cmp	r3, r5
 8001aee:	d90a      	bls.n	8001b06 <HAL_RCC_ClockConfig+0xf6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001af0:	4a1d      	ldr	r2, [pc, #116]	; (8001b68 <HAL_RCC_ClockConfig+0x158>)
 8001af2:	6813      	ldr	r3, [r2, #0]
 8001af4:	f023 0307 	bic.w	r3, r3, #7
 8001af8:	432b      	orrs	r3, r5
 8001afa:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001afc:	6813      	ldr	r3, [r2, #0]
 8001afe:	f003 0307 	and.w	r3, r3, #7
 8001b02:	42ab      	cmp	r3, r5
 8001b04:	d12d      	bne.n	8001b62 <HAL_RCC_ClockConfig+0x152>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b06:	6823      	ldr	r3, [r4, #0]
 8001b08:	f013 0f04 	tst.w	r3, #4
 8001b0c:	d006      	beq.n	8001b1c <HAL_RCC_ClockConfig+0x10c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b0e:	4a17      	ldr	r2, [pc, #92]	; (8001b6c <HAL_RCC_ClockConfig+0x15c>)
 8001b10:	6853      	ldr	r3, [r2, #4]
 8001b12:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001b16:	68e1      	ldr	r1, [r4, #12]
 8001b18:	430b      	orrs	r3, r1
 8001b1a:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b1c:	6823      	ldr	r3, [r4, #0]
 8001b1e:	f013 0f08 	tst.w	r3, #8
 8001b22:	d007      	beq.n	8001b34 <HAL_RCC_ClockConfig+0x124>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001b24:	4a11      	ldr	r2, [pc, #68]	; (8001b6c <HAL_RCC_ClockConfig+0x15c>)
 8001b26:	6853      	ldr	r3, [r2, #4]
 8001b28:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001b2c:	6921      	ldr	r1, [r4, #16]
 8001b2e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001b32:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001b34:	f7ff ff34 	bl	80019a0 <HAL_RCC_GetSysClockFreq>
 8001b38:	4b0c      	ldr	r3, [pc, #48]	; (8001b6c <HAL_RCC_ClockConfig+0x15c>)
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001b40:	4a0b      	ldr	r2, [pc, #44]	; (8001b70 <HAL_RCC_ClockConfig+0x160>)
 8001b42:	5cd3      	ldrb	r3, [r2, r3]
 8001b44:	40d8      	lsrs	r0, r3
 8001b46:	4b0b      	ldr	r3, [pc, #44]	; (8001b74 <HAL_RCC_ClockConfig+0x164>)
 8001b48:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8001b4a:	4b0b      	ldr	r3, [pc, #44]	; (8001b78 <HAL_RCC_ClockConfig+0x168>)
 8001b4c:	6818      	ldr	r0, [r3, #0]
 8001b4e:	f7ff fa87 	bl	8001060 <HAL_InitTick>
  return HAL_OK;
 8001b52:	2000      	movs	r0, #0
}
 8001b54:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8001b56:	2001      	movs	r0, #1
}
 8001b58:	4770      	bx	lr
    return HAL_ERROR;
 8001b5a:	2001      	movs	r0, #1
 8001b5c:	e7fa      	b.n	8001b54 <HAL_RCC_ClockConfig+0x144>
        return HAL_ERROR;
 8001b5e:	2001      	movs	r0, #1
 8001b60:	e7f8      	b.n	8001b54 <HAL_RCC_ClockConfig+0x144>
    return HAL_ERROR;
 8001b62:	2001      	movs	r0, #1
 8001b64:	e7f6      	b.n	8001b54 <HAL_RCC_ClockConfig+0x144>
 8001b66:	bf00      	nop
 8001b68:	40022000 	.word	0x40022000
 8001b6c:	40021000 	.word	0x40021000
 8001b70:	080030d4 	.word	0x080030d4
 8001b74:	20000008 	.word	0x20000008
 8001b78:	20000010 	.word	0x20000010

08001b7c <HAL_RCC_GetHCLKFreq>:
}
 8001b7c:	4b01      	ldr	r3, [pc, #4]	; (8001b84 <HAL_RCC_GetHCLKFreq+0x8>)
 8001b7e:	6818      	ldr	r0, [r3, #0]
 8001b80:	4770      	bx	lr
 8001b82:	bf00      	nop
 8001b84:	20000008 	.word	0x20000008

08001b88 <HAL_RCC_GetPCLK1Freq>:
{
 8001b88:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001b8a:	f7ff fff7 	bl	8001b7c <HAL_RCC_GetHCLKFreq>
 8001b8e:	4b04      	ldr	r3, [pc, #16]	; (8001ba0 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8001b96:	4a03      	ldr	r2, [pc, #12]	; (8001ba4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001b98:	5cd3      	ldrb	r3, [r2, r3]
}
 8001b9a:	40d8      	lsrs	r0, r3
 8001b9c:	bd08      	pop	{r3, pc}
 8001b9e:	bf00      	nop
 8001ba0:	40021000 	.word	0x40021000
 8001ba4:	080030e4 	.word	0x080030e4

08001ba8 <HAL_RCC_GetPCLK2Freq>:
{
 8001ba8:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001baa:	f7ff ffe7 	bl	8001b7c <HAL_RCC_GetHCLKFreq>
 8001bae:	4b04      	ldr	r3, [pc, #16]	; (8001bc0 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8001bb6:	4a03      	ldr	r2, [pc, #12]	; (8001bc4 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001bb8:	5cd3      	ldrb	r3, [r2, r3]
}
 8001bba:	40d8      	lsrs	r0, r3
 8001bbc:	bd08      	pop	{r3, pc}
 8001bbe:	bf00      	nop
 8001bc0:	40021000 	.word	0x40021000
 8001bc4:	080030e4 	.word	0x080030e4

08001bc8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001bc8:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001bca:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001bcc:	6a04      	ldr	r4, [r0, #32]
 8001bce:	f024 0401 	bic.w	r4, r4, #1
 8001bd2:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001bd4:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001bd6:	f024 0cf0 	bic.w	ip, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001bda:	ea4c 1202 	orr.w	r2, ip, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001bde:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 8001be2:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001be4:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8001be6:	6203      	str	r3, [r0, #32]
}
 8001be8:	bc10      	pop	{r4}
 8001bea:	4770      	bx	lr

08001bec <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001bec:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001bee:	6a04      	ldr	r4, [r0, #32]
 8001bf0:	f024 0410 	bic.w	r4, r4, #16
 8001bf4:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001bf6:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8001bf8:	6a03      	ldr	r3, [r0, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001bfa:	f424 4c70 	bic.w	ip, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001bfe:	ea4c 3202 	orr.w	r2, ip, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001c02:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8001c06:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001c0a:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8001c0c:	6203      	str	r3, [r0, #32]
}
 8001c0e:	bc10      	pop	{r4}
 8001c10:	4770      	bx	lr

08001c12 <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001c12:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001c14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001c18:	430b      	orrs	r3, r1
 8001c1a:	f043 0307 	orr.w	r3, r3, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001c1e:	6083      	str	r3, [r0, #8]
}
 8001c20:	4770      	bx	lr
	...

08001c24 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8001c24:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001c28:	b2db      	uxtb	r3, r3
 8001c2a:	2b01      	cmp	r3, #1
 8001c2c:	d127      	bne.n	8001c7e <HAL_TIM_Base_Start_IT+0x5a>
  htim->State = HAL_TIM_STATE_BUSY;
 8001c2e:	2302      	movs	r3, #2
 8001c30:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001c34:	6802      	ldr	r2, [r0, #0]
 8001c36:	68d3      	ldr	r3, [r2, #12]
 8001c38:	f043 0301 	orr.w	r3, r3, #1
 8001c3c:	60d3      	str	r3, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c3e:	6803      	ldr	r3, [r0, #0]
 8001c40:	4a11      	ldr	r2, [pc, #68]	; (8001c88 <HAL_TIM_Base_Start_IT+0x64>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d010      	beq.n	8001c68 <HAL_TIM_Base_Start_IT+0x44>
 8001c46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c4a:	d00d      	beq.n	8001c68 <HAL_TIM_Base_Start_IT+0x44>
 8001c4c:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d009      	beq.n	8001c68 <HAL_TIM_Base_Start_IT+0x44>
 8001c54:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d005      	beq.n	8001c68 <HAL_TIM_Base_Start_IT+0x44>
    __HAL_TIM_ENABLE(htim);
 8001c5c:	681a      	ldr	r2, [r3, #0]
 8001c5e:	f042 0201 	orr.w	r2, r2, #1
 8001c62:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8001c64:	2000      	movs	r0, #0
 8001c66:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c68:	689a      	ldr	r2, [r3, #8]
 8001c6a:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c6e:	2a06      	cmp	r2, #6
 8001c70:	d007      	beq.n	8001c82 <HAL_TIM_Base_Start_IT+0x5e>
      __HAL_TIM_ENABLE(htim);
 8001c72:	681a      	ldr	r2, [r3, #0]
 8001c74:	f042 0201 	orr.w	r2, r2, #1
 8001c78:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8001c7a:	2000      	movs	r0, #0
 8001c7c:	4770      	bx	lr
    return HAL_ERROR;
 8001c7e:	2001      	movs	r0, #1
 8001c80:	4770      	bx	lr
  return HAL_OK;
 8001c82:	2000      	movs	r0, #0
}
 8001c84:	4770      	bx	lr
 8001c86:	bf00      	nop
 8001c88:	40012c00 	.word	0x40012c00

08001c8c <HAL_TIM_OC_DelayElapsedCallback>:
}
 8001c8c:	4770      	bx	lr

08001c8e <HAL_TIM_IC_CaptureCallback>:
}
 8001c8e:	4770      	bx	lr

08001c90 <HAL_TIM_PWM_PulseFinishedCallback>:
}
 8001c90:	4770      	bx	lr

08001c92 <HAL_TIM_TriggerCallback>:
}
 8001c92:	4770      	bx	lr

08001c94 <HAL_TIM_IRQHandler>:
{
 8001c94:	b510      	push	{r4, lr}
 8001c96:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001c98:	6803      	ldr	r3, [r0, #0]
 8001c9a:	691a      	ldr	r2, [r3, #16]
 8001c9c:	f012 0f02 	tst.w	r2, #2
 8001ca0:	d011      	beq.n	8001cc6 <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001ca2:	68da      	ldr	r2, [r3, #12]
 8001ca4:	f012 0f02 	tst.w	r2, #2
 8001ca8:	d00d      	beq.n	8001cc6 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001caa:	f06f 0202 	mvn.w	r2, #2
 8001cae:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001cb4:	6803      	ldr	r3, [r0, #0]
 8001cb6:	699b      	ldr	r3, [r3, #24]
 8001cb8:	f013 0f03 	tst.w	r3, #3
 8001cbc:	d070      	beq.n	8001da0 <HAL_TIM_IRQHandler+0x10c>
          HAL_TIM_IC_CaptureCallback(htim);
 8001cbe:	f7ff ffe6 	bl	8001c8e <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001cc6:	6823      	ldr	r3, [r4, #0]
 8001cc8:	691a      	ldr	r2, [r3, #16]
 8001cca:	f012 0f04 	tst.w	r2, #4
 8001cce:	d012      	beq.n	8001cf6 <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001cd0:	68da      	ldr	r2, [r3, #12]
 8001cd2:	f012 0f04 	tst.w	r2, #4
 8001cd6:	d00e      	beq.n	8001cf6 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001cd8:	f06f 0204 	mvn.w	r2, #4
 8001cdc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001cde:	2302      	movs	r3, #2
 8001ce0:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001ce2:	6823      	ldr	r3, [r4, #0]
 8001ce4:	699b      	ldr	r3, [r3, #24]
 8001ce6:	f413 7f40 	tst.w	r3, #768	; 0x300
 8001cea:	d05f      	beq.n	8001dac <HAL_TIM_IRQHandler+0x118>
        HAL_TIM_IC_CaptureCallback(htim);
 8001cec:	4620      	mov	r0, r4
 8001cee:	f7ff ffce 	bl	8001c8e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001cf6:	6823      	ldr	r3, [r4, #0]
 8001cf8:	691a      	ldr	r2, [r3, #16]
 8001cfa:	f012 0f08 	tst.w	r2, #8
 8001cfe:	d012      	beq.n	8001d26 <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001d00:	68da      	ldr	r2, [r3, #12]
 8001d02:	f012 0f08 	tst.w	r2, #8
 8001d06:	d00e      	beq.n	8001d26 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001d08:	f06f 0208 	mvn.w	r2, #8
 8001d0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001d0e:	2304      	movs	r3, #4
 8001d10:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001d12:	6823      	ldr	r3, [r4, #0]
 8001d14:	69db      	ldr	r3, [r3, #28]
 8001d16:	f013 0f03 	tst.w	r3, #3
 8001d1a:	d04e      	beq.n	8001dba <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 8001d1c:	4620      	mov	r0, r4
 8001d1e:	f7ff ffb6 	bl	8001c8e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d22:	2300      	movs	r3, #0
 8001d24:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001d26:	6823      	ldr	r3, [r4, #0]
 8001d28:	691a      	ldr	r2, [r3, #16]
 8001d2a:	f012 0f10 	tst.w	r2, #16
 8001d2e:	d012      	beq.n	8001d56 <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001d30:	68da      	ldr	r2, [r3, #12]
 8001d32:	f012 0f10 	tst.w	r2, #16
 8001d36:	d00e      	beq.n	8001d56 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001d38:	f06f 0210 	mvn.w	r2, #16
 8001d3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001d3e:	2308      	movs	r3, #8
 8001d40:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001d42:	6823      	ldr	r3, [r4, #0]
 8001d44:	69db      	ldr	r3, [r3, #28]
 8001d46:	f413 7f40 	tst.w	r3, #768	; 0x300
 8001d4a:	d03d      	beq.n	8001dc8 <HAL_TIM_IRQHandler+0x134>
        HAL_TIM_IC_CaptureCallback(htim);
 8001d4c:	4620      	mov	r0, r4
 8001d4e:	f7ff ff9e 	bl	8001c8e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d52:	2300      	movs	r3, #0
 8001d54:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001d56:	6823      	ldr	r3, [r4, #0]
 8001d58:	691a      	ldr	r2, [r3, #16]
 8001d5a:	f012 0f01 	tst.w	r2, #1
 8001d5e:	d003      	beq.n	8001d68 <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001d60:	68da      	ldr	r2, [r3, #12]
 8001d62:	f012 0f01 	tst.w	r2, #1
 8001d66:	d136      	bne.n	8001dd6 <HAL_TIM_IRQHandler+0x142>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001d68:	6823      	ldr	r3, [r4, #0]
 8001d6a:	691a      	ldr	r2, [r3, #16]
 8001d6c:	f012 0f80 	tst.w	r2, #128	; 0x80
 8001d70:	d003      	beq.n	8001d7a <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001d72:	68da      	ldr	r2, [r3, #12]
 8001d74:	f012 0f80 	tst.w	r2, #128	; 0x80
 8001d78:	d134      	bne.n	8001de4 <HAL_TIM_IRQHandler+0x150>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001d7a:	6823      	ldr	r3, [r4, #0]
 8001d7c:	691a      	ldr	r2, [r3, #16]
 8001d7e:	f012 0f40 	tst.w	r2, #64	; 0x40
 8001d82:	d003      	beq.n	8001d8c <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001d84:	68da      	ldr	r2, [r3, #12]
 8001d86:	f012 0f40 	tst.w	r2, #64	; 0x40
 8001d8a:	d132      	bne.n	8001df2 <HAL_TIM_IRQHandler+0x15e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001d8c:	6823      	ldr	r3, [r4, #0]
 8001d8e:	691a      	ldr	r2, [r3, #16]
 8001d90:	f012 0f20 	tst.w	r2, #32
 8001d94:	d003      	beq.n	8001d9e <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001d96:	68da      	ldr	r2, [r3, #12]
 8001d98:	f012 0f20 	tst.w	r2, #32
 8001d9c:	d130      	bne.n	8001e00 <HAL_TIM_IRQHandler+0x16c>
}
 8001d9e:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001da0:	f7ff ff74 	bl	8001c8c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001da4:	4620      	mov	r0, r4
 8001da6:	f7ff ff73 	bl	8001c90 <HAL_TIM_PWM_PulseFinishedCallback>
 8001daa:	e78a      	b.n	8001cc2 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dac:	4620      	mov	r0, r4
 8001dae:	f7ff ff6d 	bl	8001c8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001db2:	4620      	mov	r0, r4
 8001db4:	f7ff ff6c 	bl	8001c90 <HAL_TIM_PWM_PulseFinishedCallback>
 8001db8:	e79b      	b.n	8001cf2 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dba:	4620      	mov	r0, r4
 8001dbc:	f7ff ff66 	bl	8001c8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dc0:	4620      	mov	r0, r4
 8001dc2:	f7ff ff65 	bl	8001c90 <HAL_TIM_PWM_PulseFinishedCallback>
 8001dc6:	e7ac      	b.n	8001d22 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dc8:	4620      	mov	r0, r4
 8001dca:	f7ff ff5f 	bl	8001c8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dce:	4620      	mov	r0, r4
 8001dd0:	f7ff ff5e 	bl	8001c90 <HAL_TIM_PWM_PulseFinishedCallback>
 8001dd4:	e7bd      	b.n	8001d52 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001dd6:	f06f 0201 	mvn.w	r2, #1
 8001dda:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8001ddc:	4620      	mov	r0, r4
 8001dde:	f7fe fcff 	bl	80007e0 <HAL_TIM_PeriodElapsedCallback>
 8001de2:	e7c1      	b.n	8001d68 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001de4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001de8:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8001dea:	4620      	mov	r0, r4
 8001dec:	f000 f927 	bl	800203e <HAL_TIMEx_BreakCallback>
 8001df0:	e7c3      	b.n	8001d7a <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001df2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001df6:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8001df8:	4620      	mov	r0, r4
 8001dfa:	f7ff ff4a 	bl	8001c92 <HAL_TIM_TriggerCallback>
 8001dfe:	e7c5      	b.n	8001d8c <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001e00:	f06f 0220 	mvn.w	r2, #32
 8001e04:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8001e06:	4620      	mov	r0, r4
 8001e08:	f000 f918 	bl	800203c <HAL_TIMEx_CommutCallback>
}
 8001e0c:	e7c7      	b.n	8001d9e <HAL_TIM_IRQHandler+0x10a>
	...

08001e10 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8001e10:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001e12:	4a1b      	ldr	r2, [pc, #108]	; (8001e80 <TIM_Base_SetConfig+0x70>)
 8001e14:	4290      	cmp	r0, r2
 8001e16:	d00a      	beq.n	8001e2e <TIM_Base_SetConfig+0x1e>
 8001e18:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001e1c:	d007      	beq.n	8001e2e <TIM_Base_SetConfig+0x1e>
 8001e1e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001e22:	4290      	cmp	r0, r2
 8001e24:	d003      	beq.n	8001e2e <TIM_Base_SetConfig+0x1e>
 8001e26:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001e2a:	4290      	cmp	r0, r2
 8001e2c:	d103      	bne.n	8001e36 <TIM_Base_SetConfig+0x26>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001e2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001e32:	684a      	ldr	r2, [r1, #4]
 8001e34:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001e36:	4a12      	ldr	r2, [pc, #72]	; (8001e80 <TIM_Base_SetConfig+0x70>)
 8001e38:	4290      	cmp	r0, r2
 8001e3a:	d00a      	beq.n	8001e52 <TIM_Base_SetConfig+0x42>
 8001e3c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001e40:	d007      	beq.n	8001e52 <TIM_Base_SetConfig+0x42>
 8001e42:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001e46:	4290      	cmp	r0, r2
 8001e48:	d003      	beq.n	8001e52 <TIM_Base_SetConfig+0x42>
 8001e4a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001e4e:	4290      	cmp	r0, r2
 8001e50:	d103      	bne.n	8001e5a <TIM_Base_SetConfig+0x4a>
    tmpcr1 &= ~TIM_CR1_CKD;
 8001e52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001e56:	68ca      	ldr	r2, [r1, #12]
 8001e58:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001e5a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001e5e:	694a      	ldr	r2, [r1, #20]
 8001e60:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8001e62:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001e64:	688b      	ldr	r3, [r1, #8]
 8001e66:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8001e68:	680b      	ldr	r3, [r1, #0]
 8001e6a:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001e6c:	4b04      	ldr	r3, [pc, #16]	; (8001e80 <TIM_Base_SetConfig+0x70>)
 8001e6e:	4298      	cmp	r0, r3
 8001e70:	d002      	beq.n	8001e78 <TIM_Base_SetConfig+0x68>
  TIMx->EGR = TIM_EGR_UG;
 8001e72:	2301      	movs	r3, #1
 8001e74:	6143      	str	r3, [r0, #20]
}
 8001e76:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 8001e78:	690b      	ldr	r3, [r1, #16]
 8001e7a:	6303      	str	r3, [r0, #48]	; 0x30
 8001e7c:	e7f9      	b.n	8001e72 <TIM_Base_SetConfig+0x62>
 8001e7e:	bf00      	nop
 8001e80:	40012c00 	.word	0x40012c00

08001e84 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8001e84:	b340      	cbz	r0, 8001ed8 <HAL_TIM_Base_Init+0x54>
{
 8001e86:	b510      	push	{r4, lr}
 8001e88:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8001e8a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001e8e:	b1f3      	cbz	r3, 8001ece <HAL_TIM_Base_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8001e90:	2302      	movs	r3, #2
 8001e92:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e96:	4621      	mov	r1, r4
 8001e98:	f851 0b04 	ldr.w	r0, [r1], #4
 8001e9c:	f7ff ffb8 	bl	8001e10 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ea6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8001eaa:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8001eae:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8001eb2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001eb6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001eba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001ebe:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8001ec2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8001ec6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8001eca:	2000      	movs	r0, #0
}
 8001ecc:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8001ece:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8001ed2:	f7fe ff8b 	bl	8000dec <HAL_TIM_Base_MspInit>
 8001ed6:	e7db      	b.n	8001e90 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8001ed8:	2001      	movs	r0, #1
}
 8001eda:	4770      	bx	lr

08001edc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001edc:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001ede:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001ee0:	f424 4c7f 	bic.w	ip, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001ee4:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8001ee8:	430a      	orrs	r2, r1
 8001eea:	ea42 020c 	orr.w	r2, r2, ip

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001eee:	6082      	str	r2, [r0, #8]
}
 8001ef0:	bc10      	pop	{r4}
 8001ef2:	4770      	bx	lr

08001ef4 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8001ef4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001ef8:	2b01      	cmp	r3, #1
 8001efa:	d066      	beq.n	8001fca <HAL_TIM_ConfigClockSource+0xd6>
{
 8001efc:	b510      	push	{r4, lr}
 8001efe:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8001f00:	2301      	movs	r3, #1
 8001f02:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8001f06:	2302      	movs	r3, #2
 8001f08:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8001f0c:	6802      	ldr	r2, [r0, #0]
 8001f0e:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001f10:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001f14:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8001f18:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8001f1a:	680b      	ldr	r3, [r1, #0]
 8001f1c:	2b60      	cmp	r3, #96	; 0x60
 8001f1e:	d040      	beq.n	8001fa2 <HAL_TIM_ConfigClockSource+0xae>
 8001f20:	d822      	bhi.n	8001f68 <HAL_TIM_ConfigClockSource+0x74>
 8001f22:	2b40      	cmp	r3, #64	; 0x40
 8001f24:	d047      	beq.n	8001fb6 <HAL_TIM_ConfigClockSource+0xc2>
 8001f26:	d90b      	bls.n	8001f40 <HAL_TIM_ConfigClockSource+0x4c>
 8001f28:	2b50      	cmp	r3, #80	; 0x50
 8001f2a:	d10e      	bne.n	8001f4a <HAL_TIM_ConfigClockSource+0x56>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001f2c:	68ca      	ldr	r2, [r1, #12]
 8001f2e:	6849      	ldr	r1, [r1, #4]
 8001f30:	6800      	ldr	r0, [r0, #0]
 8001f32:	f7ff fe49 	bl	8001bc8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001f36:	2150      	movs	r1, #80	; 0x50
 8001f38:	6820      	ldr	r0, [r4, #0]
 8001f3a:	f7ff fe6a 	bl	8001c12 <TIM_ITRx_SetConfig>
      break;
 8001f3e:	e004      	b.n	8001f4a <HAL_TIM_ConfigClockSource+0x56>
  switch (sClockSourceConfig->ClockSource)
 8001f40:	2b20      	cmp	r3, #32
 8001f42:	d00c      	beq.n	8001f5e <HAL_TIM_ConfigClockSource+0x6a>
 8001f44:	d908      	bls.n	8001f58 <HAL_TIM_ConfigClockSource+0x64>
 8001f46:	2b30      	cmp	r3, #48	; 0x30
 8001f48:	d009      	beq.n	8001f5e <HAL_TIM_ConfigClockSource+0x6a>
  htim->State = HAL_TIM_STATE_READY;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8001f50:	2000      	movs	r0, #0
 8001f52:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8001f56:	bd10      	pop	{r4, pc}
  switch (sClockSourceConfig->ClockSource)
 8001f58:	b10b      	cbz	r3, 8001f5e <HAL_TIM_ConfigClockSource+0x6a>
 8001f5a:	2b10      	cmp	r3, #16
 8001f5c:	d1f5      	bne.n	8001f4a <HAL_TIM_ConfigClockSource+0x56>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001f5e:	4619      	mov	r1, r3
 8001f60:	6820      	ldr	r0, [r4, #0]
 8001f62:	f7ff fe56 	bl	8001c12 <TIM_ITRx_SetConfig>
        break;
 8001f66:	e7f0      	b.n	8001f4a <HAL_TIM_ConfigClockSource+0x56>
  switch (sClockSourceConfig->ClockSource)
 8001f68:	2b70      	cmp	r3, #112	; 0x70
 8001f6a:	d00e      	beq.n	8001f8a <HAL_TIM_ConfigClockSource+0x96>
 8001f6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f70:	d1eb      	bne.n	8001f4a <HAL_TIM_ConfigClockSource+0x56>
      TIM_ETR_SetConfig(htim->Instance,
 8001f72:	68cb      	ldr	r3, [r1, #12]
 8001f74:	684a      	ldr	r2, [r1, #4]
 8001f76:	6889      	ldr	r1, [r1, #8]
 8001f78:	6800      	ldr	r0, [r0, #0]
 8001f7a:	f7ff ffaf 	bl	8001edc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001f7e:	6822      	ldr	r2, [r4, #0]
 8001f80:	6893      	ldr	r3, [r2, #8]
 8001f82:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f86:	6093      	str	r3, [r2, #8]
      break;
 8001f88:	e7df      	b.n	8001f4a <HAL_TIM_ConfigClockSource+0x56>
      TIM_ETR_SetConfig(htim->Instance,
 8001f8a:	68cb      	ldr	r3, [r1, #12]
 8001f8c:	684a      	ldr	r2, [r1, #4]
 8001f8e:	6889      	ldr	r1, [r1, #8]
 8001f90:	6800      	ldr	r0, [r0, #0]
 8001f92:	f7ff ffa3 	bl	8001edc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001f96:	6822      	ldr	r2, [r4, #0]
 8001f98:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001f9a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8001f9e:	6093      	str	r3, [r2, #8]
      break;
 8001fa0:	e7d3      	b.n	8001f4a <HAL_TIM_ConfigClockSource+0x56>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001fa2:	68ca      	ldr	r2, [r1, #12]
 8001fa4:	6849      	ldr	r1, [r1, #4]
 8001fa6:	6800      	ldr	r0, [r0, #0]
 8001fa8:	f7ff fe20 	bl	8001bec <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001fac:	2160      	movs	r1, #96	; 0x60
 8001fae:	6820      	ldr	r0, [r4, #0]
 8001fb0:	f7ff fe2f 	bl	8001c12 <TIM_ITRx_SetConfig>
      break;
 8001fb4:	e7c9      	b.n	8001f4a <HAL_TIM_ConfigClockSource+0x56>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001fb6:	68ca      	ldr	r2, [r1, #12]
 8001fb8:	6849      	ldr	r1, [r1, #4]
 8001fba:	6800      	ldr	r0, [r0, #0]
 8001fbc:	f7ff fe04 	bl	8001bc8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001fc0:	2140      	movs	r1, #64	; 0x40
 8001fc2:	6820      	ldr	r0, [r4, #0]
 8001fc4:	f7ff fe25 	bl	8001c12 <TIM_ITRx_SetConfig>
      break;
 8001fc8:	e7bf      	b.n	8001f4a <HAL_TIM_ConfigClockSource+0x56>
  __HAL_LOCK(htim);
 8001fca:	2002      	movs	r0, #2
}
 8001fcc:	4770      	bx	lr
	...

08001fd0 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001fd0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001fd4:	2b01      	cmp	r3, #1
 8001fd6:	d02c      	beq.n	8002032 <HAL_TIMEx_MasterConfigSynchronization+0x62>
{
 8001fd8:	b410      	push	{r4}
  __HAL_LOCK(htim);
 8001fda:	2301      	movs	r3, #1
 8001fdc:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fe0:	2302      	movs	r3, #2
 8001fe2:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001fe6:	6803      	ldr	r3, [r0, #0]
 8001fe8:	685a      	ldr	r2, [r3, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001fea:	689c      	ldr	r4, [r3, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001fec:	f022 0c70 	bic.w	ip, r2, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001ff0:	680a      	ldr	r2, [r1, #0]
 8001ff2:	ea42 020c 	orr.w	r2, r2, ip

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001ff6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001ff8:	6803      	ldr	r3, [r0, #0]
 8001ffa:	4a0f      	ldr	r2, [pc, #60]	; (8002038 <HAL_TIMEx_MasterConfigSynchronization+0x68>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d00a      	beq.n	8002016 <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8002000:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002004:	d007      	beq.n	8002016 <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8002006:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800200a:	4293      	cmp	r3, r2
 800200c:	d003      	beq.n	8002016 <HAL_TIMEx_MasterConfigSynchronization+0x46>
 800200e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002012:	4293      	cmp	r3, r2
 8002014:	d104      	bne.n	8002020 <HAL_TIMEx_MasterConfigSynchronization+0x50>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002016:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800201a:	684a      	ldr	r2, [r1, #4]
 800201c:	4314      	orrs	r4, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800201e:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002020:	2301      	movs	r3, #1
 8002022:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002026:	2300      	movs	r3, #0
 8002028:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 800202c:	4618      	mov	r0, r3
}
 800202e:	bc10      	pop	{r4}
 8002030:	4770      	bx	lr
  __HAL_LOCK(htim);
 8002032:	2002      	movs	r0, #2
}
 8002034:	4770      	bx	lr
 8002036:	bf00      	nop
 8002038:	40012c00 	.word	0x40012c00

0800203c <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800203c:	4770      	bx	lr

0800203e <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800203e:	4770      	bx	lr

08002040 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002040:	6802      	ldr	r2, [r0, #0]
 8002042:	68d3      	ldr	r3, [r2, #12]
 8002044:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002048:	60d3      	str	r3, [r2, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800204a:	6802      	ldr	r2, [r0, #0]
 800204c:	6953      	ldr	r3, [r2, #20]
 800204e:	f023 0301 	bic.w	r3, r3, #1
 8002052:	6153      	str	r3, [r2, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002054:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8002056:	2b01      	cmp	r3, #1
 8002058:	d005      	beq.n	8002066 <UART_EndRxTransfer+0x26>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800205a:	2320      	movs	r3, #32
 800205c:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002060:	2300      	movs	r3, #0
 8002062:	6303      	str	r3, [r0, #48]	; 0x30
}
 8002064:	4770      	bx	lr
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002066:	6802      	ldr	r2, [r0, #0]
 8002068:	68d3      	ldr	r3, [r2, #12]
 800206a:	f023 0310 	bic.w	r3, r3, #16
 800206e:	60d3      	str	r3, [r2, #12]
 8002070:	e7f3      	b.n	800205a <UART_EndRxTransfer+0x1a>

08002072 <UART_Transmit_IT>:
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002072:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002076:	b2db      	uxtb	r3, r3
 8002078:	2b21      	cmp	r3, #33	; 0x21
 800207a:	d001      	beq.n	8002080 <UART_Transmit_IT+0xe>
    }
    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 800207c:	2002      	movs	r0, #2
  }
}
 800207e:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002080:	6883      	ldr	r3, [r0, #8]
 8002082:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002086:	d017      	beq.n	80020b8 <UART_Transmit_IT+0x46>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002088:	6a03      	ldr	r3, [r0, #32]
 800208a:	1c5a      	adds	r2, r3, #1
 800208c:	6202      	str	r2, [r0, #32]
 800208e:	781a      	ldrb	r2, [r3, #0]
 8002090:	6803      	ldr	r3, [r0, #0]
 8002092:	605a      	str	r2, [r3, #4]
    if (--huart->TxXferCount == 0U)
 8002094:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
 8002096:	b29b      	uxth	r3, r3
 8002098:	3b01      	subs	r3, #1
 800209a:	b29b      	uxth	r3, r3
 800209c:	84c3      	strh	r3, [r0, #38]	; 0x26
 800209e:	b94b      	cbnz	r3, 80020b4 <UART_Transmit_IT+0x42>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80020a0:	6802      	ldr	r2, [r0, #0]
 80020a2:	68d3      	ldr	r3, [r2, #12]
 80020a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80020a8:	60d3      	str	r3, [r2, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80020aa:	6802      	ldr	r2, [r0, #0]
 80020ac:	68d3      	ldr	r3, [r2, #12]
 80020ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80020b2:	60d3      	str	r3, [r2, #12]
    return HAL_OK;
 80020b4:	2000      	movs	r0, #0
 80020b6:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80020b8:	6903      	ldr	r3, [r0, #16]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d1e4      	bne.n	8002088 <UART_Transmit_IT+0x16>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80020be:	6a03      	ldr	r3, [r0, #32]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80020c0:	881b      	ldrh	r3, [r3, #0]
 80020c2:	6802      	ldr	r2, [r0, #0]
 80020c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80020c8:	6053      	str	r3, [r2, #4]
      huart->pTxBuffPtr += 2U;
 80020ca:	6a03      	ldr	r3, [r0, #32]
 80020cc:	3302      	adds	r3, #2
 80020ce:	6203      	str	r3, [r0, #32]
 80020d0:	e7e0      	b.n	8002094 <UART_Transmit_IT+0x22>
	...

080020d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80020d4:	b510      	push	{r4, lr}
 80020d6:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80020d8:	6802      	ldr	r2, [r0, #0]
 80020da:	6913      	ldr	r3, [r2, #16]
 80020dc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80020e0:	68c1      	ldr	r1, [r0, #12]
 80020e2:	430b      	orrs	r3, r1
 80020e4:	6113      	str	r3, [r2, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80020e6:	6883      	ldr	r3, [r0, #8]
 80020e8:	6902      	ldr	r2, [r0, #16]
 80020ea:	4313      	orrs	r3, r2
 80020ec:	6942      	ldr	r2, [r0, #20]
 80020ee:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 80020f0:	6801      	ldr	r1, [r0, #0]
 80020f2:	68cb      	ldr	r3, [r1, #12]
 80020f4:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80020f8:	f023 030c 	bic.w	r3, r3, #12
 80020fc:	4313      	orrs	r3, r2
 80020fe:	60cb      	str	r3, [r1, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002100:	6802      	ldr	r2, [r0, #0]
 8002102:	6953      	ldr	r3, [r2, #20]
 8002104:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002108:	6981      	ldr	r1, [r0, #24]
 800210a:	430b      	orrs	r3, r1
 800210c:	6153      	str	r3, [r2, #20]


  if(huart->Instance == USART1)
 800210e:	6802      	ldr	r2, [r0, #0]
 8002110:	4b13      	ldr	r3, [pc, #76]	; (8002160 <UART_SetConfig+0x8c>)
 8002112:	429a      	cmp	r2, r3
 8002114:	d020      	beq.n	8002158 <UART_SetConfig+0x84>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002116:	f7ff fd37 	bl	8001b88 <HAL_RCC_GetPCLK1Freq>
 800211a:	4602      	mov	r2, r0
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800211c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002120:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002124:	6863      	ldr	r3, [r4, #4]
 8002126:	009b      	lsls	r3, r3, #2
 8002128:	fbb2 f2f3 	udiv	r2, r2, r3
 800212c:	480d      	ldr	r0, [pc, #52]	; (8002164 <UART_SetConfig+0x90>)
 800212e:	fba0 3102 	umull	r3, r1, r0, r2
 8002132:	0949      	lsrs	r1, r1, #5
 8002134:	2364      	movs	r3, #100	; 0x64
 8002136:	fb03 2311 	mls	r3, r3, r1, r2
 800213a:	011b      	lsls	r3, r3, #4
 800213c:	3332      	adds	r3, #50	; 0x32
 800213e:	fba0 2303 	umull	r2, r3, r0, r3
 8002142:	095b      	lsrs	r3, r3, #5
 8002144:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002148:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800214c:	f003 030f 	and.w	r3, r3, #15
 8002150:	6821      	ldr	r1, [r4, #0]
 8002152:	4413      	add	r3, r2
 8002154:	608b      	str	r3, [r1, #8]
#endif /* USART_CR1_OVER8 */
}
 8002156:	bd10      	pop	{r4, pc}
    pclk = HAL_RCC_GetPCLK2Freq();
 8002158:	f7ff fd26 	bl	8001ba8 <HAL_RCC_GetPCLK2Freq>
 800215c:	4602      	mov	r2, r0
 800215e:	e7dd      	b.n	800211c <UART_SetConfig+0x48>
 8002160:	40013800 	.word	0x40013800
 8002164:	51eb851f 	.word	0x51eb851f

08002168 <UART_WaitOnFlagUntilTimeout>:
{
 8002168:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800216c:	4605      	mov	r5, r0
 800216e:	460f      	mov	r7, r1
 8002170:	4616      	mov	r6, r2
 8002172:	4699      	mov	r9, r3
 8002174:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002178:	682c      	ldr	r4, [r5, #0]
 800217a:	6824      	ldr	r4, [r4, #0]
 800217c:	ea37 0304 	bics.w	r3, r7, r4
 8002180:	bf0c      	ite	eq
 8002182:	f04f 0c01 	moveq.w	ip, #1
 8002186:	f04f 0c00 	movne.w	ip, #0
 800218a:	45b4      	cmp	ip, r6
 800218c:	d11f      	bne.n	80021ce <UART_WaitOnFlagUntilTimeout+0x66>
    if (Timeout != HAL_MAX_DELAY)
 800218e:	f1b8 3fff 	cmp.w	r8, #4294967295
 8002192:	d0f1      	beq.n	8002178 <UART_WaitOnFlagUntilTimeout+0x10>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002194:	f1b8 0f00 	cmp.w	r8, #0
 8002198:	d005      	beq.n	80021a6 <UART_WaitOnFlagUntilTimeout+0x3e>
 800219a:	f7fe ffa5 	bl	80010e8 <HAL_GetTick>
 800219e:	eba0 0009 	sub.w	r0, r0, r9
 80021a2:	4540      	cmp	r0, r8
 80021a4:	d9e8      	bls.n	8002178 <UART_WaitOnFlagUntilTimeout+0x10>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80021a6:	682a      	ldr	r2, [r5, #0]
 80021a8:	68d3      	ldr	r3, [r2, #12]
 80021aa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80021ae:	60d3      	str	r3, [r2, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80021b0:	682a      	ldr	r2, [r5, #0]
 80021b2:	6953      	ldr	r3, [r2, #20]
 80021b4:	f023 0301 	bic.w	r3, r3, #1
 80021b8:	6153      	str	r3, [r2, #20]
        huart->gState  = HAL_UART_STATE_READY;
 80021ba:	2320      	movs	r3, #32
 80021bc:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80021c0:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
        __HAL_UNLOCK(huart);
 80021c4:	2300      	movs	r3, #0
 80021c6:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
        return HAL_TIMEOUT;
 80021ca:	2003      	movs	r0, #3
 80021cc:	e000      	b.n	80021d0 <UART_WaitOnFlagUntilTimeout+0x68>
  return HAL_OK;
 80021ce:	2000      	movs	r0, #0
}
 80021d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080021d4 <HAL_UART_Init>:
  if (huart == NULL)
 80021d4:	b358      	cbz	r0, 800222e <HAL_UART_Init+0x5a>
{
 80021d6:	b510      	push	{r4, lr}
 80021d8:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 80021da:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80021de:	b30b      	cbz	r3, 8002224 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 80021e0:	2324      	movs	r3, #36	; 0x24
 80021e2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 80021e6:	6822      	ldr	r2, [r4, #0]
 80021e8:	68d3      	ldr	r3, [r2, #12]
 80021ea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80021ee:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80021f0:	4620      	mov	r0, r4
 80021f2:	f7ff ff6f 	bl	80020d4 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80021f6:	6822      	ldr	r2, [r4, #0]
 80021f8:	6913      	ldr	r3, [r2, #16]
 80021fa:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80021fe:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002200:	6822      	ldr	r2, [r4, #0]
 8002202:	6953      	ldr	r3, [r2, #20]
 8002204:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8002208:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 800220a:	6822      	ldr	r2, [r4, #0]
 800220c:	68d3      	ldr	r3, [r2, #12]
 800220e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002212:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002214:	2000      	movs	r0, #0
 8002216:	6420      	str	r0, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002218:	2320      	movs	r3, #32
 800221a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800221e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 8002222:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8002224:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 8002228:	f7fe fdfe 	bl	8000e28 <HAL_UART_MspInit>
 800222c:	e7d8      	b.n	80021e0 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 800222e:	2001      	movs	r0, #1
}
 8002230:	4770      	bx	lr

08002232 <HAL_UART_Transmit>:
{
 8002232:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002236:	b082      	sub	sp, #8
 8002238:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 800223a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800223e:	b2db      	uxtb	r3, r3
 8002240:	2b20      	cmp	r3, #32
 8002242:	d154      	bne.n	80022ee <HAL_UART_Transmit+0xbc>
 8002244:	4604      	mov	r4, r0
 8002246:	460d      	mov	r5, r1
 8002248:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 800224a:	2900      	cmp	r1, #0
 800224c:	d053      	beq.n	80022f6 <HAL_UART_Transmit+0xc4>
 800224e:	2a00      	cmp	r2, #0
 8002250:	d053      	beq.n	80022fa <HAL_UART_Transmit+0xc8>
    __HAL_LOCK(huart);
 8002252:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002256:	2b01      	cmp	r3, #1
 8002258:	d051      	beq.n	80022fe <HAL_UART_Transmit+0xcc>
 800225a:	2301      	movs	r3, #1
 800225c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002260:	2300      	movs	r3, #0
 8002262:	6403      	str	r3, [r0, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002264:	2321      	movs	r3, #33	; 0x21
 8002266:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    tickstart = HAL_GetTick();
 800226a:	f7fe ff3d 	bl	80010e8 <HAL_GetTick>
 800226e:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 8002270:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 8002274:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002278:	68a3      	ldr	r3, [r4, #8]
 800227a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800227e:	d005      	beq.n	800228c <HAL_UART_Transmit+0x5a>
      pdata16bits = NULL;
 8002280:	f04f 0800 	mov.w	r8, #0
    __HAL_UNLOCK(huart);
 8002284:	2300      	movs	r3, #0
 8002286:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    while (huart->TxXferCount > 0U)
 800228a:	e012      	b.n	80022b2 <HAL_UART_Transmit+0x80>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800228c:	6923      	ldr	r3, [r4, #16]
 800228e:	b113      	cbz	r3, 8002296 <HAL_UART_Transmit+0x64>
      pdata16bits = NULL;
 8002290:	f04f 0800 	mov.w	r8, #0
 8002294:	e7f6      	b.n	8002284 <HAL_UART_Transmit+0x52>
      pdata16bits = (uint16_t *) pData;
 8002296:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 8002298:	2500      	movs	r5, #0
 800229a:	e7f3      	b.n	8002284 <HAL_UART_Transmit+0x52>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800229c:	f838 3b02 	ldrh.w	r3, [r8], #2
 80022a0:	6822      	ldr	r2, [r4, #0]
 80022a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80022a6:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 80022a8:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 80022aa:	b292      	uxth	r2, r2
 80022ac:	3a01      	subs	r2, #1
 80022ae:	b292      	uxth	r2, r2
 80022b0:	84e2      	strh	r2, [r4, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80022b2:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80022b4:	b29b      	uxth	r3, r3
 80022b6:	b173      	cbz	r3, 80022d6 <HAL_UART_Transmit+0xa4>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80022b8:	9600      	str	r6, [sp, #0]
 80022ba:	463b      	mov	r3, r7
 80022bc:	2200      	movs	r2, #0
 80022be:	2180      	movs	r1, #128	; 0x80
 80022c0:	4620      	mov	r0, r4
 80022c2:	f7ff ff51 	bl	8002168 <UART_WaitOnFlagUntilTimeout>
 80022c6:	b9e0      	cbnz	r0, 8002302 <HAL_UART_Transmit+0xd0>
      if (pdata8bits == NULL)
 80022c8:	2d00      	cmp	r5, #0
 80022ca:	d0e7      	beq.n	800229c <HAL_UART_Transmit+0x6a>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80022cc:	f815 2b01 	ldrb.w	r2, [r5], #1
 80022d0:	6823      	ldr	r3, [r4, #0]
 80022d2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80022d4:	e7e8      	b.n	80022a8 <HAL_UART_Transmit+0x76>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80022d6:	9600      	str	r6, [sp, #0]
 80022d8:	463b      	mov	r3, r7
 80022da:	2200      	movs	r2, #0
 80022dc:	2140      	movs	r1, #64	; 0x40
 80022de:	4620      	mov	r0, r4
 80022e0:	f7ff ff42 	bl	8002168 <UART_WaitOnFlagUntilTimeout>
 80022e4:	b978      	cbnz	r0, 8002306 <HAL_UART_Transmit+0xd4>
    huart->gState = HAL_UART_STATE_READY;
 80022e6:	2320      	movs	r3, #32
 80022e8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    return HAL_OK;
 80022ec:	e000      	b.n	80022f0 <HAL_UART_Transmit+0xbe>
    return HAL_BUSY;
 80022ee:	2002      	movs	r0, #2
}
 80022f0:	b002      	add	sp, #8
 80022f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 80022f6:	2001      	movs	r0, #1
 80022f8:	e7fa      	b.n	80022f0 <HAL_UART_Transmit+0xbe>
 80022fa:	2001      	movs	r0, #1
 80022fc:	e7f8      	b.n	80022f0 <HAL_UART_Transmit+0xbe>
    __HAL_LOCK(huart);
 80022fe:	2002      	movs	r0, #2
 8002300:	e7f6      	b.n	80022f0 <HAL_UART_Transmit+0xbe>
        return HAL_TIMEOUT;
 8002302:	2003      	movs	r0, #3
 8002304:	e7f4      	b.n	80022f0 <HAL_UART_Transmit+0xbe>
      return HAL_TIMEOUT;
 8002306:	2003      	movs	r0, #3
 8002308:	e7f2      	b.n	80022f0 <HAL_UART_Transmit+0xbe>

0800230a <HAL_UART_TxCpltCallback>:
}
 800230a:	4770      	bx	lr

0800230c <UART_EndTransmit_IT>:
{
 800230c:	b508      	push	{r3, lr}
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800230e:	6801      	ldr	r1, [r0, #0]
 8002310:	68ca      	ldr	r2, [r1, #12]
 8002312:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002316:	60ca      	str	r2, [r1, #12]
  huart->gState = HAL_UART_STATE_READY;
 8002318:	2220      	movs	r2, #32
 800231a:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  HAL_UART_TxCpltCallback(huart);
 800231e:	f7ff fff4 	bl	800230a <HAL_UART_TxCpltCallback>
}
 8002322:	2000      	movs	r0, #0
 8002324:	bd08      	pop	{r3, pc}

08002326 <HAL_UART_ErrorCallback>:
}
 8002326:	4770      	bx	lr

08002328 <UART_DMAAbortOnError>:
{
 8002328:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800232a:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 800232c:	2300      	movs	r3, #0
 800232e:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002330:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8002332:	f7ff fff8 	bl	8002326 <HAL_UART_ErrorCallback>
}
 8002336:	bd08      	pop	{r3, pc}

08002338 <HAL_UARTEx_RxEventCallback>:
}
 8002338:	4770      	bx	lr

0800233a <UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800233a:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 800233e:	b2db      	uxtb	r3, r3
 8002340:	2b22      	cmp	r3, #34	; 0x22
 8002342:	d160      	bne.n	8002406 <UART_Receive_IT+0xcc>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002344:	6883      	ldr	r3, [r0, #8]
 8002346:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800234a:	d046      	beq.n	80023da <UART_Receive_IT+0xa0>
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800234c:	6a82      	ldr	r2, [r0, #40]	; 0x28
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800234e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002352:	d004      	beq.n	800235e <UART_Receive_IT+0x24>
 8002354:	2b00      	cmp	r3, #0
 8002356:	d14d      	bne.n	80023f4 <UART_Receive_IT+0xba>
 8002358:	6903      	ldr	r3, [r0, #16]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d14a      	bne.n	80023f4 <UART_Receive_IT+0xba>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800235e:	6803      	ldr	r3, [r0, #0]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr += 1U;
 8002364:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002366:	3301      	adds	r3, #1
 8002368:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 800236a:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 800236c:	b29b      	uxth	r3, r3
 800236e:	3b01      	subs	r3, #1
 8002370:	b29b      	uxth	r3, r3
 8002372:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8002374:	2b00      	cmp	r3, #0
 8002376:	d148      	bne.n	800240a <UART_Receive_IT+0xd0>
{
 8002378:	b500      	push	{lr}
 800237a:	b083      	sub	sp, #12
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800237c:	6802      	ldr	r2, [r0, #0]
 800237e:	68d3      	ldr	r3, [r2, #12]
 8002380:	f023 0320 	bic.w	r3, r3, #32
 8002384:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002386:	6802      	ldr	r2, [r0, #0]
 8002388:	68d3      	ldr	r3, [r2, #12]
 800238a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800238e:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002390:	6802      	ldr	r2, [r0, #0]
 8002392:	6953      	ldr	r3, [r2, #20]
 8002394:	f023 0301 	bic.w	r3, r3, #1
 8002398:	6153      	str	r3, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 800239a:	2320      	movs	r3, #32
 800239c:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80023a0:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80023a2:	2b01      	cmp	r3, #1
 80023a4:	d12c      	bne.n	8002400 <UART_Receive_IT+0xc6>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80023a6:	2300      	movs	r3, #0
 80023a8:	6303      	str	r3, [r0, #48]	; 0x30
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80023aa:	6802      	ldr	r2, [r0, #0]
 80023ac:	68d3      	ldr	r3, [r2, #12]
 80023ae:	f023 0310 	bic.w	r3, r3, #16
 80023b2:	60d3      	str	r3, [r2, #12]
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80023b4:	6803      	ldr	r3, [r0, #0]
 80023b6:	681a      	ldr	r2, [r3, #0]
 80023b8:	f012 0f10 	tst.w	r2, #16
 80023bc:	d006      	beq.n	80023cc <UART_Receive_IT+0x92>
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80023be:	2200      	movs	r2, #0
 80023c0:	9201      	str	r2, [sp, #4]
 80023c2:	681a      	ldr	r2, [r3, #0]
 80023c4:	9201      	str	r2, [sp, #4]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	9301      	str	r3, [sp, #4]
 80023ca:	9b01      	ldr	r3, [sp, #4]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80023cc:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 80023ce:	f7ff ffb3 	bl	8002338 <HAL_UARTEx_RxEventCallback>
      return HAL_OK;
 80023d2:	2000      	movs	r0, #0
}
 80023d4:	b003      	add	sp, #12
 80023d6:	f85d fb04 	ldr.w	pc, [sp], #4
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80023da:	6902      	ldr	r2, [r0, #16]
 80023dc:	2a00      	cmp	r2, #0
 80023de:	d1b5      	bne.n	800234c <UART_Receive_IT+0x12>
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80023e0:	6a82      	ldr	r2, [r0, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80023e2:	6803      	ldr	r3, [r0, #0]
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023ea:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr += 2U;
 80023ec:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80023ee:	3302      	adds	r3, #2
 80023f0:	6283      	str	r3, [r0, #40]	; 0x28
 80023f2:	e7ba      	b.n	800236a <UART_Receive_IT+0x30>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80023f4:	6803      	ldr	r3, [r0, #0]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80023fc:	7013      	strb	r3, [r2, #0]
 80023fe:	e7b1      	b.n	8002364 <UART_Receive_IT+0x2a>
       HAL_UART_RxCpltCallback(huart);
 8002400:	f7fe f904 	bl	800060c <HAL_UART_RxCpltCallback>
 8002404:	e7e5      	b.n	80023d2 <UART_Receive_IT+0x98>
    return HAL_BUSY;
 8002406:	2002      	movs	r0, #2
 8002408:	4770      	bx	lr
    return HAL_OK;
 800240a:	2000      	movs	r0, #0
}
 800240c:	4770      	bx	lr
	...

08002410 <HAL_UART_IRQHandler>:
{
 8002410:	b530      	push	{r4, r5, lr}
 8002412:	b083      	sub	sp, #12
 8002414:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002416:	6802      	ldr	r2, [r0, #0]
 8002418:	6813      	ldr	r3, [r2, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800241a:	68d0      	ldr	r0, [r2, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800241c:	6951      	ldr	r1, [r2, #20]
  if (errorflags == RESET)
 800241e:	f013 050f 	ands.w	r5, r3, #15
 8002422:	d105      	bne.n	8002430 <HAL_UART_IRQHandler+0x20>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002424:	f013 0f20 	tst.w	r3, #32
 8002428:	d002      	beq.n	8002430 <HAL_UART_IRQHandler+0x20>
 800242a:	f010 0f20 	tst.w	r0, #32
 800242e:	d119      	bne.n	8002464 <HAL_UART_IRQHandler+0x54>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002430:	b12d      	cbz	r5, 800243e <HAL_UART_IRQHandler+0x2e>
 8002432:	f011 0101 	ands.w	r1, r1, #1
 8002436:	d119      	bne.n	800246c <HAL_UART_IRQHandler+0x5c>
 8002438:	f410 7f90 	tst.w	r0, #288	; 0x120
 800243c:	d116      	bne.n	800246c <HAL_UART_IRQHandler+0x5c>
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800243e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8002440:	2901      	cmp	r1, #1
 8002442:	d075      	beq.n	8002530 <HAL_UART_IRQHandler+0x120>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002444:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002448:	d003      	beq.n	8002452 <HAL_UART_IRQHandler+0x42>
 800244a:	f010 0f80 	tst.w	r0, #128	; 0x80
 800244e:	f040 80d7 	bne.w	8002600 <HAL_UART_IRQHandler+0x1f0>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002452:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002456:	d003      	beq.n	8002460 <HAL_UART_IRQHandler+0x50>
 8002458:	f010 0f40 	tst.w	r0, #64	; 0x40
 800245c:	f040 80d4 	bne.w	8002608 <HAL_UART_IRQHandler+0x1f8>
}
 8002460:	b003      	add	sp, #12
 8002462:	bd30      	pop	{r4, r5, pc}
      UART_Receive_IT(huart);
 8002464:	4620      	mov	r0, r4
 8002466:	f7ff ff68 	bl	800233a <UART_Receive_IT>
      return;
 800246a:	e7f9      	b.n	8002460 <HAL_UART_IRQHandler+0x50>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800246c:	f013 0f01 	tst.w	r3, #1
 8002470:	d006      	beq.n	8002480 <HAL_UART_IRQHandler+0x70>
 8002472:	f410 7f80 	tst.w	r0, #256	; 0x100
 8002476:	d003      	beq.n	8002480 <HAL_UART_IRQHandler+0x70>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002478:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800247a:	f042 0201 	orr.w	r2, r2, #1
 800247e:	6422      	str	r2, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002480:	f013 0f04 	tst.w	r3, #4
 8002484:	d004      	beq.n	8002490 <HAL_UART_IRQHandler+0x80>
 8002486:	b119      	cbz	r1, 8002490 <HAL_UART_IRQHandler+0x80>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002488:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800248a:	f042 0202 	orr.w	r2, r2, #2
 800248e:	6422      	str	r2, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002490:	f013 0f02 	tst.w	r3, #2
 8002494:	d004      	beq.n	80024a0 <HAL_UART_IRQHandler+0x90>
 8002496:	b119      	cbz	r1, 80024a0 <HAL_UART_IRQHandler+0x90>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002498:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800249a:	f042 0204 	orr.w	r2, r2, #4
 800249e:	6422      	str	r2, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80024a0:	f013 0f08 	tst.w	r3, #8
 80024a4:	d007      	beq.n	80024b6 <HAL_UART_IRQHandler+0xa6>
 80024a6:	f010 0f20 	tst.w	r0, #32
 80024aa:	d100      	bne.n	80024ae <HAL_UART_IRQHandler+0x9e>
 80024ac:	b119      	cbz	r1, 80024b6 <HAL_UART_IRQHandler+0xa6>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80024ae:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80024b0:	f042 0208 	orr.w	r2, r2, #8
 80024b4:	6422      	str	r2, [r4, #64]	; 0x40
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80024b6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80024b8:	2a00      	cmp	r2, #0
 80024ba:	d0d1      	beq.n	8002460 <HAL_UART_IRQHandler+0x50>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80024bc:	f013 0f20 	tst.w	r3, #32
 80024c0:	d002      	beq.n	80024c8 <HAL_UART_IRQHandler+0xb8>
 80024c2:	f010 0f20 	tst.w	r0, #32
 80024c6:	d121      	bne.n	800250c <HAL_UART_IRQHandler+0xfc>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80024c8:	6823      	ldr	r3, [r4, #0]
 80024ca:	695b      	ldr	r3, [r3, #20]
 80024cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80024d0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80024d2:	f012 0f08 	tst.w	r2, #8
 80024d6:	d100      	bne.n	80024da <HAL_UART_IRQHandler+0xca>
 80024d8:	b323      	cbz	r3, 8002524 <HAL_UART_IRQHandler+0x114>
        UART_EndRxTransfer(huart);
 80024da:	4620      	mov	r0, r4
 80024dc:	f7ff fdb0 	bl	8002040 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80024e0:	6823      	ldr	r3, [r4, #0]
 80024e2:	695a      	ldr	r2, [r3, #20]
 80024e4:	f012 0f40 	tst.w	r2, #64	; 0x40
 80024e8:	d018      	beq.n	800251c <HAL_UART_IRQHandler+0x10c>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80024ea:	695a      	ldr	r2, [r3, #20]
 80024ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80024f0:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 80024f2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80024f4:	b173      	cbz	r3, 8002514 <HAL_UART_IRQHandler+0x104>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80024f6:	4a46      	ldr	r2, [pc, #280]	; (8002610 <HAL_UART_IRQHandler+0x200>)
 80024f8:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80024fa:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80024fc:	f7fe fe9c 	bl	8001238 <HAL_DMA_Abort_IT>
 8002500:	2800      	cmp	r0, #0
 8002502:	d0ad      	beq.n	8002460 <HAL_UART_IRQHandler+0x50>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002504:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8002506:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002508:	4798      	blx	r3
 800250a:	e7a9      	b.n	8002460 <HAL_UART_IRQHandler+0x50>
        UART_Receive_IT(huart);
 800250c:	4620      	mov	r0, r4
 800250e:	f7ff ff14 	bl	800233a <UART_Receive_IT>
 8002512:	e7d9      	b.n	80024c8 <HAL_UART_IRQHandler+0xb8>
            HAL_UART_ErrorCallback(huart);
 8002514:	4620      	mov	r0, r4
 8002516:	f7ff ff06 	bl	8002326 <HAL_UART_ErrorCallback>
 800251a:	e7a1      	b.n	8002460 <HAL_UART_IRQHandler+0x50>
          HAL_UART_ErrorCallback(huart);
 800251c:	4620      	mov	r0, r4
 800251e:	f7ff ff02 	bl	8002326 <HAL_UART_ErrorCallback>
 8002522:	e79d      	b.n	8002460 <HAL_UART_IRQHandler+0x50>
        HAL_UART_ErrorCallback(huart);
 8002524:	4620      	mov	r0, r4
 8002526:	f7ff fefe 	bl	8002326 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800252a:	2300      	movs	r3, #0
 800252c:	6423      	str	r3, [r4, #64]	; 0x40
    return;
 800252e:	e797      	b.n	8002460 <HAL_UART_IRQHandler+0x50>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8002530:	f013 0f10 	tst.w	r3, #16
 8002534:	d086      	beq.n	8002444 <HAL_UART_IRQHandler+0x34>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8002536:	f010 0f10 	tst.w	r0, #16
 800253a:	d083      	beq.n	8002444 <HAL_UART_IRQHandler+0x34>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800253c:	2300      	movs	r3, #0
 800253e:	9301      	str	r3, [sp, #4]
 8002540:	6813      	ldr	r3, [r2, #0]
 8002542:	9301      	str	r3, [sp, #4]
 8002544:	6853      	ldr	r3, [r2, #4]
 8002546:	9301      	str	r3, [sp, #4]
 8002548:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800254a:	6953      	ldr	r3, [r2, #20]
 800254c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002550:	d032      	beq.n	80025b8 <HAL_UART_IRQHandler+0x1a8>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002552:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8002554:	680b      	ldr	r3, [r1, #0]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	b29b      	uxth	r3, r3
      if (  (nb_remaining_rx_data > 0U)
 800255a:	2b00      	cmp	r3, #0
 800255c:	d080      	beq.n	8002460 <HAL_UART_IRQHandler+0x50>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800255e:	8da0      	ldrh	r0, [r4, #44]	; 0x2c
 8002560:	4298      	cmp	r0, r3
 8002562:	f67f af7d 	bls.w	8002460 <HAL_UART_IRQHandler+0x50>
        huart->RxXferCount = nb_remaining_rx_data;
 8002566:	85e3      	strh	r3, [r4, #46]	; 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002568:	698b      	ldr	r3, [r1, #24]
 800256a:	2b20      	cmp	r3, #32
 800256c:	d108      	bne.n	8002580 <HAL_UART_IRQHandler+0x170>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800256e:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8002570:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8002572:	b29b      	uxth	r3, r3
 8002574:	1ac9      	subs	r1, r1, r3
 8002576:	b289      	uxth	r1, r1
 8002578:	4620      	mov	r0, r4
 800257a:	f7ff fedd 	bl	8002338 <HAL_UARTEx_RxEventCallback>
      return;
 800257e:	e76f      	b.n	8002460 <HAL_UART_IRQHandler+0x50>
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002580:	68d3      	ldr	r3, [r2, #12]
 8002582:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002586:	60d3      	str	r3, [r2, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002588:	6822      	ldr	r2, [r4, #0]
 800258a:	6953      	ldr	r3, [r2, #20]
 800258c:	f023 0301 	bic.w	r3, r3, #1
 8002590:	6153      	str	r3, [r2, #20]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002592:	6822      	ldr	r2, [r4, #0]
 8002594:	6953      	ldr	r3, [r2, #20]
 8002596:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800259a:	6153      	str	r3, [r2, #20]
          huart->RxState = HAL_UART_STATE_READY;
 800259c:	2320      	movs	r3, #32
 800259e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80025a2:	2300      	movs	r3, #0
 80025a4:	6323      	str	r3, [r4, #48]	; 0x30
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80025a6:	6822      	ldr	r2, [r4, #0]
 80025a8:	68d3      	ldr	r3, [r2, #12]
 80025aa:	f023 0310 	bic.w	r3, r3, #16
 80025ae:	60d3      	str	r3, [r2, #12]
          (void)HAL_DMA_Abort(huart->hdmarx);
 80025b0:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80025b2:	f7fe fe1f 	bl	80011f4 <HAL_DMA_Abort>
 80025b6:	e7da      	b.n	800256e <HAL_UART_IRQHandler+0x15e>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80025b8:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 80025ba:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 80025bc:	b29b      	uxth	r3, r3
 80025be:	1ac9      	subs	r1, r1, r3
 80025c0:	b289      	uxth	r1, r1
      if (  (huart->RxXferCount > 0U)
 80025c2:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 80025c4:	b29b      	uxth	r3, r3
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	f43f af4a 	beq.w	8002460 <HAL_UART_IRQHandler+0x50>
          &&(nb_rx_data > 0U) )
 80025cc:	2900      	cmp	r1, #0
 80025ce:	f43f af47 	beq.w	8002460 <HAL_UART_IRQHandler+0x50>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80025d2:	68d3      	ldr	r3, [r2, #12]
 80025d4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80025d8:	60d3      	str	r3, [r2, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80025da:	6822      	ldr	r2, [r4, #0]
 80025dc:	6953      	ldr	r3, [r2, #20]
 80025de:	f023 0301 	bic.w	r3, r3, #1
 80025e2:	6153      	str	r3, [r2, #20]
        huart->RxState = HAL_UART_STATE_READY;
 80025e4:	2320      	movs	r3, #32
 80025e6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80025ea:	2300      	movs	r3, #0
 80025ec:	6323      	str	r3, [r4, #48]	; 0x30
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80025ee:	6822      	ldr	r2, [r4, #0]
 80025f0:	68d3      	ldr	r3, [r2, #12]
 80025f2:	f023 0310 	bic.w	r3, r3, #16
 80025f6:	60d3      	str	r3, [r2, #12]
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80025f8:	4620      	mov	r0, r4
 80025fa:	f7ff fe9d 	bl	8002338 <HAL_UARTEx_RxEventCallback>
      return;
 80025fe:	e72f      	b.n	8002460 <HAL_UART_IRQHandler+0x50>
    UART_Transmit_IT(huart);
 8002600:	4620      	mov	r0, r4
 8002602:	f7ff fd36 	bl	8002072 <UART_Transmit_IT>
    return;
 8002606:	e72b      	b.n	8002460 <HAL_UART_IRQHandler+0x50>
    UART_EndTransmit_IT(huart);
 8002608:	4620      	mov	r0, r4
 800260a:	f7ff fe7f 	bl	800230c <UART_EndTransmit_IT>
    return;
 800260e:	e727      	b.n	8002460 <HAL_UART_IRQHandler+0x50>
 8002610:	08002329 	.word	0x08002329

08002614 <UART_Start_Receive_IT>:
{
 8002614:	4603      	mov	r3, r0
  huart->pRxBuffPtr = pData;
 8002616:	6281      	str	r1, [r0, #40]	; 0x28
  huart->RxXferSize = Size;
 8002618:	8582      	strh	r2, [r0, #44]	; 0x2c
  huart->RxXferCount = Size;
 800261a:	85c2      	strh	r2, [r0, #46]	; 0x2e
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800261c:	2000      	movs	r0, #0
 800261e:	6418      	str	r0, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002620:	2222      	movs	r2, #34	; 0x22
 8002622:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  __HAL_UNLOCK(huart);
 8002626:	f883 003c 	strb.w	r0, [r3, #60]	; 0x3c
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800262a:	6819      	ldr	r1, [r3, #0]
 800262c:	68ca      	ldr	r2, [r1, #12]
 800262e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002632:	60ca      	str	r2, [r1, #12]
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002634:	6819      	ldr	r1, [r3, #0]
 8002636:	694a      	ldr	r2, [r1, #20]
 8002638:	f042 0201 	orr.w	r2, r2, #1
 800263c:	614a      	str	r2, [r1, #20]
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800263e:	681a      	ldr	r2, [r3, #0]
 8002640:	68d3      	ldr	r3, [r2, #12]
 8002642:	f043 0320 	orr.w	r3, r3, #32
 8002646:	60d3      	str	r3, [r2, #12]
}
 8002648:	4770      	bx	lr

0800264a <HAL_UART_Receive_IT>:
{
 800264a:	b508      	push	{r3, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 800264c:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8002650:	b2db      	uxtb	r3, r3
 8002652:	2b20      	cmp	r3, #32
 8002654:	d10d      	bne.n	8002672 <HAL_UART_Receive_IT+0x28>
    if ((pData == NULL) || (Size == 0U))
 8002656:	b171      	cbz	r1, 8002676 <HAL_UART_Receive_IT+0x2c>
 8002658:	b17a      	cbz	r2, 800267a <HAL_UART_Receive_IT+0x30>
    __HAL_LOCK(huart);
 800265a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800265e:	2b01      	cmp	r3, #1
 8002660:	d00d      	beq.n	800267e <HAL_UART_Receive_IT+0x34>
 8002662:	2301      	movs	r3, #1
 8002664:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002668:	2300      	movs	r3, #0
 800266a:	6303      	str	r3, [r0, #48]	; 0x30
    return(UART_Start_Receive_IT(huart, pData, Size));
 800266c:	f7ff ffd2 	bl	8002614 <UART_Start_Receive_IT>
 8002670:	e000      	b.n	8002674 <HAL_UART_Receive_IT+0x2a>
    return HAL_BUSY;
 8002672:	2002      	movs	r0, #2
}
 8002674:	bd08      	pop	{r3, pc}
      return HAL_ERROR;
 8002676:	2001      	movs	r0, #1
 8002678:	e7fc      	b.n	8002674 <HAL_UART_Receive_IT+0x2a>
 800267a:	2001      	movs	r0, #1
 800267c:	e7fa      	b.n	8002674 <HAL_UART_Receive_IT+0x2a>
    __HAL_LOCK(huart);
 800267e:	2002      	movs	r0, #2
 8002680:	e7f8      	b.n	8002674 <HAL_UART_Receive_IT+0x2a>
	...

08002684 <__errno>:
 8002684:	4b01      	ldr	r3, [pc, #4]	; (800268c <__errno+0x8>)
 8002686:	6818      	ldr	r0, [r3, #0]
 8002688:	4770      	bx	lr
 800268a:	bf00      	nop
 800268c:	20000014 	.word	0x20000014

08002690 <__libc_init_array>:
 8002690:	b570      	push	{r4, r5, r6, lr}
 8002692:	2600      	movs	r6, #0
 8002694:	4d0c      	ldr	r5, [pc, #48]	; (80026c8 <__libc_init_array+0x38>)
 8002696:	4c0d      	ldr	r4, [pc, #52]	; (80026cc <__libc_init_array+0x3c>)
 8002698:	1b64      	subs	r4, r4, r5
 800269a:	10a4      	asrs	r4, r4, #2
 800269c:	42a6      	cmp	r6, r4
 800269e:	d109      	bne.n	80026b4 <__libc_init_array+0x24>
 80026a0:	f000 fcb0 	bl	8003004 <_init>
 80026a4:	2600      	movs	r6, #0
 80026a6:	4d0a      	ldr	r5, [pc, #40]	; (80026d0 <__libc_init_array+0x40>)
 80026a8:	4c0a      	ldr	r4, [pc, #40]	; (80026d4 <__libc_init_array+0x44>)
 80026aa:	1b64      	subs	r4, r4, r5
 80026ac:	10a4      	asrs	r4, r4, #2
 80026ae:	42a6      	cmp	r6, r4
 80026b0:	d105      	bne.n	80026be <__libc_init_array+0x2e>
 80026b2:	bd70      	pop	{r4, r5, r6, pc}
 80026b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80026b8:	4798      	blx	r3
 80026ba:	3601      	adds	r6, #1
 80026bc:	e7ee      	b.n	800269c <__libc_init_array+0xc>
 80026be:	f855 3b04 	ldr.w	r3, [r5], #4
 80026c2:	4798      	blx	r3
 80026c4:	3601      	adds	r6, #1
 80026c6:	e7f2      	b.n	80026ae <__libc_init_array+0x1e>
 80026c8:	08003130 	.word	0x08003130
 80026cc:	08003130 	.word	0x08003130
 80026d0:	08003130 	.word	0x08003130
 80026d4:	08003134 	.word	0x08003134

080026d8 <memset>:
 80026d8:	4603      	mov	r3, r0
 80026da:	4402      	add	r2, r0
 80026dc:	4293      	cmp	r3, r2
 80026de:	d100      	bne.n	80026e2 <memset+0xa>
 80026e0:	4770      	bx	lr
 80026e2:	f803 1b01 	strb.w	r1, [r3], #1
 80026e6:	e7f9      	b.n	80026dc <memset+0x4>

080026e8 <siprintf>:
 80026e8:	b40e      	push	{r1, r2, r3}
 80026ea:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80026ee:	b500      	push	{lr}
 80026f0:	b09c      	sub	sp, #112	; 0x70
 80026f2:	ab1d      	add	r3, sp, #116	; 0x74
 80026f4:	9002      	str	r0, [sp, #8]
 80026f6:	9006      	str	r0, [sp, #24]
 80026f8:	9107      	str	r1, [sp, #28]
 80026fa:	9104      	str	r1, [sp, #16]
 80026fc:	4808      	ldr	r0, [pc, #32]	; (8002720 <siprintf+0x38>)
 80026fe:	4909      	ldr	r1, [pc, #36]	; (8002724 <siprintf+0x3c>)
 8002700:	f853 2b04 	ldr.w	r2, [r3], #4
 8002704:	9105      	str	r1, [sp, #20]
 8002706:	6800      	ldr	r0, [r0, #0]
 8002708:	a902      	add	r1, sp, #8
 800270a:	9301      	str	r3, [sp, #4]
 800270c:	f000 f87c 	bl	8002808 <_svfiprintf_r>
 8002710:	2200      	movs	r2, #0
 8002712:	9b02      	ldr	r3, [sp, #8]
 8002714:	701a      	strb	r2, [r3, #0]
 8002716:	b01c      	add	sp, #112	; 0x70
 8002718:	f85d eb04 	ldr.w	lr, [sp], #4
 800271c:	b003      	add	sp, #12
 800271e:	4770      	bx	lr
 8002720:	20000014 	.word	0x20000014
 8002724:	ffff0208 	.word	0xffff0208

08002728 <strncmp>:
 8002728:	4603      	mov	r3, r0
 800272a:	b510      	push	{r4, lr}
 800272c:	b172      	cbz	r2, 800274c <strncmp+0x24>
 800272e:	3901      	subs	r1, #1
 8002730:	1884      	adds	r4, r0, r2
 8002732:	f813 0b01 	ldrb.w	r0, [r3], #1
 8002736:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800273a:	4290      	cmp	r0, r2
 800273c:	d101      	bne.n	8002742 <strncmp+0x1a>
 800273e:	42a3      	cmp	r3, r4
 8002740:	d101      	bne.n	8002746 <strncmp+0x1e>
 8002742:	1a80      	subs	r0, r0, r2
 8002744:	bd10      	pop	{r4, pc}
 8002746:	2800      	cmp	r0, #0
 8002748:	d1f3      	bne.n	8002732 <strncmp+0xa>
 800274a:	e7fa      	b.n	8002742 <strncmp+0x1a>
 800274c:	4610      	mov	r0, r2
 800274e:	e7f9      	b.n	8002744 <strncmp+0x1c>

08002750 <__ssputs_r>:
 8002750:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002754:	688e      	ldr	r6, [r1, #8]
 8002756:	4682      	mov	sl, r0
 8002758:	429e      	cmp	r6, r3
 800275a:	460c      	mov	r4, r1
 800275c:	4690      	mov	r8, r2
 800275e:	461f      	mov	r7, r3
 8002760:	d838      	bhi.n	80027d4 <__ssputs_r+0x84>
 8002762:	898a      	ldrh	r2, [r1, #12]
 8002764:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002768:	d032      	beq.n	80027d0 <__ssputs_r+0x80>
 800276a:	6825      	ldr	r5, [r4, #0]
 800276c:	6909      	ldr	r1, [r1, #16]
 800276e:	3301      	adds	r3, #1
 8002770:	eba5 0901 	sub.w	r9, r5, r1
 8002774:	6965      	ldr	r5, [r4, #20]
 8002776:	444b      	add	r3, r9
 8002778:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800277c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002780:	106d      	asrs	r5, r5, #1
 8002782:	429d      	cmp	r5, r3
 8002784:	bf38      	it	cc
 8002786:	461d      	movcc	r5, r3
 8002788:	0553      	lsls	r3, r2, #21
 800278a:	d531      	bpl.n	80027f0 <__ssputs_r+0xa0>
 800278c:	4629      	mov	r1, r5
 800278e:	f000 fb6f 	bl	8002e70 <_malloc_r>
 8002792:	4606      	mov	r6, r0
 8002794:	b950      	cbnz	r0, 80027ac <__ssputs_r+0x5c>
 8002796:	230c      	movs	r3, #12
 8002798:	f04f 30ff 	mov.w	r0, #4294967295
 800279c:	f8ca 3000 	str.w	r3, [sl]
 80027a0:	89a3      	ldrh	r3, [r4, #12]
 80027a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80027a6:	81a3      	strh	r3, [r4, #12]
 80027a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80027ac:	464a      	mov	r2, r9
 80027ae:	6921      	ldr	r1, [r4, #16]
 80027b0:	f000 face 	bl	8002d50 <memcpy>
 80027b4:	89a3      	ldrh	r3, [r4, #12]
 80027b6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80027ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027be:	81a3      	strh	r3, [r4, #12]
 80027c0:	6126      	str	r6, [r4, #16]
 80027c2:	444e      	add	r6, r9
 80027c4:	6026      	str	r6, [r4, #0]
 80027c6:	463e      	mov	r6, r7
 80027c8:	6165      	str	r5, [r4, #20]
 80027ca:	eba5 0509 	sub.w	r5, r5, r9
 80027ce:	60a5      	str	r5, [r4, #8]
 80027d0:	42be      	cmp	r6, r7
 80027d2:	d900      	bls.n	80027d6 <__ssputs_r+0x86>
 80027d4:	463e      	mov	r6, r7
 80027d6:	4632      	mov	r2, r6
 80027d8:	4641      	mov	r1, r8
 80027da:	6820      	ldr	r0, [r4, #0]
 80027dc:	f000 fac6 	bl	8002d6c <memmove>
 80027e0:	68a3      	ldr	r3, [r4, #8]
 80027e2:	2000      	movs	r0, #0
 80027e4:	1b9b      	subs	r3, r3, r6
 80027e6:	60a3      	str	r3, [r4, #8]
 80027e8:	6823      	ldr	r3, [r4, #0]
 80027ea:	4433      	add	r3, r6
 80027ec:	6023      	str	r3, [r4, #0]
 80027ee:	e7db      	b.n	80027a8 <__ssputs_r+0x58>
 80027f0:	462a      	mov	r2, r5
 80027f2:	f000 fbb1 	bl	8002f58 <_realloc_r>
 80027f6:	4606      	mov	r6, r0
 80027f8:	2800      	cmp	r0, #0
 80027fa:	d1e1      	bne.n	80027c0 <__ssputs_r+0x70>
 80027fc:	4650      	mov	r0, sl
 80027fe:	6921      	ldr	r1, [r4, #16]
 8002800:	f000 face 	bl	8002da0 <_free_r>
 8002804:	e7c7      	b.n	8002796 <__ssputs_r+0x46>
	...

08002808 <_svfiprintf_r>:
 8002808:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800280c:	4698      	mov	r8, r3
 800280e:	898b      	ldrh	r3, [r1, #12]
 8002810:	4607      	mov	r7, r0
 8002812:	061b      	lsls	r3, r3, #24
 8002814:	460d      	mov	r5, r1
 8002816:	4614      	mov	r4, r2
 8002818:	b09d      	sub	sp, #116	; 0x74
 800281a:	d50e      	bpl.n	800283a <_svfiprintf_r+0x32>
 800281c:	690b      	ldr	r3, [r1, #16]
 800281e:	b963      	cbnz	r3, 800283a <_svfiprintf_r+0x32>
 8002820:	2140      	movs	r1, #64	; 0x40
 8002822:	f000 fb25 	bl	8002e70 <_malloc_r>
 8002826:	6028      	str	r0, [r5, #0]
 8002828:	6128      	str	r0, [r5, #16]
 800282a:	b920      	cbnz	r0, 8002836 <_svfiprintf_r+0x2e>
 800282c:	230c      	movs	r3, #12
 800282e:	603b      	str	r3, [r7, #0]
 8002830:	f04f 30ff 	mov.w	r0, #4294967295
 8002834:	e0d1      	b.n	80029da <_svfiprintf_r+0x1d2>
 8002836:	2340      	movs	r3, #64	; 0x40
 8002838:	616b      	str	r3, [r5, #20]
 800283a:	2300      	movs	r3, #0
 800283c:	9309      	str	r3, [sp, #36]	; 0x24
 800283e:	2320      	movs	r3, #32
 8002840:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002844:	2330      	movs	r3, #48	; 0x30
 8002846:	f04f 0901 	mov.w	r9, #1
 800284a:	f8cd 800c 	str.w	r8, [sp, #12]
 800284e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80029f4 <_svfiprintf_r+0x1ec>
 8002852:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002856:	4623      	mov	r3, r4
 8002858:	469a      	mov	sl, r3
 800285a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800285e:	b10a      	cbz	r2, 8002864 <_svfiprintf_r+0x5c>
 8002860:	2a25      	cmp	r2, #37	; 0x25
 8002862:	d1f9      	bne.n	8002858 <_svfiprintf_r+0x50>
 8002864:	ebba 0b04 	subs.w	fp, sl, r4
 8002868:	d00b      	beq.n	8002882 <_svfiprintf_r+0x7a>
 800286a:	465b      	mov	r3, fp
 800286c:	4622      	mov	r2, r4
 800286e:	4629      	mov	r1, r5
 8002870:	4638      	mov	r0, r7
 8002872:	f7ff ff6d 	bl	8002750 <__ssputs_r>
 8002876:	3001      	adds	r0, #1
 8002878:	f000 80aa 	beq.w	80029d0 <_svfiprintf_r+0x1c8>
 800287c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800287e:	445a      	add	r2, fp
 8002880:	9209      	str	r2, [sp, #36]	; 0x24
 8002882:	f89a 3000 	ldrb.w	r3, [sl]
 8002886:	2b00      	cmp	r3, #0
 8002888:	f000 80a2 	beq.w	80029d0 <_svfiprintf_r+0x1c8>
 800288c:	2300      	movs	r3, #0
 800288e:	f04f 32ff 	mov.w	r2, #4294967295
 8002892:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002896:	f10a 0a01 	add.w	sl, sl, #1
 800289a:	9304      	str	r3, [sp, #16]
 800289c:	9307      	str	r3, [sp, #28]
 800289e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80028a2:	931a      	str	r3, [sp, #104]	; 0x68
 80028a4:	4654      	mov	r4, sl
 80028a6:	2205      	movs	r2, #5
 80028a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80028ac:	4851      	ldr	r0, [pc, #324]	; (80029f4 <_svfiprintf_r+0x1ec>)
 80028ae:	f000 fa41 	bl	8002d34 <memchr>
 80028b2:	9a04      	ldr	r2, [sp, #16]
 80028b4:	b9d8      	cbnz	r0, 80028ee <_svfiprintf_r+0xe6>
 80028b6:	06d0      	lsls	r0, r2, #27
 80028b8:	bf44      	itt	mi
 80028ba:	2320      	movmi	r3, #32
 80028bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80028c0:	0711      	lsls	r1, r2, #28
 80028c2:	bf44      	itt	mi
 80028c4:	232b      	movmi	r3, #43	; 0x2b
 80028c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80028ca:	f89a 3000 	ldrb.w	r3, [sl]
 80028ce:	2b2a      	cmp	r3, #42	; 0x2a
 80028d0:	d015      	beq.n	80028fe <_svfiprintf_r+0xf6>
 80028d2:	4654      	mov	r4, sl
 80028d4:	2000      	movs	r0, #0
 80028d6:	f04f 0c0a 	mov.w	ip, #10
 80028da:	9a07      	ldr	r2, [sp, #28]
 80028dc:	4621      	mov	r1, r4
 80028de:	f811 3b01 	ldrb.w	r3, [r1], #1
 80028e2:	3b30      	subs	r3, #48	; 0x30
 80028e4:	2b09      	cmp	r3, #9
 80028e6:	d94e      	bls.n	8002986 <_svfiprintf_r+0x17e>
 80028e8:	b1b0      	cbz	r0, 8002918 <_svfiprintf_r+0x110>
 80028ea:	9207      	str	r2, [sp, #28]
 80028ec:	e014      	b.n	8002918 <_svfiprintf_r+0x110>
 80028ee:	eba0 0308 	sub.w	r3, r0, r8
 80028f2:	fa09 f303 	lsl.w	r3, r9, r3
 80028f6:	4313      	orrs	r3, r2
 80028f8:	46a2      	mov	sl, r4
 80028fa:	9304      	str	r3, [sp, #16]
 80028fc:	e7d2      	b.n	80028a4 <_svfiprintf_r+0x9c>
 80028fe:	9b03      	ldr	r3, [sp, #12]
 8002900:	1d19      	adds	r1, r3, #4
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	9103      	str	r1, [sp, #12]
 8002906:	2b00      	cmp	r3, #0
 8002908:	bfbb      	ittet	lt
 800290a:	425b      	neglt	r3, r3
 800290c:	f042 0202 	orrlt.w	r2, r2, #2
 8002910:	9307      	strge	r3, [sp, #28]
 8002912:	9307      	strlt	r3, [sp, #28]
 8002914:	bfb8      	it	lt
 8002916:	9204      	strlt	r2, [sp, #16]
 8002918:	7823      	ldrb	r3, [r4, #0]
 800291a:	2b2e      	cmp	r3, #46	; 0x2e
 800291c:	d10c      	bne.n	8002938 <_svfiprintf_r+0x130>
 800291e:	7863      	ldrb	r3, [r4, #1]
 8002920:	2b2a      	cmp	r3, #42	; 0x2a
 8002922:	d135      	bne.n	8002990 <_svfiprintf_r+0x188>
 8002924:	9b03      	ldr	r3, [sp, #12]
 8002926:	3402      	adds	r4, #2
 8002928:	1d1a      	adds	r2, r3, #4
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	9203      	str	r2, [sp, #12]
 800292e:	2b00      	cmp	r3, #0
 8002930:	bfb8      	it	lt
 8002932:	f04f 33ff 	movlt.w	r3, #4294967295
 8002936:	9305      	str	r3, [sp, #20]
 8002938:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80029f8 <_svfiprintf_r+0x1f0>
 800293c:	2203      	movs	r2, #3
 800293e:	4650      	mov	r0, sl
 8002940:	7821      	ldrb	r1, [r4, #0]
 8002942:	f000 f9f7 	bl	8002d34 <memchr>
 8002946:	b140      	cbz	r0, 800295a <_svfiprintf_r+0x152>
 8002948:	2340      	movs	r3, #64	; 0x40
 800294a:	eba0 000a 	sub.w	r0, r0, sl
 800294e:	fa03 f000 	lsl.w	r0, r3, r0
 8002952:	9b04      	ldr	r3, [sp, #16]
 8002954:	3401      	adds	r4, #1
 8002956:	4303      	orrs	r3, r0
 8002958:	9304      	str	r3, [sp, #16]
 800295a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800295e:	2206      	movs	r2, #6
 8002960:	4826      	ldr	r0, [pc, #152]	; (80029fc <_svfiprintf_r+0x1f4>)
 8002962:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002966:	f000 f9e5 	bl	8002d34 <memchr>
 800296a:	2800      	cmp	r0, #0
 800296c:	d038      	beq.n	80029e0 <_svfiprintf_r+0x1d8>
 800296e:	4b24      	ldr	r3, [pc, #144]	; (8002a00 <_svfiprintf_r+0x1f8>)
 8002970:	bb1b      	cbnz	r3, 80029ba <_svfiprintf_r+0x1b2>
 8002972:	9b03      	ldr	r3, [sp, #12]
 8002974:	3307      	adds	r3, #7
 8002976:	f023 0307 	bic.w	r3, r3, #7
 800297a:	3308      	adds	r3, #8
 800297c:	9303      	str	r3, [sp, #12]
 800297e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002980:	4433      	add	r3, r6
 8002982:	9309      	str	r3, [sp, #36]	; 0x24
 8002984:	e767      	b.n	8002856 <_svfiprintf_r+0x4e>
 8002986:	460c      	mov	r4, r1
 8002988:	2001      	movs	r0, #1
 800298a:	fb0c 3202 	mla	r2, ip, r2, r3
 800298e:	e7a5      	b.n	80028dc <_svfiprintf_r+0xd4>
 8002990:	2300      	movs	r3, #0
 8002992:	f04f 0c0a 	mov.w	ip, #10
 8002996:	4619      	mov	r1, r3
 8002998:	3401      	adds	r4, #1
 800299a:	9305      	str	r3, [sp, #20]
 800299c:	4620      	mov	r0, r4
 800299e:	f810 2b01 	ldrb.w	r2, [r0], #1
 80029a2:	3a30      	subs	r2, #48	; 0x30
 80029a4:	2a09      	cmp	r2, #9
 80029a6:	d903      	bls.n	80029b0 <_svfiprintf_r+0x1a8>
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d0c5      	beq.n	8002938 <_svfiprintf_r+0x130>
 80029ac:	9105      	str	r1, [sp, #20]
 80029ae:	e7c3      	b.n	8002938 <_svfiprintf_r+0x130>
 80029b0:	4604      	mov	r4, r0
 80029b2:	2301      	movs	r3, #1
 80029b4:	fb0c 2101 	mla	r1, ip, r1, r2
 80029b8:	e7f0      	b.n	800299c <_svfiprintf_r+0x194>
 80029ba:	ab03      	add	r3, sp, #12
 80029bc:	9300      	str	r3, [sp, #0]
 80029be:	462a      	mov	r2, r5
 80029c0:	4638      	mov	r0, r7
 80029c2:	4b10      	ldr	r3, [pc, #64]	; (8002a04 <_svfiprintf_r+0x1fc>)
 80029c4:	a904      	add	r1, sp, #16
 80029c6:	f3af 8000 	nop.w
 80029ca:	1c42      	adds	r2, r0, #1
 80029cc:	4606      	mov	r6, r0
 80029ce:	d1d6      	bne.n	800297e <_svfiprintf_r+0x176>
 80029d0:	89ab      	ldrh	r3, [r5, #12]
 80029d2:	065b      	lsls	r3, r3, #25
 80029d4:	f53f af2c 	bmi.w	8002830 <_svfiprintf_r+0x28>
 80029d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80029da:	b01d      	add	sp, #116	; 0x74
 80029dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80029e0:	ab03      	add	r3, sp, #12
 80029e2:	9300      	str	r3, [sp, #0]
 80029e4:	462a      	mov	r2, r5
 80029e6:	4638      	mov	r0, r7
 80029e8:	4b06      	ldr	r3, [pc, #24]	; (8002a04 <_svfiprintf_r+0x1fc>)
 80029ea:	a904      	add	r1, sp, #16
 80029ec:	f000 f87c 	bl	8002ae8 <_printf_i>
 80029f0:	e7eb      	b.n	80029ca <_svfiprintf_r+0x1c2>
 80029f2:	bf00      	nop
 80029f4:	080030fd 	.word	0x080030fd
 80029f8:	08003103 	.word	0x08003103
 80029fc:	08003107 	.word	0x08003107
 8002a00:	00000000 	.word	0x00000000
 8002a04:	08002751 	.word	0x08002751

08002a08 <_printf_common>:
 8002a08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002a0c:	4616      	mov	r6, r2
 8002a0e:	4699      	mov	r9, r3
 8002a10:	688a      	ldr	r2, [r1, #8]
 8002a12:	690b      	ldr	r3, [r1, #16]
 8002a14:	4607      	mov	r7, r0
 8002a16:	4293      	cmp	r3, r2
 8002a18:	bfb8      	it	lt
 8002a1a:	4613      	movlt	r3, r2
 8002a1c:	6033      	str	r3, [r6, #0]
 8002a1e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002a22:	460c      	mov	r4, r1
 8002a24:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002a28:	b10a      	cbz	r2, 8002a2e <_printf_common+0x26>
 8002a2a:	3301      	adds	r3, #1
 8002a2c:	6033      	str	r3, [r6, #0]
 8002a2e:	6823      	ldr	r3, [r4, #0]
 8002a30:	0699      	lsls	r1, r3, #26
 8002a32:	bf42      	ittt	mi
 8002a34:	6833      	ldrmi	r3, [r6, #0]
 8002a36:	3302      	addmi	r3, #2
 8002a38:	6033      	strmi	r3, [r6, #0]
 8002a3a:	6825      	ldr	r5, [r4, #0]
 8002a3c:	f015 0506 	ands.w	r5, r5, #6
 8002a40:	d106      	bne.n	8002a50 <_printf_common+0x48>
 8002a42:	f104 0a19 	add.w	sl, r4, #25
 8002a46:	68e3      	ldr	r3, [r4, #12]
 8002a48:	6832      	ldr	r2, [r6, #0]
 8002a4a:	1a9b      	subs	r3, r3, r2
 8002a4c:	42ab      	cmp	r3, r5
 8002a4e:	dc28      	bgt.n	8002aa2 <_printf_common+0x9a>
 8002a50:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002a54:	1e13      	subs	r3, r2, #0
 8002a56:	6822      	ldr	r2, [r4, #0]
 8002a58:	bf18      	it	ne
 8002a5a:	2301      	movne	r3, #1
 8002a5c:	0692      	lsls	r2, r2, #26
 8002a5e:	d42d      	bmi.n	8002abc <_printf_common+0xb4>
 8002a60:	4649      	mov	r1, r9
 8002a62:	4638      	mov	r0, r7
 8002a64:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002a68:	47c0      	blx	r8
 8002a6a:	3001      	adds	r0, #1
 8002a6c:	d020      	beq.n	8002ab0 <_printf_common+0xa8>
 8002a6e:	6823      	ldr	r3, [r4, #0]
 8002a70:	68e5      	ldr	r5, [r4, #12]
 8002a72:	f003 0306 	and.w	r3, r3, #6
 8002a76:	2b04      	cmp	r3, #4
 8002a78:	bf18      	it	ne
 8002a7a:	2500      	movne	r5, #0
 8002a7c:	6832      	ldr	r2, [r6, #0]
 8002a7e:	f04f 0600 	mov.w	r6, #0
 8002a82:	68a3      	ldr	r3, [r4, #8]
 8002a84:	bf08      	it	eq
 8002a86:	1aad      	subeq	r5, r5, r2
 8002a88:	6922      	ldr	r2, [r4, #16]
 8002a8a:	bf08      	it	eq
 8002a8c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002a90:	4293      	cmp	r3, r2
 8002a92:	bfc4      	itt	gt
 8002a94:	1a9b      	subgt	r3, r3, r2
 8002a96:	18ed      	addgt	r5, r5, r3
 8002a98:	341a      	adds	r4, #26
 8002a9a:	42b5      	cmp	r5, r6
 8002a9c:	d11a      	bne.n	8002ad4 <_printf_common+0xcc>
 8002a9e:	2000      	movs	r0, #0
 8002aa0:	e008      	b.n	8002ab4 <_printf_common+0xac>
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	4652      	mov	r2, sl
 8002aa6:	4649      	mov	r1, r9
 8002aa8:	4638      	mov	r0, r7
 8002aaa:	47c0      	blx	r8
 8002aac:	3001      	adds	r0, #1
 8002aae:	d103      	bne.n	8002ab8 <_printf_common+0xb0>
 8002ab0:	f04f 30ff 	mov.w	r0, #4294967295
 8002ab4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002ab8:	3501      	adds	r5, #1
 8002aba:	e7c4      	b.n	8002a46 <_printf_common+0x3e>
 8002abc:	2030      	movs	r0, #48	; 0x30
 8002abe:	18e1      	adds	r1, r4, r3
 8002ac0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002ac4:	1c5a      	adds	r2, r3, #1
 8002ac6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002aca:	4422      	add	r2, r4
 8002acc:	3302      	adds	r3, #2
 8002ace:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002ad2:	e7c5      	b.n	8002a60 <_printf_common+0x58>
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	4622      	mov	r2, r4
 8002ad8:	4649      	mov	r1, r9
 8002ada:	4638      	mov	r0, r7
 8002adc:	47c0      	blx	r8
 8002ade:	3001      	adds	r0, #1
 8002ae0:	d0e6      	beq.n	8002ab0 <_printf_common+0xa8>
 8002ae2:	3601      	adds	r6, #1
 8002ae4:	e7d9      	b.n	8002a9a <_printf_common+0x92>
	...

08002ae8 <_printf_i>:
 8002ae8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002aec:	7e0f      	ldrb	r7, [r1, #24]
 8002aee:	4691      	mov	r9, r2
 8002af0:	2f78      	cmp	r7, #120	; 0x78
 8002af2:	4680      	mov	r8, r0
 8002af4:	460c      	mov	r4, r1
 8002af6:	469a      	mov	sl, r3
 8002af8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002afa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002afe:	d807      	bhi.n	8002b10 <_printf_i+0x28>
 8002b00:	2f62      	cmp	r7, #98	; 0x62
 8002b02:	d80a      	bhi.n	8002b1a <_printf_i+0x32>
 8002b04:	2f00      	cmp	r7, #0
 8002b06:	f000 80d9 	beq.w	8002cbc <_printf_i+0x1d4>
 8002b0a:	2f58      	cmp	r7, #88	; 0x58
 8002b0c:	f000 80a4 	beq.w	8002c58 <_printf_i+0x170>
 8002b10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002b14:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002b18:	e03a      	b.n	8002b90 <_printf_i+0xa8>
 8002b1a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002b1e:	2b15      	cmp	r3, #21
 8002b20:	d8f6      	bhi.n	8002b10 <_printf_i+0x28>
 8002b22:	a101      	add	r1, pc, #4	; (adr r1, 8002b28 <_printf_i+0x40>)
 8002b24:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002b28:	08002b81 	.word	0x08002b81
 8002b2c:	08002b95 	.word	0x08002b95
 8002b30:	08002b11 	.word	0x08002b11
 8002b34:	08002b11 	.word	0x08002b11
 8002b38:	08002b11 	.word	0x08002b11
 8002b3c:	08002b11 	.word	0x08002b11
 8002b40:	08002b95 	.word	0x08002b95
 8002b44:	08002b11 	.word	0x08002b11
 8002b48:	08002b11 	.word	0x08002b11
 8002b4c:	08002b11 	.word	0x08002b11
 8002b50:	08002b11 	.word	0x08002b11
 8002b54:	08002ca3 	.word	0x08002ca3
 8002b58:	08002bc5 	.word	0x08002bc5
 8002b5c:	08002c85 	.word	0x08002c85
 8002b60:	08002b11 	.word	0x08002b11
 8002b64:	08002b11 	.word	0x08002b11
 8002b68:	08002cc5 	.word	0x08002cc5
 8002b6c:	08002b11 	.word	0x08002b11
 8002b70:	08002bc5 	.word	0x08002bc5
 8002b74:	08002b11 	.word	0x08002b11
 8002b78:	08002b11 	.word	0x08002b11
 8002b7c:	08002c8d 	.word	0x08002c8d
 8002b80:	682b      	ldr	r3, [r5, #0]
 8002b82:	1d1a      	adds	r2, r3, #4
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	602a      	str	r2, [r5, #0]
 8002b88:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002b8c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002b90:	2301      	movs	r3, #1
 8002b92:	e0a4      	b.n	8002cde <_printf_i+0x1f6>
 8002b94:	6820      	ldr	r0, [r4, #0]
 8002b96:	6829      	ldr	r1, [r5, #0]
 8002b98:	0606      	lsls	r6, r0, #24
 8002b9a:	f101 0304 	add.w	r3, r1, #4
 8002b9e:	d50a      	bpl.n	8002bb6 <_printf_i+0xce>
 8002ba0:	680e      	ldr	r6, [r1, #0]
 8002ba2:	602b      	str	r3, [r5, #0]
 8002ba4:	2e00      	cmp	r6, #0
 8002ba6:	da03      	bge.n	8002bb0 <_printf_i+0xc8>
 8002ba8:	232d      	movs	r3, #45	; 0x2d
 8002baa:	4276      	negs	r6, r6
 8002bac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002bb0:	230a      	movs	r3, #10
 8002bb2:	485e      	ldr	r0, [pc, #376]	; (8002d2c <_printf_i+0x244>)
 8002bb4:	e019      	b.n	8002bea <_printf_i+0x102>
 8002bb6:	680e      	ldr	r6, [r1, #0]
 8002bb8:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002bbc:	602b      	str	r3, [r5, #0]
 8002bbe:	bf18      	it	ne
 8002bc0:	b236      	sxthne	r6, r6
 8002bc2:	e7ef      	b.n	8002ba4 <_printf_i+0xbc>
 8002bc4:	682b      	ldr	r3, [r5, #0]
 8002bc6:	6820      	ldr	r0, [r4, #0]
 8002bc8:	1d19      	adds	r1, r3, #4
 8002bca:	6029      	str	r1, [r5, #0]
 8002bcc:	0601      	lsls	r1, r0, #24
 8002bce:	d501      	bpl.n	8002bd4 <_printf_i+0xec>
 8002bd0:	681e      	ldr	r6, [r3, #0]
 8002bd2:	e002      	b.n	8002bda <_printf_i+0xf2>
 8002bd4:	0646      	lsls	r6, r0, #25
 8002bd6:	d5fb      	bpl.n	8002bd0 <_printf_i+0xe8>
 8002bd8:	881e      	ldrh	r6, [r3, #0]
 8002bda:	2f6f      	cmp	r7, #111	; 0x6f
 8002bdc:	bf0c      	ite	eq
 8002bde:	2308      	moveq	r3, #8
 8002be0:	230a      	movne	r3, #10
 8002be2:	4852      	ldr	r0, [pc, #328]	; (8002d2c <_printf_i+0x244>)
 8002be4:	2100      	movs	r1, #0
 8002be6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002bea:	6865      	ldr	r5, [r4, #4]
 8002bec:	2d00      	cmp	r5, #0
 8002bee:	bfa8      	it	ge
 8002bf0:	6821      	ldrge	r1, [r4, #0]
 8002bf2:	60a5      	str	r5, [r4, #8]
 8002bf4:	bfa4      	itt	ge
 8002bf6:	f021 0104 	bicge.w	r1, r1, #4
 8002bfa:	6021      	strge	r1, [r4, #0]
 8002bfc:	b90e      	cbnz	r6, 8002c02 <_printf_i+0x11a>
 8002bfe:	2d00      	cmp	r5, #0
 8002c00:	d04d      	beq.n	8002c9e <_printf_i+0x1b6>
 8002c02:	4615      	mov	r5, r2
 8002c04:	fbb6 f1f3 	udiv	r1, r6, r3
 8002c08:	fb03 6711 	mls	r7, r3, r1, r6
 8002c0c:	5dc7      	ldrb	r7, [r0, r7]
 8002c0e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002c12:	4637      	mov	r7, r6
 8002c14:	42bb      	cmp	r3, r7
 8002c16:	460e      	mov	r6, r1
 8002c18:	d9f4      	bls.n	8002c04 <_printf_i+0x11c>
 8002c1a:	2b08      	cmp	r3, #8
 8002c1c:	d10b      	bne.n	8002c36 <_printf_i+0x14e>
 8002c1e:	6823      	ldr	r3, [r4, #0]
 8002c20:	07de      	lsls	r6, r3, #31
 8002c22:	d508      	bpl.n	8002c36 <_printf_i+0x14e>
 8002c24:	6923      	ldr	r3, [r4, #16]
 8002c26:	6861      	ldr	r1, [r4, #4]
 8002c28:	4299      	cmp	r1, r3
 8002c2a:	bfde      	ittt	le
 8002c2c:	2330      	movle	r3, #48	; 0x30
 8002c2e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002c32:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002c36:	1b52      	subs	r2, r2, r5
 8002c38:	6122      	str	r2, [r4, #16]
 8002c3a:	464b      	mov	r3, r9
 8002c3c:	4621      	mov	r1, r4
 8002c3e:	4640      	mov	r0, r8
 8002c40:	f8cd a000 	str.w	sl, [sp]
 8002c44:	aa03      	add	r2, sp, #12
 8002c46:	f7ff fedf 	bl	8002a08 <_printf_common>
 8002c4a:	3001      	adds	r0, #1
 8002c4c:	d14c      	bne.n	8002ce8 <_printf_i+0x200>
 8002c4e:	f04f 30ff 	mov.w	r0, #4294967295
 8002c52:	b004      	add	sp, #16
 8002c54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002c58:	4834      	ldr	r0, [pc, #208]	; (8002d2c <_printf_i+0x244>)
 8002c5a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8002c5e:	6829      	ldr	r1, [r5, #0]
 8002c60:	6823      	ldr	r3, [r4, #0]
 8002c62:	f851 6b04 	ldr.w	r6, [r1], #4
 8002c66:	6029      	str	r1, [r5, #0]
 8002c68:	061d      	lsls	r5, r3, #24
 8002c6a:	d514      	bpl.n	8002c96 <_printf_i+0x1ae>
 8002c6c:	07df      	lsls	r7, r3, #31
 8002c6e:	bf44      	itt	mi
 8002c70:	f043 0320 	orrmi.w	r3, r3, #32
 8002c74:	6023      	strmi	r3, [r4, #0]
 8002c76:	b91e      	cbnz	r6, 8002c80 <_printf_i+0x198>
 8002c78:	6823      	ldr	r3, [r4, #0]
 8002c7a:	f023 0320 	bic.w	r3, r3, #32
 8002c7e:	6023      	str	r3, [r4, #0]
 8002c80:	2310      	movs	r3, #16
 8002c82:	e7af      	b.n	8002be4 <_printf_i+0xfc>
 8002c84:	6823      	ldr	r3, [r4, #0]
 8002c86:	f043 0320 	orr.w	r3, r3, #32
 8002c8a:	6023      	str	r3, [r4, #0]
 8002c8c:	2378      	movs	r3, #120	; 0x78
 8002c8e:	4828      	ldr	r0, [pc, #160]	; (8002d30 <_printf_i+0x248>)
 8002c90:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002c94:	e7e3      	b.n	8002c5e <_printf_i+0x176>
 8002c96:	0659      	lsls	r1, r3, #25
 8002c98:	bf48      	it	mi
 8002c9a:	b2b6      	uxthmi	r6, r6
 8002c9c:	e7e6      	b.n	8002c6c <_printf_i+0x184>
 8002c9e:	4615      	mov	r5, r2
 8002ca0:	e7bb      	b.n	8002c1a <_printf_i+0x132>
 8002ca2:	682b      	ldr	r3, [r5, #0]
 8002ca4:	6826      	ldr	r6, [r4, #0]
 8002ca6:	1d18      	adds	r0, r3, #4
 8002ca8:	6961      	ldr	r1, [r4, #20]
 8002caa:	6028      	str	r0, [r5, #0]
 8002cac:	0635      	lsls	r5, r6, #24
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	d501      	bpl.n	8002cb6 <_printf_i+0x1ce>
 8002cb2:	6019      	str	r1, [r3, #0]
 8002cb4:	e002      	b.n	8002cbc <_printf_i+0x1d4>
 8002cb6:	0670      	lsls	r0, r6, #25
 8002cb8:	d5fb      	bpl.n	8002cb2 <_printf_i+0x1ca>
 8002cba:	8019      	strh	r1, [r3, #0]
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	4615      	mov	r5, r2
 8002cc0:	6123      	str	r3, [r4, #16]
 8002cc2:	e7ba      	b.n	8002c3a <_printf_i+0x152>
 8002cc4:	682b      	ldr	r3, [r5, #0]
 8002cc6:	2100      	movs	r1, #0
 8002cc8:	1d1a      	adds	r2, r3, #4
 8002cca:	602a      	str	r2, [r5, #0]
 8002ccc:	681d      	ldr	r5, [r3, #0]
 8002cce:	6862      	ldr	r2, [r4, #4]
 8002cd0:	4628      	mov	r0, r5
 8002cd2:	f000 f82f 	bl	8002d34 <memchr>
 8002cd6:	b108      	cbz	r0, 8002cdc <_printf_i+0x1f4>
 8002cd8:	1b40      	subs	r0, r0, r5
 8002cda:	6060      	str	r0, [r4, #4]
 8002cdc:	6863      	ldr	r3, [r4, #4]
 8002cde:	6123      	str	r3, [r4, #16]
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002ce6:	e7a8      	b.n	8002c3a <_printf_i+0x152>
 8002ce8:	462a      	mov	r2, r5
 8002cea:	4649      	mov	r1, r9
 8002cec:	4640      	mov	r0, r8
 8002cee:	6923      	ldr	r3, [r4, #16]
 8002cf0:	47d0      	blx	sl
 8002cf2:	3001      	adds	r0, #1
 8002cf4:	d0ab      	beq.n	8002c4e <_printf_i+0x166>
 8002cf6:	6823      	ldr	r3, [r4, #0]
 8002cf8:	079b      	lsls	r3, r3, #30
 8002cfa:	d413      	bmi.n	8002d24 <_printf_i+0x23c>
 8002cfc:	68e0      	ldr	r0, [r4, #12]
 8002cfe:	9b03      	ldr	r3, [sp, #12]
 8002d00:	4298      	cmp	r0, r3
 8002d02:	bfb8      	it	lt
 8002d04:	4618      	movlt	r0, r3
 8002d06:	e7a4      	b.n	8002c52 <_printf_i+0x16a>
 8002d08:	2301      	movs	r3, #1
 8002d0a:	4632      	mov	r2, r6
 8002d0c:	4649      	mov	r1, r9
 8002d0e:	4640      	mov	r0, r8
 8002d10:	47d0      	blx	sl
 8002d12:	3001      	adds	r0, #1
 8002d14:	d09b      	beq.n	8002c4e <_printf_i+0x166>
 8002d16:	3501      	adds	r5, #1
 8002d18:	68e3      	ldr	r3, [r4, #12]
 8002d1a:	9903      	ldr	r1, [sp, #12]
 8002d1c:	1a5b      	subs	r3, r3, r1
 8002d1e:	42ab      	cmp	r3, r5
 8002d20:	dcf2      	bgt.n	8002d08 <_printf_i+0x220>
 8002d22:	e7eb      	b.n	8002cfc <_printf_i+0x214>
 8002d24:	2500      	movs	r5, #0
 8002d26:	f104 0619 	add.w	r6, r4, #25
 8002d2a:	e7f5      	b.n	8002d18 <_printf_i+0x230>
 8002d2c:	0800310e 	.word	0x0800310e
 8002d30:	0800311f 	.word	0x0800311f

08002d34 <memchr>:
 8002d34:	4603      	mov	r3, r0
 8002d36:	b510      	push	{r4, lr}
 8002d38:	b2c9      	uxtb	r1, r1
 8002d3a:	4402      	add	r2, r0
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	4618      	mov	r0, r3
 8002d40:	d101      	bne.n	8002d46 <memchr+0x12>
 8002d42:	2000      	movs	r0, #0
 8002d44:	e003      	b.n	8002d4e <memchr+0x1a>
 8002d46:	7804      	ldrb	r4, [r0, #0]
 8002d48:	3301      	adds	r3, #1
 8002d4a:	428c      	cmp	r4, r1
 8002d4c:	d1f6      	bne.n	8002d3c <memchr+0x8>
 8002d4e:	bd10      	pop	{r4, pc}

08002d50 <memcpy>:
 8002d50:	440a      	add	r2, r1
 8002d52:	4291      	cmp	r1, r2
 8002d54:	f100 33ff 	add.w	r3, r0, #4294967295
 8002d58:	d100      	bne.n	8002d5c <memcpy+0xc>
 8002d5a:	4770      	bx	lr
 8002d5c:	b510      	push	{r4, lr}
 8002d5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002d62:	4291      	cmp	r1, r2
 8002d64:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002d68:	d1f9      	bne.n	8002d5e <memcpy+0xe>
 8002d6a:	bd10      	pop	{r4, pc}

08002d6c <memmove>:
 8002d6c:	4288      	cmp	r0, r1
 8002d6e:	b510      	push	{r4, lr}
 8002d70:	eb01 0402 	add.w	r4, r1, r2
 8002d74:	d902      	bls.n	8002d7c <memmove+0x10>
 8002d76:	4284      	cmp	r4, r0
 8002d78:	4623      	mov	r3, r4
 8002d7a:	d807      	bhi.n	8002d8c <memmove+0x20>
 8002d7c:	1e43      	subs	r3, r0, #1
 8002d7e:	42a1      	cmp	r1, r4
 8002d80:	d008      	beq.n	8002d94 <memmove+0x28>
 8002d82:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002d86:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002d8a:	e7f8      	b.n	8002d7e <memmove+0x12>
 8002d8c:	4601      	mov	r1, r0
 8002d8e:	4402      	add	r2, r0
 8002d90:	428a      	cmp	r2, r1
 8002d92:	d100      	bne.n	8002d96 <memmove+0x2a>
 8002d94:	bd10      	pop	{r4, pc}
 8002d96:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002d9a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002d9e:	e7f7      	b.n	8002d90 <memmove+0x24>

08002da0 <_free_r>:
 8002da0:	b538      	push	{r3, r4, r5, lr}
 8002da2:	4605      	mov	r5, r0
 8002da4:	2900      	cmp	r1, #0
 8002da6:	d040      	beq.n	8002e2a <_free_r+0x8a>
 8002da8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002dac:	1f0c      	subs	r4, r1, #4
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	bfb8      	it	lt
 8002db2:	18e4      	addlt	r4, r4, r3
 8002db4:	f000 f910 	bl	8002fd8 <__malloc_lock>
 8002db8:	4a1c      	ldr	r2, [pc, #112]	; (8002e2c <_free_r+0x8c>)
 8002dba:	6813      	ldr	r3, [r2, #0]
 8002dbc:	b933      	cbnz	r3, 8002dcc <_free_r+0x2c>
 8002dbe:	6063      	str	r3, [r4, #4]
 8002dc0:	6014      	str	r4, [r2, #0]
 8002dc2:	4628      	mov	r0, r5
 8002dc4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002dc8:	f000 b90c 	b.w	8002fe4 <__malloc_unlock>
 8002dcc:	42a3      	cmp	r3, r4
 8002dce:	d908      	bls.n	8002de2 <_free_r+0x42>
 8002dd0:	6820      	ldr	r0, [r4, #0]
 8002dd2:	1821      	adds	r1, r4, r0
 8002dd4:	428b      	cmp	r3, r1
 8002dd6:	bf01      	itttt	eq
 8002dd8:	6819      	ldreq	r1, [r3, #0]
 8002dda:	685b      	ldreq	r3, [r3, #4]
 8002ddc:	1809      	addeq	r1, r1, r0
 8002dde:	6021      	streq	r1, [r4, #0]
 8002de0:	e7ed      	b.n	8002dbe <_free_r+0x1e>
 8002de2:	461a      	mov	r2, r3
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	b10b      	cbz	r3, 8002dec <_free_r+0x4c>
 8002de8:	42a3      	cmp	r3, r4
 8002dea:	d9fa      	bls.n	8002de2 <_free_r+0x42>
 8002dec:	6811      	ldr	r1, [r2, #0]
 8002dee:	1850      	adds	r0, r2, r1
 8002df0:	42a0      	cmp	r0, r4
 8002df2:	d10b      	bne.n	8002e0c <_free_r+0x6c>
 8002df4:	6820      	ldr	r0, [r4, #0]
 8002df6:	4401      	add	r1, r0
 8002df8:	1850      	adds	r0, r2, r1
 8002dfa:	4283      	cmp	r3, r0
 8002dfc:	6011      	str	r1, [r2, #0]
 8002dfe:	d1e0      	bne.n	8002dc2 <_free_r+0x22>
 8002e00:	6818      	ldr	r0, [r3, #0]
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	4401      	add	r1, r0
 8002e06:	6011      	str	r1, [r2, #0]
 8002e08:	6053      	str	r3, [r2, #4]
 8002e0a:	e7da      	b.n	8002dc2 <_free_r+0x22>
 8002e0c:	d902      	bls.n	8002e14 <_free_r+0x74>
 8002e0e:	230c      	movs	r3, #12
 8002e10:	602b      	str	r3, [r5, #0]
 8002e12:	e7d6      	b.n	8002dc2 <_free_r+0x22>
 8002e14:	6820      	ldr	r0, [r4, #0]
 8002e16:	1821      	adds	r1, r4, r0
 8002e18:	428b      	cmp	r3, r1
 8002e1a:	bf01      	itttt	eq
 8002e1c:	6819      	ldreq	r1, [r3, #0]
 8002e1e:	685b      	ldreq	r3, [r3, #4]
 8002e20:	1809      	addeq	r1, r1, r0
 8002e22:	6021      	streq	r1, [r4, #0]
 8002e24:	6063      	str	r3, [r4, #4]
 8002e26:	6054      	str	r4, [r2, #4]
 8002e28:	e7cb      	b.n	8002dc2 <_free_r+0x22>
 8002e2a:	bd38      	pop	{r3, r4, r5, pc}
 8002e2c:	20000320 	.word	0x20000320

08002e30 <sbrk_aligned>:
 8002e30:	b570      	push	{r4, r5, r6, lr}
 8002e32:	4e0e      	ldr	r6, [pc, #56]	; (8002e6c <sbrk_aligned+0x3c>)
 8002e34:	460c      	mov	r4, r1
 8002e36:	6831      	ldr	r1, [r6, #0]
 8002e38:	4605      	mov	r5, r0
 8002e3a:	b911      	cbnz	r1, 8002e42 <sbrk_aligned+0x12>
 8002e3c:	f000 f8bc 	bl	8002fb8 <_sbrk_r>
 8002e40:	6030      	str	r0, [r6, #0]
 8002e42:	4621      	mov	r1, r4
 8002e44:	4628      	mov	r0, r5
 8002e46:	f000 f8b7 	bl	8002fb8 <_sbrk_r>
 8002e4a:	1c43      	adds	r3, r0, #1
 8002e4c:	d00a      	beq.n	8002e64 <sbrk_aligned+0x34>
 8002e4e:	1cc4      	adds	r4, r0, #3
 8002e50:	f024 0403 	bic.w	r4, r4, #3
 8002e54:	42a0      	cmp	r0, r4
 8002e56:	d007      	beq.n	8002e68 <sbrk_aligned+0x38>
 8002e58:	1a21      	subs	r1, r4, r0
 8002e5a:	4628      	mov	r0, r5
 8002e5c:	f000 f8ac 	bl	8002fb8 <_sbrk_r>
 8002e60:	3001      	adds	r0, #1
 8002e62:	d101      	bne.n	8002e68 <sbrk_aligned+0x38>
 8002e64:	f04f 34ff 	mov.w	r4, #4294967295
 8002e68:	4620      	mov	r0, r4
 8002e6a:	bd70      	pop	{r4, r5, r6, pc}
 8002e6c:	20000324 	.word	0x20000324

08002e70 <_malloc_r>:
 8002e70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002e74:	1ccd      	adds	r5, r1, #3
 8002e76:	f025 0503 	bic.w	r5, r5, #3
 8002e7a:	3508      	adds	r5, #8
 8002e7c:	2d0c      	cmp	r5, #12
 8002e7e:	bf38      	it	cc
 8002e80:	250c      	movcc	r5, #12
 8002e82:	2d00      	cmp	r5, #0
 8002e84:	4607      	mov	r7, r0
 8002e86:	db01      	blt.n	8002e8c <_malloc_r+0x1c>
 8002e88:	42a9      	cmp	r1, r5
 8002e8a:	d905      	bls.n	8002e98 <_malloc_r+0x28>
 8002e8c:	230c      	movs	r3, #12
 8002e8e:	2600      	movs	r6, #0
 8002e90:	603b      	str	r3, [r7, #0]
 8002e92:	4630      	mov	r0, r6
 8002e94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002e98:	4e2e      	ldr	r6, [pc, #184]	; (8002f54 <_malloc_r+0xe4>)
 8002e9a:	f000 f89d 	bl	8002fd8 <__malloc_lock>
 8002e9e:	6833      	ldr	r3, [r6, #0]
 8002ea0:	461c      	mov	r4, r3
 8002ea2:	bb34      	cbnz	r4, 8002ef2 <_malloc_r+0x82>
 8002ea4:	4629      	mov	r1, r5
 8002ea6:	4638      	mov	r0, r7
 8002ea8:	f7ff ffc2 	bl	8002e30 <sbrk_aligned>
 8002eac:	1c43      	adds	r3, r0, #1
 8002eae:	4604      	mov	r4, r0
 8002eb0:	d14d      	bne.n	8002f4e <_malloc_r+0xde>
 8002eb2:	6834      	ldr	r4, [r6, #0]
 8002eb4:	4626      	mov	r6, r4
 8002eb6:	2e00      	cmp	r6, #0
 8002eb8:	d140      	bne.n	8002f3c <_malloc_r+0xcc>
 8002eba:	6823      	ldr	r3, [r4, #0]
 8002ebc:	4631      	mov	r1, r6
 8002ebe:	4638      	mov	r0, r7
 8002ec0:	eb04 0803 	add.w	r8, r4, r3
 8002ec4:	f000 f878 	bl	8002fb8 <_sbrk_r>
 8002ec8:	4580      	cmp	r8, r0
 8002eca:	d13a      	bne.n	8002f42 <_malloc_r+0xd2>
 8002ecc:	6821      	ldr	r1, [r4, #0]
 8002ece:	3503      	adds	r5, #3
 8002ed0:	1a6d      	subs	r5, r5, r1
 8002ed2:	f025 0503 	bic.w	r5, r5, #3
 8002ed6:	3508      	adds	r5, #8
 8002ed8:	2d0c      	cmp	r5, #12
 8002eda:	bf38      	it	cc
 8002edc:	250c      	movcc	r5, #12
 8002ede:	4638      	mov	r0, r7
 8002ee0:	4629      	mov	r1, r5
 8002ee2:	f7ff ffa5 	bl	8002e30 <sbrk_aligned>
 8002ee6:	3001      	adds	r0, #1
 8002ee8:	d02b      	beq.n	8002f42 <_malloc_r+0xd2>
 8002eea:	6823      	ldr	r3, [r4, #0]
 8002eec:	442b      	add	r3, r5
 8002eee:	6023      	str	r3, [r4, #0]
 8002ef0:	e00e      	b.n	8002f10 <_malloc_r+0xa0>
 8002ef2:	6822      	ldr	r2, [r4, #0]
 8002ef4:	1b52      	subs	r2, r2, r5
 8002ef6:	d41e      	bmi.n	8002f36 <_malloc_r+0xc6>
 8002ef8:	2a0b      	cmp	r2, #11
 8002efa:	d916      	bls.n	8002f2a <_malloc_r+0xba>
 8002efc:	1961      	adds	r1, r4, r5
 8002efe:	42a3      	cmp	r3, r4
 8002f00:	6025      	str	r5, [r4, #0]
 8002f02:	bf18      	it	ne
 8002f04:	6059      	strne	r1, [r3, #4]
 8002f06:	6863      	ldr	r3, [r4, #4]
 8002f08:	bf08      	it	eq
 8002f0a:	6031      	streq	r1, [r6, #0]
 8002f0c:	5162      	str	r2, [r4, r5]
 8002f0e:	604b      	str	r3, [r1, #4]
 8002f10:	4638      	mov	r0, r7
 8002f12:	f104 060b 	add.w	r6, r4, #11
 8002f16:	f000 f865 	bl	8002fe4 <__malloc_unlock>
 8002f1a:	f026 0607 	bic.w	r6, r6, #7
 8002f1e:	1d23      	adds	r3, r4, #4
 8002f20:	1af2      	subs	r2, r6, r3
 8002f22:	d0b6      	beq.n	8002e92 <_malloc_r+0x22>
 8002f24:	1b9b      	subs	r3, r3, r6
 8002f26:	50a3      	str	r3, [r4, r2]
 8002f28:	e7b3      	b.n	8002e92 <_malloc_r+0x22>
 8002f2a:	6862      	ldr	r2, [r4, #4]
 8002f2c:	42a3      	cmp	r3, r4
 8002f2e:	bf0c      	ite	eq
 8002f30:	6032      	streq	r2, [r6, #0]
 8002f32:	605a      	strne	r2, [r3, #4]
 8002f34:	e7ec      	b.n	8002f10 <_malloc_r+0xa0>
 8002f36:	4623      	mov	r3, r4
 8002f38:	6864      	ldr	r4, [r4, #4]
 8002f3a:	e7b2      	b.n	8002ea2 <_malloc_r+0x32>
 8002f3c:	4634      	mov	r4, r6
 8002f3e:	6876      	ldr	r6, [r6, #4]
 8002f40:	e7b9      	b.n	8002eb6 <_malloc_r+0x46>
 8002f42:	230c      	movs	r3, #12
 8002f44:	4638      	mov	r0, r7
 8002f46:	603b      	str	r3, [r7, #0]
 8002f48:	f000 f84c 	bl	8002fe4 <__malloc_unlock>
 8002f4c:	e7a1      	b.n	8002e92 <_malloc_r+0x22>
 8002f4e:	6025      	str	r5, [r4, #0]
 8002f50:	e7de      	b.n	8002f10 <_malloc_r+0xa0>
 8002f52:	bf00      	nop
 8002f54:	20000320 	.word	0x20000320

08002f58 <_realloc_r>:
 8002f58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002f5c:	4680      	mov	r8, r0
 8002f5e:	4614      	mov	r4, r2
 8002f60:	460e      	mov	r6, r1
 8002f62:	b921      	cbnz	r1, 8002f6e <_realloc_r+0x16>
 8002f64:	4611      	mov	r1, r2
 8002f66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002f6a:	f7ff bf81 	b.w	8002e70 <_malloc_r>
 8002f6e:	b92a      	cbnz	r2, 8002f7c <_realloc_r+0x24>
 8002f70:	f7ff ff16 	bl	8002da0 <_free_r>
 8002f74:	4625      	mov	r5, r4
 8002f76:	4628      	mov	r0, r5
 8002f78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002f7c:	f000 f838 	bl	8002ff0 <_malloc_usable_size_r>
 8002f80:	4284      	cmp	r4, r0
 8002f82:	4607      	mov	r7, r0
 8002f84:	d802      	bhi.n	8002f8c <_realloc_r+0x34>
 8002f86:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8002f8a:	d812      	bhi.n	8002fb2 <_realloc_r+0x5a>
 8002f8c:	4621      	mov	r1, r4
 8002f8e:	4640      	mov	r0, r8
 8002f90:	f7ff ff6e 	bl	8002e70 <_malloc_r>
 8002f94:	4605      	mov	r5, r0
 8002f96:	2800      	cmp	r0, #0
 8002f98:	d0ed      	beq.n	8002f76 <_realloc_r+0x1e>
 8002f9a:	42bc      	cmp	r4, r7
 8002f9c:	4622      	mov	r2, r4
 8002f9e:	4631      	mov	r1, r6
 8002fa0:	bf28      	it	cs
 8002fa2:	463a      	movcs	r2, r7
 8002fa4:	f7ff fed4 	bl	8002d50 <memcpy>
 8002fa8:	4631      	mov	r1, r6
 8002faa:	4640      	mov	r0, r8
 8002fac:	f7ff fef8 	bl	8002da0 <_free_r>
 8002fb0:	e7e1      	b.n	8002f76 <_realloc_r+0x1e>
 8002fb2:	4635      	mov	r5, r6
 8002fb4:	e7df      	b.n	8002f76 <_realloc_r+0x1e>
	...

08002fb8 <_sbrk_r>:
 8002fb8:	b538      	push	{r3, r4, r5, lr}
 8002fba:	2300      	movs	r3, #0
 8002fbc:	4d05      	ldr	r5, [pc, #20]	; (8002fd4 <_sbrk_r+0x1c>)
 8002fbe:	4604      	mov	r4, r0
 8002fc0:	4608      	mov	r0, r1
 8002fc2:	602b      	str	r3, [r5, #0]
 8002fc4:	f7fe f800 	bl	8000fc8 <_sbrk>
 8002fc8:	1c43      	adds	r3, r0, #1
 8002fca:	d102      	bne.n	8002fd2 <_sbrk_r+0x1a>
 8002fcc:	682b      	ldr	r3, [r5, #0]
 8002fce:	b103      	cbz	r3, 8002fd2 <_sbrk_r+0x1a>
 8002fd0:	6023      	str	r3, [r4, #0]
 8002fd2:	bd38      	pop	{r3, r4, r5, pc}
 8002fd4:	20000328 	.word	0x20000328

08002fd8 <__malloc_lock>:
 8002fd8:	4801      	ldr	r0, [pc, #4]	; (8002fe0 <__malloc_lock+0x8>)
 8002fda:	f000 b811 	b.w	8003000 <__retarget_lock_acquire_recursive>
 8002fde:	bf00      	nop
 8002fe0:	2000032c 	.word	0x2000032c

08002fe4 <__malloc_unlock>:
 8002fe4:	4801      	ldr	r0, [pc, #4]	; (8002fec <__malloc_unlock+0x8>)
 8002fe6:	f000 b80c 	b.w	8003002 <__retarget_lock_release_recursive>
 8002fea:	bf00      	nop
 8002fec:	2000032c 	.word	0x2000032c

08002ff0 <_malloc_usable_size_r>:
 8002ff0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002ff4:	1f18      	subs	r0, r3, #4
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	bfbc      	itt	lt
 8002ffa:	580b      	ldrlt	r3, [r1, r0]
 8002ffc:	18c0      	addlt	r0, r0, r3
 8002ffe:	4770      	bx	lr

08003000 <__retarget_lock_acquire_recursive>:
 8003000:	4770      	bx	lr

08003002 <__retarget_lock_release_recursive>:
 8003002:	4770      	bx	lr

08003004 <_init>:
 8003004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003006:	bf00      	nop
 8003008:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800300a:	bc08      	pop	{r3}
 800300c:	469e      	mov	lr, r3
 800300e:	4770      	bx	lr

08003010 <_fini>:
 8003010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003012:	bf00      	nop
 8003014:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003016:	bc08      	pop	{r3}
 8003018:	469e      	mov	lr, r3
 800301a:	4770      	bx	lr
